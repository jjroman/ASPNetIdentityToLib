<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>Cuando este atributo se coloca en una propiedad, indica que la columna de la base de datos a la que se asigna la propiedad tiene un índice.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>Crea una instancia de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> para un índice cuyo nombre se asigna por convención y para el que no se ha especificado ningún orden, agrupación en clústeres o unicidad de columnas.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>Crea una instancia de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> para un índice con el nombre especificado y para el que no se ha especificado ningún orden, agrupación en clústeres o unicidad de columnas.</summary>
      <param name="name">Nombre del índice.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>Crea una instancia de <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> para un índice con el nombre y el orden de columnas especificados, pero para el que no se ha especificado ninguna agrupación en clústeres o unicidad.</summary>
      <param name="name">Nombre del índice.</param>
      <param name="order">Número que se usará para determinar el orden de las columnas de los índices de varias columnas.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Devuelve true si este atributo especifica el mismo nombre y configuración que el atributo indicado.</summary>
      <returns>Es true si el otro objeto es igual que este objeto; de lo contrario, es false.</returns>
      <param name="other">Atributo que se va a comparar.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>Devuelve true si este atributo especifica el mismo nombre y configuración que el atributo indicado.</summary>
      <returns>Es true si el otro objeto es igual que este objeto; de lo contrario, es false.</returns>
      <param name="obj">Atributo que se va a comparar.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>Establezca esta propiedad en true para definir un índice clúster.Establezca esta propiedad en false para definir un índice no clúster.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>Devuelve true si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> se ha establecido en un valor.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>Establezca esta propiedad en true para definir un índice único.Establezca esta propiedad en false para definir un índice no único.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>Devuelve true si <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> se ha establecido en un valor.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>Nombre del índice.</summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>Número que se usará para determinar el orden de las columnas de los índices de varias columnas.Será -1 si no se ha especificado ningún orden de columnas.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString"></member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>Devuelve un identificador diferente para cada instancia de objeto de forma que los descriptores de tipo no intenten combinar todas las instancias de IndexAttribute en una única instancia.</summary>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Implementación de IDatabaseInitializer que volverá a crear y, opcionalmente, volverá a inicializar la base de datos solo si la base de datos no existe.Para inicializar la base de datos, cree una clase derivada y reemplace el método Seed.</summary>
      <typeparam name="TContext"> Tipo del contexto. </typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context"> Contexto. </param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Método que se debe reemplazar para agregar realmente datos al contexto para la inicialización.La implementación predeterminada no hace nada.</summary>
      <param name="context"> Contexto que se va a inicializar. </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Una instancia de esta clase se obtiene de un objeto <see cref="T:System.Data.Entity.DbContext" /> y se puede usar para administrar la base de datos real que respalda un DbContext o una conexión.Esto incluye la creación, eliminación y comprobación de la existencia de una base de datos.Tenga en cuenta que la eliminación y la comprobación de existencia de una base de datos pueden realizarse con solamente una     conexión (es decir.sin un contexto completo) utilizando los métodos estáticos de esta clase.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>Inicia una transacción en la conexión de almacenamiento subyacente</summary>
      <returns>objeto <see cref="T:System.Data.Entity.DbContextTransaction" /> que ajusta el acceso al objeto de transacción del almacenamiento subyacente</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Inicia una transacción en la conexión de almacenamiento subyacente con el nivel de aislamiento especificado</summary>
      <returns>objeto <see cref="T:System.Data.Entity.DbContextTransaction" /> que ajusta el acceso al objeto de transacción del almacenamiento subyacente</returns>
      <param name="isolationLevel">Nivel de aislamiento de la base de datos con el que se creará la transacción de almacenamiento subyacente</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>Obtiene o establece el valor de tiempo de espera, en segundos, para todas las operaciones del contexto.El valor predeterminado es NULL, donde NULL indica que se usará el valor predeterminado del proveedor subyacente.</summary>
      <returns>Tiempo de espera, en segundos, o NULL para usar el valor predeterminado del proveedor.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Comprueba si la base de datos es compatible o no con el modelo Code First actual.</summary>
      <returns>true si el hash de modelo en el contexto y en la base de datos coinciden; en caso contrario, false.</returns>
      <param name="throwIfNoMetadata">Cuando se establece en true, se producirá una excepción si no se encuentra ningún metadato del modelo en la base de datos.Cuando se establece en false, este método devolverá true si no se encuentran metadatos.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Devuelve la conexión que está siendo utilizada por este contexto.Esto puede hacer que se cree la conexión si no existe ya.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Crea una nueva base de datos en el servidor de bases de datos para el modelo definido en el contexto de respaldo.Tenga en cuenta que la llamada a este método antes de que se haya ejecutado la estrategia de inicialización de base de datos deshabilitará la ejecución de esa estrategia.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Crea una nueva base de datos en el servidor de bases de datos para el modelo definido en el contexto de respaldo, pero solo si una base de datos con el mismo nombre no existe en el servidor.</summary>
      <returns>true si la base de datos no existía y se creó; en caso contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Generador de conexión que se va a usar al crear una <see cref="T:System.Data.Common.DbConnection" /> a partir de simplemente un nombre de base de datos o una cadena de conexión.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada.Llamar a este método desde fuera de un inicializador marcará la base de datos como que no se ha inicializado.Esto significa que si se intenta volver a usar la base de datos una vez eliminada, se ejecutará nuevamente cualquier conjunto de inicializador y, normalmente, intentará volver a crear la base de datos automáticamente.</summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada.</summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
      <param name="existingConnection">Conexión existente con la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Elimina la base de datos en el servidor de bases de datos si existe; de lo contrario, no hace nada.La conexión con la base de datos se crea utilizando el nombre de base de datos o la cadena de conexión determinados, de la misma manera que se describe en la documentación de la clase <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si la base de datos no existía y se eliminó; en caso contrario, false.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión a la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Determina si el valor de la base de datos especificada es igual al de la base de datos actual.</summary>
      <returns>Es true si la base de datos especificada es igual a la base de datos actual; en caso contrario, false.</returns>
      <param name="obj">Base de datos que se compara con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Ejecuta el comando de DDL/DML determinado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>El resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="sql">Cadena de comando.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Ejecuta el comando de DDL/DML determinado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>El resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="sql">Cadena de comando.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Ejecuta de forma asincrónica el comando de DDL/DML especificado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="sql">Cadena de comando.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de forma asincrónica el comando de DDL/DML especificado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="sql">Cadena de comando.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>Ejecuta de forma asincrónica el comando de DDL/DML especificado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="sql">Cadena de comando.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de forma asincrónica el comando de DDL/DML especificado en la base de datos.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el resultado devuelto por la base de datos después de la ejecución del comando.</returns>
      <param name="sql">Cadena de comando.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Parámetros que se aplican a la cadena de comando.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Comprueba si la base de datos existe o no en el servidor.</summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Comprueba si la base de datos existe o no en el servidor.</summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
      <param name="existingConnection">Conexión existente con la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Comprueba si la base de datos existe o no en el servidor.La conexión con la base de datos se crea utilizando el nombre de base de datos o la cadena de conexión determinados, de la misma manera que se describe en la documentación de la clase <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión a la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Devuelve la función hash de esta base de datos.</summary>
      <returns>La función hash de esta base de datos.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Ejecuta la <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> registrada en este contexto.Si "force" se establece en true, el inicializador se ejecuta independientemente de que se haya ejecutado antes o no.Esto puede ser útil si se elimina una base de datos mientras se ejecuta una aplicación y es necesario reinicializar.Si "force" se establece en false, el inicializador solo se ejecutará si no se ha ejecutado ya para este contexto, modelo y conexión en este dominio de aplicación.Este método suele utilizarse cuando es necesario asegurarse de que la base de datos se ha creado e inicializado antes de iniciarse una operación, cuando hacerlo de forma diferida puede ocasionar problemas, como cuando la operación forma parte de una transacción.</summary>
      <param name="force">Si se establece en true, el inicializador se ejecuta aunque ya se haya ejecutado.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>Establezca esta propiedad para registrar el SQL generado por el <see cref="T:System.Data.Entity.DbContext" /> en el delegado especificado.Por ejemplo, para registrarlo en la consola, establezca esta propiedad en <see cref="M:System.Console.Write(System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Establece el inicializador de la base de datos que se va a usar para el tipo de contexto especificado.Se invoca al inicializador de la base de datos cuando se usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> especificado para obtener acceso a una base de datos por primera vez.La estrategia predeterminada para los contextos Code First es una instancia de <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="strategy">Inicializador que se va a usar, o NULL para deshabilitar la inicialización para el tipo de contexto especificado.</param>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá elementos del tipo genérico determinado.El tipo puede ser cualquier tipo que tenga propiedades que coincidan con los nombres de las columnas devueltas desde la consulta, o puede ser un tipo primitivo simple.El tipo no tiene por qué ser un tipo de entidad.El contexto nunca realiza el seguimiento de los resultados de esta consulta aunque el tipo de objeto devuelto sea un tipo de entidad.Utilice el método <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> para devolver entidades de las que el contexto realiza el seguimiento.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.SqlQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.SqlQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de objeto devuelto por la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá elementos del tipo determinado.El tipo puede ser cualquier tipo que tenga propiedades que coincidan con los nombres de las columnas devueltas desde la consulta, o puede ser un tipo primitivo simple.El tipo no tiene por qué ser un tipo de entidad.El contexto nunca realiza el seguimiento de los resultados de esta consulta aunque el tipo de objeto devuelto sea un tipo de entidad.Utilice el método <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> para devolver entidades de las que el contexto realiza el seguimiento.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="elementType">Tipo de objeto devuelto por la consulta.</param>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Devuelve una representación de cadena de la base de datos.</summary>
      <returns>Una representación de cadena de la base de datos.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Permite al usuario pasar una transacción de base de datos creada fuera del objeto <see cref="T:System.Data.Entity.Database" /> si desea que Entity Framework ejecute comandos dentro de la transacción externa.O bien, pase NULL para borrar el conocimiento del marco de trabajo de esa transacción.</summary>
      <param name="transaction">transacción externa</param>
      <exception cref="T:System.InvalidOperationException">Se produce si la transacción ya se ha completado</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si la conexión asociada al objeto de <see cref="T:System.Data.Entity.Database" /> ya está dada de alta en una transacción de <see cref="T:System.Transactions.TransactionScope" /></exception>
      <exception cref="T:System.InvalidOperationException">Se produce si la conexión asociada al objeto de <see cref="T:System.Data.Entity.Database" /> ya está participando en una transacción</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si la conexión asociada a la transacción no coincide con la conexión de Entity Framework</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>Una clase derivada de esta clase puede colocarse en el mismo ensamblado que una clase derivada de <see cref="T:System.Data.Entity.DbContext" /> para definir la configuración de Entity Framework para una aplicación.Para definir la configuración se invoca a los métodos protegidos y se definen las propiedades protegidas de esta clase en el constructor del tipo derivado.El tipo que se va a usar también se puede registrar en el archivo de configuración de la aplicación.Vea http://go.microsoft.com/fwlink/?LinkId=260883 para obtener más información sobre la configuración de Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>Cualquier clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> debe tener un constructor público sin parámetros y ese constructor debe llamar a este constructor.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para agregar una instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> a la Cadena de responsabilidad de las resoluciones que se usan para resolver las dependencias que Entity Framework necesita.A diferencia del método AddDependencyResolver, este método pone la resolución en la parte inferior de la Cadena de responsabilidad, de forma que solo se usará para resolver una dependencia que no se pudo resolver mediante ninguna de las demás resoluciones.</summary>
      <param name="resolver">Resolución que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para agregar una instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> a la Cadena de responsabilidad de las resoluciones que se usan para resolver las dependencias que Entity Framework necesita.</summary>
      <param name="resolver">Resolución que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" /> al iniciar la aplicación.Tenga en cuenta que los interceptores también se pueden agregar y quitar en cualquier momento mediante <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" />.</summary>
      <param name="interceptor">Interceptor que se va a registrar.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Obtiene el <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que se emplea para resolver las dependencias de servicio en Entity Framework.</summary>
      <returns>El <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que se emplea para resolver las dependencias de servicio en Entity Framework.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <returns>Devuelve <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <returns>Devuelve <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>Intenta detectar y cargar <see cref="T:System.Data.Entity.DbConfiguration" /> desde el ensamblado especificado.Este método está pensado para que lo usen las herramientas para asegurarse de que se carga la configuración correcta en el dominio de aplicación.Las herramientas deben usar este método antes de obtener acceso a la propiedad <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.Si las herramientas conocen el tipo de <see cref="T:System.Data.Entity.DbContext" /> que se usa, se debe emplear el método <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> porque proporciona una mayor probabilidad de que se use la configuración correcta.</summary>
      <param name="assemblyHint">
        <see cref="T:System.Reflection.Assembly" /> que se usará para la detección de configuración.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>Intenta detectar y cargar la <see cref="T:System.Data.Entity.DbConfiguration" /> asociada con el tipo de <see cref="T:System.Data.Entity.DbContext" /> especificado.Este método está pensado para que lo usen las herramientas para asegurarse de que se carga la configuración correcta en el dominio de aplicación.Las herramientas deben usar este método antes de obtener acceso a la propiedad <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.</summary>
      <param name="contextType">Tipo de <see cref="T:System.Data.Entity.DbContext" /> que se usará para la detección de configuración.</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>Se produce durante la inicialización de EF una vez creado DbConfiguration, pero justo antes de que se bloquee su uso.Use este evento para inspeccionar o para invalidar los servicios que se han registrado antes de que se bloquee la configuración.Hay que tener cuidado al usar este evento porque puede impedir que las herramientas detecten la misma configuración que se usa durante el tiempo de ejecución.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>Crea una copia superficial del <see cref="T:System.Object" /> actual.</summary>
      <returns>Copia superficial del <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>Instancia singleton de <see cref="T:System.Data.Entity.DbConfiguration" /> para este dominio de aplicación.Se puede definir al inicio de la aplicación antes de que se haya usado ninguna característica de Entity Framework, y se debe tratar posteriormente como de solo lectura.</summary>
      <param name="configuration">Instancia de <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un generador que permita que <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> cree instancias de un contexto que no tiene un constructor público sin parámetros.</summary>
      <param name="factory">Delegado que se usará para crear instancias de contexto.</param>
      <typeparam name="TContext">Tipo de contexto para el que se debe usar el generador.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un generador que permita que <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> cree instancias de un contexto que no tiene un constructor público sin parámetros.</summary>
      <param name="contextType">Tipo de contexto para el que se debe usar el generador.</param>
      <param name="factory">Delegado que se usará para crear instancias de contexto.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para definir el inicializador de base de datos que se va a usar para el tipo de contexto especificado.Se invoca al inicializador de la base de datos cuando se usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> especificado para obtener acceso a una base de datos por primera vez.La estrategia predeterminada para los contextos Code First es una instancia de <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="initializer">Inicializador que se va a usar, o NULL para deshabilitar la inicialización para el tipo de contexto especificado.</param>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un generador para el tipo de <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> que se usará con <see cref="P:System.Data.Entity.Database.Log" />.</summary>
      <param name="logFormatterFactory">Delegado que creará instancias del formateador.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>Define la <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> que se usa para crear conexiones por convención si no se proporciona ninguna otra conexión o cadena de conexión, o si <see cref="T:System.Data.Entity.DbContext" /> no puede detectarla.Tenga en cuenta que el generador de conexiones predeterminado se define en el archivo app.config o web.config siempre que se instala el paquete EntityFramework de NuGet.Respecto a todos los valores del archivo de configuración, el generador de conexiones predeterminado definido en el archivo de configuración tendrá prioridad sobre cualquier valor configurado mediante este método.Por tanto, es necesario quitar esta definición del archivo de configuración antes de invocar a este método para que surta algún efecto.Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para cambiar el generador de conexiones predeterminado que se va a usar.</summary>
      <param name="connectionFactory">Generador de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un delegado de <see cref="T:System.Func`3" /> que se pueda usar para la creación del <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> predeterminado para cualquier <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />.Este generador predeterminado solo se usará si no se establece explícitamente ningún generador en <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> y si no se ha registrado ningún generador para el proveedor en uso mediante el método <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
      <param name="factory">Generador para crear instancias <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> para un determinado <see cref="T:System.Data.Common.DbConnection" /> y <see cref="T:System.String" /> que representa el esquema predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer la instancia global de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> que se usará cuando se necesite un proveedor espacial y no se encuentre un proveedor espacial específico del proveedor.Normalmente, un proveedor espacial específico del proveedor se obtiene a partir de una implementación de <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> que a su vez se devuelve resolviendo un servicio para <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> pasando el nombre invariable del proveedor como clave.Sin embargo, esto no funciona en instancias independientes de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> y <see cref="T:System.Data.Entity.Spatial.DbGeography" />, ya que no se puede saber el proveedor espacial que se usará.Por tanto, al crear instancias independientes de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> y <see cref="T:System.Data.Entity.Spatial.DbGeography" /> siempre se usa el proveedor espacial global.</summary>
      <param name="spatialProvider">Proveedor espacial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
      <param name="transactionHandlerFactory">Función que devuelve una nueva instancia de un controlador de transacciones.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar una <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> que se usará con el proveedor representado por el nombre invariable especificado.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará esta estrategia de ejecución.</param>
      <param name="getExecutionStrategy">Función que devuelve una instancia nueva de una estrategia de ejecución.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar una <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> que se usará con el proveedor representado por el nombre invariable especificado y para el nombre de servidor indicado.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará esta estrategia de ejecución.</param>
      <param name="getExecutionStrategy">Función que devuelve una instancia nueva de una estrategia de ejecución.</param>
      <param name="serverName">Cadena que se comparará con el nombre de servidor en la cadena de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un delegado de <see cref="T:System.Func`3" /> que permita la creación de un <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> personalizado para el proveedor especificado para cualquier <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> que no tenga establecido un generador explícito.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET para el que se debe usar este generador.</param>
      <param name="factory">Generador para crear instancias <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> para un determinado <see cref="T:System.Data.Common.DbConnection" /> y <see cref="T:System.String" /> que representa el esquema predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para definir una implementación de <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> que permita obtener tokens de manifiesto de proveedor de las conexiones sin abrir necesariamente la conexión.</summary>
      <param name="resolver">Resolución de token del manifiesto.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer un generador para implementaciones de <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> que permita serializar las anotaciones personalizadas representadas mediante instancias de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> hacia y desde XML EDMX.</summary>
      <param name="annotationName">Nombre de la anotación personalizada que administrará este serializador.</param>
      <param name="serializerFactory">Delegado que se usará para crear instancias del serializador.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> que se usará con el proveedor representado por el nombre invariable especificado.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET para el que se debe usar este generador.</param>
      <param name="sqlGenerator">Delegado que devuelve una nueva instancia del generador de SQL cada vez que se le llama.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer <see cref="T:System.Func`2" /> como generador de claves de caché de modelo que permita cambiar la clave usada para almacenar en memoria caché el modelo que hay detrás de un <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="keyFactory">Generador de clave.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para definir el servicio de pluralización.</summary>
      <param name="pluralizationService">Servicio de pluralization que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un proveedor de ADO.NET.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará este proveedor.</param>
      <param name="providerFactory">Instancia del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para definir una implementación de <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> que permita obtener un <see cref="T:System.Data.Common.DbProviderFactory" /> desde una <see cref="T:System.Data.Common.DbConnection" /> en aquellos casos en los que la implementación predeterminada no sea suficiente.</summary>
      <param name="providerFactoryResolver">Servicio de generador de proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>Invoque a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un proveedor de Entity Framework.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará este proveedor.</param>
      <param name="provider">Instancia del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer una implementación de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> que se usará para un proveedor y un token de manifiesto de proveedor específicos.</summary>
      <param name="key">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> que indica el tipo de conexión ADO.NET para el que se usará este proveedor espacial.</param>
      <param name="spatialProvider">Proveedor espacial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para establecer una implementación de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> que se usará para un proveedor específico con cualquier token de manifiesto.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará este proveedor espacial.</param>
      <param name="spatialProvider">Proveedor espacial.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> que se usará con el proveedor representado por el nombre invariable especificado.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará este controlador de transacciones.</param>
      <param name="transactionHandlerFactory">Función que devuelve una nueva instancia de un controlador de transacciones.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>Llame a este método desde el constructor de una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" /> para registrar un <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> que se usará con el proveedor representado por el nombre invariable especificado y para el nombre de servidor indicado.</summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará este controlador de transacciones.</param>
      <param name="transactionHandlerFactory">Función que devuelve una nueva instancia de un controlador de transacciones.</param>
      <param name="serverName">Cadena que se comparará con el nombre de servidor en la cadena de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>Este atributo se puede colocar en una subclase de <see cref="T:System.Data.Entity.DbContext" /> para indicar que la subclase de <see cref="T:System.Data.Entity.DbConfiguration" /> que representa la configuración basada en código de la aplicación está en otro ensamblado que el tipo de contexto.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>Indica que la subclase de <see cref="T:System.Data.Entity.DbConfiguration" /> representada por el nombre calificado con el ensamblado especificado se debe usar para la configuración basada en código de esta aplicación.</summary>
      <param name="configurationTypeName">Tipo <see cref="T:System.Data.Entity.DbConfiguration" /> que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>Indica que la subclase especificada de <see cref="T:System.Data.Entity.DbConfiguration" /> se debe usar para la configuración basada en código de esta aplicación.</summary>
      <param name="configurationType">Tipo <see cref="T:System.Data.Entity.DbConfiguration" /> que se va a usar.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>Obtiene la subclase de <see cref="T:System.Data.Entity.DbConfiguration" /> que se debe usar para la configuración basada en código de esta aplicación.</summary>
      <returns>Subclase de <see cref="T:System.Data.Entity.DbConfiguration" /> que se debe usar para la configuración basada en código de esta aplicación.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Una instancia de DbContext representa una combinación de los modelos de unidad de trabajo y repositorio, de modo que pueda emplearse para consultar una base de datos y agrupar los cambios que, seguidamente, se volverán a escribir en el almacenamiento como una unidad.DbContext es conceptualmente similar a ObjectContext.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Crea una nueva instancia de contexto usando convenciones para crear el nombre de la base de datos con la que se realizará una conexión.El nombre por convención es el nombre completo (espacio de nombres + nombre de clase) de la clase de contexto derivado.Vea los comentarios de la clase para saber cómo se usa para crear una conexión.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Crea una nueva instancia de contexto utilizando la conexión existente para conectar con una base de datos.La conexión no se desechará cuando se deseche el contexto si <paramref name="contextOwnsConnection" /> es false.</summary>
      <param name="existingConnection">Conexión existente que se utiliza para el nuevo contexto.</param>
      <param name="contextOwnsConnection">Si se establece en true, la conexión se desechará cuando se deseche el contexto; de lo contrario, el autor de la llamada debe desechar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Crea una nueva instancia de contexto utilizando la conexión existente para conectar con una base de datos y la inicializa a partir del modelo determinado.La conexión no se desechará cuando se deseche el contexto si <paramref name="contextOwnsConnection" /> es false.</summary>
      <param name="existingConnection">Conexión existente que se utiliza para el nuevo contexto.</param>
      <param name="model">Modelo que respaldará este contexto.</param>
      <param name="contextOwnsConnection">Si se establece en true, la conexión se desechará cuando se deseche el contexto; de lo contrario, el autor de la llamada debe desechar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>Crea una nueva instancia de contexto en torno a un ObjectContext existente.</summary>
      <param name="objectContext">ObjectContext existente para encapsular el nuevo contexto.</param>
      <param name="dbContextOwnsObjectContext">Si se establece en true, la clase ObjectContext se desechará cuando se deseche la clase DbContext; de lo contrario, el autor de la llamada debe desechar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Crea una nueva instancia de contexto utilizando convenciones para crear el nombre de la base de datos con la que se realizará una conexión y la inicializa a partir del modelo determinado.El nombre por convención es el nombre completo (espacio de nombres + nombre de clase) de la clase de contexto derivado.Vea los comentarios de la clase para saber cómo se usa para crear una conexión.</summary>
      <param name="model">Modelo que respaldará este contexto.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Crea una nueva instancia de contexto utilizando la cadena dada como nombre o cadena de conexión para la base de datos con la que se realizará una conexión.Vea los comentarios de la clase para saber cómo se usa para crear una conexión.</summary>
      <param name="nameOrConnectionString">Nombre de base de datos o una cadena de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Crea una nueva instancia de contexto utilizando la cadena dada como nombre o cadena de conexión para la base de datos con la que se realizará una conexión y la inicializa a partir del modelo determinado.Vea los comentarios de la clase para saber cómo se usa para crear una conexión.</summary>
      <param name="nameOrConnectionString">Nombre de base de datos o una cadena de conexión.</param>
      <param name="model">Modelo que respaldará este contexto.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Proporciona acceso a las características del contexto que tratan el seguimiento de cambios de entidades.</summary>
      <returns>Un objeto utilizado para obtener acceso a las características que tratan el seguimiento de cambios.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Proporciona acceso a las opciones de configuración para el contexto.</summary>
      <returns>Un objeto utilizado para tener acceso a las opciones de configuración.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Crea una instancia de base de datos para este contexto, que permite realizar comprobaciones de creación, eliminación y existencia para la base de datos subyacente.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Llama al método Dispose protegido.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Elimina el contexto.El objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> subyacente también se elimina si fue creado por este contexto. o bien si la propiedad se pasó a este contexto cuando se creó el citado contexto.La conexión con la base de datos (objeto <see cref="T:System.Data.Common.DbConnection" />) también se desecha si la creó este contexto o si su propiedad se pasó a este contexto cuando se creó el citado contexto.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para la entidad determinada que proporciona acceso a información sobre la entidad y la capacidad de realizar las acciones en la entidad.</summary>
      <returns>Una entrada para la entidad.</returns>
      <param name="entity">Entidad.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> para la entidad determinada que proporciona acceso a información sobre la entidad y la capacidad de realizar las acciones en la entidad.</summary>
      <returns>Una entrada para la entidad.</returns>
      <param name="entity">Entidad.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Determina si el objeto DbContext especificado es igual al objeto DbContext actual.</summary>
      <returns>true si el DbContext especificado es igual al DbContext actual; de lo contrario, false.</returns>
      <param name="obj">El DbContext a comparar con DbContext actual.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Devuelve la función hash para este DbContext.</summary>
      <returns>La función hash para este DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Devuelve el tipo del DbContext actual.</summary>
      <returns>El tipo del DbContext actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Valida las entidades de las que se realiza un seguimiento y devuelve una colección de <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> que contiene los resultados de la validación.</summary>
      <returns>La colección de resultados de la validación para las entidades no válidas.La colección nunca es NULL y no debe contener valores NULL ni resultados para entidades válidas.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Se llama a este método cuando el modelo para un contexto derivado se ha inicializado, pero antes de que el modelo se haya bloqueado y utilizado para inicializar el contexto.La implementación predeterminada de este método no hace nada, pero se puede reemplazar en una clase derivada de modo que el modelo se pueda configurar más antes de bloquearse.</summary>
      <param name="modelBuilder">Generador que define el modelo para el contexto que se está creando.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Guarda todos los cambios realizados en este contexto en la base de datos subyacente.</summary>
      <returns>El número de objetos escritos en la base de datos subyacente.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Error al enviar actualizaciones a la base de datos.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Un comando de la base de datos no afectó al número de filas que se esperaba.Esto suele indicar una infracción de la simultaneidad optimista; es decir, una fila ha cambiado en la base de datos desde que se realizó la consulta.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">La operación de guardar se anuló porque se produjo un error durante la validación de valores de propiedad de entidad.</exception>
      <exception cref="T:System.NotSupportedException">Se intentó usar un comportamiento no admitido, como, por ejemplo, ejecutar simultáneamente varios comandos asincrónicos en la misma instancia de contexto.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el contexto o la conexión.</exception>
      <exception cref="T:System.InvalidOperationException">Se produjo algún error al intentar procesar entidades en el contexto antes o después de enviar comandos a la base de datos.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>Guarda de forma asincrónica todos los cambios realizados en este contexto en la base de datos subyacente.</summary>
      <returns>Tarea que representa la operación asincrónica de guardado.El resultado de la tarea contiene el número de objetos escritos en la base de datos subyacente.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Error al enviar actualizaciones a la base de datos.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Un comando de la base de datos no afectó al número de filas que se esperaba.Esto suele indicar una infracción de la simultaneidad optimista; es decir, una fila ha cambiado en la base de datos desde que se realizó la consulta.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">La operación de guardar se anuló porque se produjo un error durante la validación de valores de propiedad de entidad.</exception>
      <exception cref="T:System.NotSupportedException">Se intentó usar un comportamiento no admitido, como, por ejemplo, ejecutar simultáneamente varios comandos asincrónicos en la misma instancia de contexto.</exception>
      <exception cref="T:System.ObjectDisposedException">Se ha desechado el contexto o la conexión.</exception>
      <exception cref="T:System.InvalidOperationException">Se produjo algún error al intentar procesar entidades en el contexto antes o después de enviar comandos a la base de datos.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Guarda de forma asincrónica todos los cambios realizados en este contexto en la base de datos subyacente.</summary>
      <returns>Tarea que representa la operación asincrónica de guardado.El resultado de la tarea contiene el número de objetos escritos en la base de datos subyacente.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Devuelve una instancia de <see cref="T:System.Data.Entity.DbSet`1" /> para obtener acceso a entidades del tipo especificado en el contexto y el almacenamiento subyacente.</summary>
      <returns>Conjunto para el tipo de entidad especificado.</returns>
      <typeparam name="TEntity">Entidad del tipo para la que debe devolverse un conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Devuelve una instancia de <see cref="T:System.Data.Entity.DbSet" /> no genérico para obtener acceso a entidades del tipo especificado en el contexto y el almacenamiento subyacentes.</summary>
      <returns>Conjunto para el tipo de entidad especificado.</returns>
      <param name="entityType">Tipo de entidad para el que debe devolverse un conjunto.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Punto de extensión que permite al usuario reemplazar el comportamiento predeterminado de validar solo entidades de tipo Added o Modified.</summary>
      <returns>Es true para continuar con la validación; de lo contrario, es false.</returns>
      <param name="entityEntry">Instancia de DbEntityEntry que se supone que se va a validar.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Devuelve el ObjectContext de Entity Framework que subyace a este contexto.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Devuelve una representación en forma de cadena del DbContext.</summary>
      <returns>Representación en forma de cadena del DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Punto de extensión que permite al usuario personalizar la validación de una entidad o filtrar los resultados de la validación.Lo llama el método <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />.</summary>
      <returns>El resultado de la validación de la entidad.El valor puede ser null cuando se reemplaza.</returns>
      <param name="entityEntry">Instancia de DbEntityEntry que se va a validar.</param>
      <param name="items">Diccionario definido por el usuario que contiene información adicional para la validación personalizada.Se pasará a <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> y se expondrá como <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.Este parámetro es opcional y su valor puede ser null.</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>Ajusta el acceso al objeto de transacción en la conexión de almacenamiento subyacente y se asegura de que Entity Framework ejecute comandos en la base de datos dentro del contexto de esa transacción.Para recuperar una instancia de esta clase hay que llamar a BeginTransaction() en el objeto <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>Confirma la transacción de almacenamiento subyacente</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>Limpia este objeto de transacción y se asegura de Entity Framework ya no vuelva a usarse en esa transacción.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>Libera los recursos usados por este objeto de transacción.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <returns>Devuelve <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <returns>Devuelve <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <returns>Devuelve <see cref="T:System.Type" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>Revierte la transacción de almacenamiento subyacente</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <returns>Devuelve <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>Obtiene la transacción (almacenamiento) de base de datos que subyace en esta transacción de contexto.</summary>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>Indica que el método especificado es un proxy para una función de EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbFunctionAttribute" />.</summary>
      <param name="namespaceName">Espacio de nombres de la función a la que se asigna.</param>
      <param name="functionName">Nombre de la función a la que se asigna.</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>Nombre de la función a la que se asigna.</summary>
      <returns>Nombre de la función a la que se asigna.</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>Espacio de nombres de la función a la que se asigna.</summary>
      <returns>Espacio de nombres de la función a la que se asigna.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>Proporciona métodos de Common Language Runtime (CLR) que exponen funciones canónicas de EDM para su uso en consultas LINQ to Entities <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddDays de EDM para sumar el número especificado de días a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de días que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddDays de EDM para sumar el número especificado de días a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de días que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMonths de EDM para sumar el número especificado de meses a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de meses que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMonths de EDM para sumar el número especificado de meses a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de meses que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddYears de EDM para sumar el número especificado de años a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de años que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddYears de EDM para sumar el número especificado de años a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de años que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método funciona como un operador que se asegura de que la entrada se trata como una cadena no Unicode.</summary>
      <returns>Cadena de entrada tratada como una cadena no Unicode.</returns>
      <param name="value">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método funciona como un operador que se asegura de que la entrada se trata como una cadena Unicode.</summary>
      <returns>Cadena de entrada tratada como una cadena Unicode.</returns>
      <param name="value">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateDateTime de EDM para crear un nuevo objeto <see cref="T:System.DateTime" />.</summary>
      <returns>Nueva Fecha y hora.</returns>
      <param name="year">Año.</param>
      <param name="month">Mes (basado en uno).</param>
      <param name="day">Día (basado en uno).</param>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateDateTimeOffset de EDM para crear un nuevo objeto <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Nueva Fecha y hora.</returns>
      <param name="year">Año.</param>
      <param name="month">Mes (basado en uno).</param>
      <param name="day">Día (basado en uno).</param>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
      <param name="timeZoneOffset">Elemento de desfase de zona horaria de la nueva fecha.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateTime de EDM para crear un nuevo objeto <see cref="T:System.TimeSpan" />.</summary>
      <returns>Nuevo intervalo de tiempo.</returns>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffDays de EDM para calcular el número de días que hay entre dos fechas u horas.</summary>
      <returns>Número de días que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffDays de EDM para calcular el número de días que hay entre dos fechas u horas.</summary>
      <returns>Número de días que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos fechas u horas.</summary>
      <returns>Número de horas que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos fechas u horas.</summary>
      <returns>Número de horas que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de horas que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de microsegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de microsegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de microsegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de milisegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de milisegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de milisegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos fechas u horas.</summary>
      <returns>Número de minutos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos fechas u horas.</summary>
      <returns>Número de minutos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de minutos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMonths de EDM para calcular el número de meses que hay entre dos fechas u horas.</summary>
      <returns>Número de meses que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMonths de EDM para calcular el número de meses que hay entre dos fechas u horas.</summary>
      <returns>Número de meses que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de nanosegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de nanosegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de nanosegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos fechas u horas.</summary>
      <returns>Número de segundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos fechas u horas.</summary>
      <returns>Número de segundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de segundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffYears de EDM para calcular el número de años que hay entre dos fechas u horas.</summary>
      <returns>Número de años que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffYears de EDM para calcular el número de años que hay entre dos fechas u horas.</summary>
      <returns>Número de años que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica GetTotalOffsetMinutes de EDM para devolver el número de minutos de desfase entre la fecha/hora especificada y UTC.Este valor suele estar comprendido entre +780 y -780 (+ o - 13 horas).</summary>
      <returns>Desfase de la entrada con respecto a UTC.</returns>
      <param name="dateTimeOffsetArgument">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Left de EDM para devolver un número especificado de los caracteres situados más a la izquierda de una cadena.</summary>
      <returns>Cadena que contiene el número de caracteres especificado desde el lado izquierdo de la cadena de entrada.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
      <param name="length">Número de caracteres que se van a devolver</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Reverse de EDM para devolver una cadena especificada con el orden de los caracteres invertido.</summary>
      <returns>Cadena de entrada con el orden de los caracteres invertido.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Right de EDM para devolver un número especificado de los caracteres situados más a la derecha de una cadena.</summary>
      <returns>Cadena que contiene el número de caracteres especificado desde el lado derecho de la cadena de entrada.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
      <param name="length">Número de caracteres que se van a devolver</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Truncate de EDM para truncar el valor indicado al número de dígitos especificado.</summary>
      <returns>Valor truncado.</returns>
      <param name="value">Valor que se va a truncar.</param>
      <param name="digits">Número de dígitos que se van a conservar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Truncate de EDM para truncar el valor indicado al número de dígitos especificado.</summary>
      <returns>Valor truncado.</returns>
      <param name="value">Valor que se va a truncar.</param>
      <param name="digits">Número de dígitos que se van a conservar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica TruncateTime de EDM para devolver la fecha especificada sin la parte de hora.</summary>
      <returns>Fecha de entrada con la parte de hora borrada.</returns>
      <param name="dateValue">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica TruncateTime de EDM para devolver la fecha especificada sin la parte de hora.</summary>
      <returns>Fecha de entrada con la parte de hora borrada.</returns>
      <param name="dateValue">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder se usa para asignar clases de CLR a un esquema de la base de datos.Este enfoque basado en código para crear un modelo de Entity Data Model (EDM) se conoce como 'Code First'.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilder" />.El proceso de detectar el modelo inicial usará el conjunto de convenciones incluidas en la versión más reciente de Entity Framework instalada en el equipo.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilder" /> que usará un conjunto específico de convenciones para detectar el modelo inicial.</summary>
      <param name="modelBuilderVersion">Versión de convenciones que se va a utilizar.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Crea un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> basado en la configuración realizada mediante este generador.La conexión se emplea para determinar el proveedor de bases de datos que se está usando, ya que esto afecta a la capa de base de datos del modelo generado.</summary>
      <returns>El modelo que se creó.</returns>
      <param name="providerConnection">Conexión que se va a utilizar para determinar la información del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crea un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> basado en la configuración realizada mediante este generador.Se debe especificar la información del proveedor porque esto afecta a la capa de base de datos del modelo generado.Para SqlClient, el nombre invariable es 'System.Data.SqlClient' y el token del manifiesto es el año de la versión (por ejemplo, '2005 ', “2008”, etc.).</summary>
      <returns>El modelo que se creó.</returns>
      <param name="providerInfo">El proveedor de bases de datos con que se utilizará el modelo.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Registra un tipo como un tipo complejo en el modelo y devuelve un objeto que se puede utilizar para configurar el tipo complejo.Se puede llamar a este método varias veces para el mismo tipo con el fin de realizar varias líneas de configuración.</summary>
      <returns>El objeto de configuración para el tipo complejo especificado.</returns>
      <typeparam name="TComplexType">El tipo que se va a registrar o configurar.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Obtiene el <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> para este DbModelBuilder.El registro permite que se registren configuraciones de tipo complejo y entidad derivada con este generador.</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Proporciona acceso a la configuración de este DbModelBuilder que trata las convenciones.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Registra un tipo de entidad como parte del modelo y devuelve un objeto que se puede utilizar para configurar la entidad.Se puede llamar a este método varias veces para la misma entidad con el fin de realizar varias líneas de configuración.</summary>
      <returns>El objeto de configuración para el tipo de entidad especificado.</returns>
      <typeparam name="TEntityType">El tipo que se va a registrar o configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Especifica si el <see cref="T:System.Data.Entity.DbModelBuilder" /> es o no igual al objeto especificado.</summary>
      <returns>Es true si el <see cref="T:System.Data.Entity.DbModelBuilder" /> es igual al objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Devuelve el código hash de la instancia actual.</summary>
      <returns>Código hash de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>Configura el nombre del esquema predeterminado de la base de datos.Este nombre del esquema predeterminado de la base de datos se usa para los objetos de base de datos que no tienen configurado explícitamente un nombre de esquema.</summary>
      <returns>Misma instancia de DbModelBuilder, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="schema">Nombre del esquema predeterminado de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Excluye un tipo del modelo.Se usa para quitar tipos del modelo que se agregaron por convención durante la detección del modelo inicial.</summary>
      <returns>Misma instancia de DbModelBuilder, de modo que se puedan encadenar varias llamadas.</returns>
      <typeparam name="T">El tipo que se va a excluir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Excluye los tipos especificados del modelo.Se usa para quitar tipos del modelo que se agregaron por convención durante la detección del modelo inicial.</summary>
      <returns>Misma instancia de DbModelBuilder, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="types">Los tipos que se van a excluir del modelo.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>Inicia la configuración de una convención ligera que se aplica a todas las propiedades del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>Inicia la configuración de una convención ligera que se aplica a todas las propiedades primitivas del tipo especificado del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
      <typeparam name="T">Tipo de las propiedades a las que se aplicará esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Devuelve una representación en forma de cadena de <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>Representación en forma de cadena de <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>Inicia la configuración de una convención ligera que se aplica a todos los tipos complejos y entidades del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>Inicia la configuración de una convención ligera que se aplica a todos los tipos complejos y las entidades del modelo que se heredan del tipo especificado por el argumento genérico o lo implementan.Este método no registra tipos como parte del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
      <typeparam name="T">Tipo de las entidades o los tipos complejos a los que se aplicará esta convención.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Un valor de esta enumeración se puede proporcionar directamente a la clase <see cref="T:System.Data.Entity.DbModelBuilder" /> o se puede usar en el objeto <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> aplicado a una clase derivada de <see cref="T:System.Data.Entity.DbContext" />.El valor usado define qué versión de las convenciones de DbContext y DbModelBuilder se debe usar al generar un modelo a partir de código, también conocido como "Code First".</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     Indica que debe usarse la versión más reciente de las convenciones de <see cref="T:System.Data.Entity.DbContext" /> y <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v4.1. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v5.0. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v5.0 cuando se debe usar la compatibilidad con .Net Framework 4.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Indica que debe usarse la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> y <see cref="T:System.Data.Entity.DbContext" /> proporcionada con Entity Framework v6.0. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Este atributo se puede aplicar a una clase derivada de <see cref="T:System.Data.Entity.DbContext" /> para establecer qué versión de las convenciones de DbContext y <see cref="T:System.Data.Entity.DbModelBuilder" /> se deben usar al crear un modelo a partir de código, también conocido como "Code First".Vea la enumeración de <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> para obtener detalles acerca de las versiones de DbModelBuilder.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />.</summary>
      <param name="version">Versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> que se va a usar.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Obtiene la versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>La versión de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Una versión no genérica de <see cref="T:System.Data.Entity.DbSet`1" /> que se puede utilizar cuando el tipo de entidad no se conoce en tiempo de compilación.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>Crea una instancia de un <see cref="T:System.Data.Entity.DbSet" /> cuando se llama desde el constructor de un tipo derivado que se usará como prueba de doble para DbSets.Los métodos y las propiedades que va a usar la prueba de doble deben implementarse en la prueba de doble, salvo AsNoTracking, AsStreaming e Include, donde la implementación predeterminada es una operación sin efecto.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Agrega la entidad determinada al contexto que subyace al conjunto en estado Added de modo que se insertará en la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>Agrega la colección de entidades especificada al contexto que subyace al conjunto con cada entidad que pasa al estado Added, de forma que se insertará en la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Colección de entidades.</returns>
      <param name="entities">Colección de entidades que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Adjunta la entidad determinada al contexto que subyace al conjunto.Es decir, la entidad se coloca en el contexto en estado Unchanged, como si se hubiera leído de la base de datos.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.DbSet`1" /> genérico equivalente.</summary>
      <returns>El objeto de conjunto genérico.</returns>
      <typeparam name="TEntity">Tipo de entidad para el que se creó el conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
      <returns>La instancia de la entidad, que puede ser un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
      <returns>La instancia de la entidad, que puede ser un proxy.</returns>
      <param name="derivedEntityType">El tipo de entidad que se va a crear.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el conjunto especificado es igual al conjunto actual.</summary>
      <returns>Es true si el conjunto especificado es igual al conjunto actual; en caso contrario, false.</returns>
      <param name="obj">Conjunto que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Busca una entidad con los valores de clave principal determinados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
      <exception cref="T:System.InvalidOperationException">Se produce si existen varias entidades en el contexto con los valores de clave principal especificados.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el tipo de entidad no forma parte del modelo de datos para este contexto.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si los tipos de los valores de clave no coinciden con los tipos de los valores de clave para el tipo de entidad que se va a buscar.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>Busca de forma asincrónica una entidad con los valores de clave principal especificados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica de búsqueda.El resultado de la tarea contiene la entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
      <exception cref="T:System.InvalidOperationException">Se produce si existen varias entidades en el contexto con los valores de clave principal especificados.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el tipo de entidad no forma parte del modelo de datos para este contexto.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si los tipos de los valores de clave no coinciden con los tipos de los valores de clave para el tipo de entidad que se va a buscar.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Busca de forma asincrónica una entidad con los valores de clave principal especificados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica de búsqueda.El resultado de la tarea contiene la entidad encontrada o NULL.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
      <exception cref="T:System.InvalidOperationException">Se produce si existen varias entidades en el contexto con los valores de clave principal especificados.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el tipo de entidad no forma parte del modelo de datos para este contexto.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si los tipos de los valores de clave no coinciden con los tipos de los valores de clave para el tipo de entidad que se va a buscar.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Devuelve la función hash para el conjunto especificado.</summary>
      <returns>La función hash del conjunto.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Obtiene el tipo del conjunto actual.</summary>
      <returns>El tipo del conjunto actual.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa una vista local de todas las entidades de tipo Added, Unchanged y Modified en este conjunto.Esta vista local permanecerá sincronizada cuando se agreguen o quiten entidades en el contexto.Igualmente, las entidades agregadas o quitadas en la vista local se agregarán o quitarán automáticamente en el contexto.</summary>
      <returns>La vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Marca la entidad determinada como Deleted de modo que se eliminará de la base de datos cuando se llame a SaveChanges.Observe que la entidad debe existir en el contexto en otro estado antes de que se llame a este método.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>Quita la colección de entidades especificada del contexto que subyace al conjunto con cada entidad que pasa al estado Deleted, de forma que se quitará de la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Colección de entidades.</returns>
      <param name="entities">Colección de entidades que se va a eliminar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá entidades de este conjunto.De forma predeterminada, el contexto realiza el seguimiento de las entidades devueltas; esto puede cambiarse invocando a AsNoTracking en la <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> devuelta.Tenga en cuenta que las entidades devueltas siempre son del tipo de este conjunto y nunca de un tipo derivado.Si la tabla o tablas consultadas pueden contener datos para otros tipos de entidad, la consulta SQL se debe escribir correctamente para asegurarse de que solo se devuelven entidades del tipo correcto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet representa la colección de todas las entidades del contexto, o que se pueden consultar de la base de datos, de un determinado tipo.Los objetos DbSet se crean a partir de un DbContext usando el método DbContext.Set.</summary>
      <typeparam name="TEntity">Tipo que define el conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>Crea una instancia de un <see cref="T:System.Data.Entity.DbSet`1" /> cuando se llama desde el constructor de un tipo derivado que se usará como prueba de doble para DbSets.Los métodos y las propiedades que se usarán en la prueba de doble deben implementarse en la prueba de doble, salvo AsNoTracking, AsStreaming e Include, cuando la implementación predeterminada es una operación sin efecto.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Agrega la entidad determinada al contexto que subyace al conjunto en estado Added de modo que se insertará en la base de datos cuando se llame a SaveChanges.</summary>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega la colección de entidades especificada al contexto que subyace al conjunto con cada entidad que pasa al estado Added, de forma que se insertará en la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Colección de entidades.</returns>
      <param name="entities">Colección de entidades que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Adjunta la entidad determinada al contexto que subyace al conjunto.Es decir, la entidad se coloca en el contexto en estado Unchanged, como si se hubiera leído de la base de datos.</summary>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
      <typeparam name="TDerivedEntity">El tipo de entidad que se va a crear.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Determina si el DbSet especificado es igual al DbSet actual.</summary>
      <returns>Es true si el DbSet es igual al DbSet actual; de lo contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el DbSet actual.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Busca una entidad con los valores de clave principal determinados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
      <exception cref="T:System.InvalidOperationException">Se produce si existen varias entidades en el contexto con los valores de clave principal especificados.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el tipo de entidad no forma parte del modelo de datos para este contexto.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si los tipos de los valores de clave no coinciden con los tipos de los valores de clave para el tipo de entidad que se va a buscar.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>Busca de forma asincrónica una entidad con los valores de clave principal especificados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica de búsqueda.El resultado de la tarea contiene la entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Busca de forma asincrónica una entidad con los valores de clave principal especificados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica de búsqueda.El resultado de la tarea contiene la entidad encontrada o NULL.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
      <exception cref="T:System.InvalidOperationException">Se produce si existen varias entidades en el contexto con los valores de clave principal especificados.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el tipo de entidad no forma parte del modelo de datos para este contexto.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si los tipos de los valores de clave no coinciden con los tipos de los valores de clave para el tipo de entidad que se va a buscar.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si el contexto se ha eliminado.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Devuelve la función hash de este DbSet.</summary>
      <returns>La función hash de este DbSet.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Devuelve el tipo de DbSet actual.</summary>
      <returns>El tipo del DbSet actual.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa una vista local de todas las entidades de tipo Added, Unchanged y Modified en este conjunto.Esta vista local permanecerá sincronizada cuando se agreguen o quiten entidades en el contexto.Igualmente, las entidades agregadas o quitadas en la vista local se agregarán o quitarán automáticamente en el contexto.</summary>
      <returns>La vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.DbSet" /> no genérico equivalente.</summary>
      <returns>Objeto de conjunto no genérico.</returns>
      <param name="entry">Objeto de conjunto genérico.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Marca la entidad determinada como Deleted de modo que se eliminará de la base de datos cuando se llame a SaveChanges.Observe que la entidad debe existir en el contexto en otro estado antes de que se llame a este método.</summary>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita la colección de entidades especificada del contexto que subyace al conjunto con cada entidad que pasa al estado Deleted, de forma que se quitará de la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Colección de entidades.</returns>
      <param name="entities">Colección de entidades que se va a eliminar.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Crea una consulta SQL sin formato que devolverá entidades de este conjunto.De forma predeterminada, el contexto realiza el seguimiento de las entidades devueltas; esto puede cambiarse invocando a AsNoTracking en la <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> devuelta.Tenga en cuenta que las entidades devueltas siempre son del tipo de este conjunto y nunca de un tipo derivado.Si la tabla o tablas consultadas pueden contener datos para otros tipos de entidad, la consulta SQL se debe escribir correctamente para asegurarse de que solo se devuelven entidades del tipo correcto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> que ejecutará la consulta cuando se enumere.</returns>
      <param name="sql">Cadena de consulta SQL.</param>
      <param name="parameters">Los parámetros que se van a aplicar a la cadena de consulta SQL.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Implementación de IDatabaseInitializer que siempre volverá a crear y, opcionalmente, volverá a inicializar la base de datos la primera vez que se use un contexto en el dominio de aplicación.Para inicializar la base de datos, cree una clase derivada y reemplace el método Seed.</summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado.</summary>
      <param name="context">Contexto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Método que se debe reemplazar para agregar realmente datos al contexto para la inicialización.La implementación predeterminada no hace nada.</summary>
      <param name="context">Contexto que se va a inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Implementación de IDatabaseInitializer que ELIMINARÁ, volverá a crear y, opcionalmente, volverá a inicializar la base de datos solo si el modelo ha cambiado desde que se creó la base de datos.</summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado.</summary>
      <param name="context">Contexto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Método que se debe reemplazar para agregar realmente datos al contexto para la inicialización.La implementación predeterminada no hace nada.</summary>
      <param name="context">Contexto que se va a inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     Describe el estado de una entidad. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     El contexto está realizando un seguimiento de la entidad pero esta aún no existe en la base de datos. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     El contexto está realizando un seguimiento de la entidad y esta existe en la base de datos, pero se ha marcado para su eliminación de la base de datos la próxima vez que se llame a SaveChanges. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>El contexto no está realizando ya el seguimiento de la entidad.Una entidad está en este estado inmediatamente después de que se haya creado con el nuevo operador o con uno de los métodos Create de <see cref="T:System.Data.Entity.DbSet" />.</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     El contexto está realizando un seguimiento de la entidad y esta existe en la base de datos, y algunos de sus valores de propiedad (o todos ellos) se han modificado. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     El contexto está realizando un seguimiento de la entidad y esta existe en la base de datos, y sus valores de propiedad no han cambiado de los valores de la base de datos. </summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Se usa una implementación de esta interfaz para inicializar la base de datos subyacente la primera vez que se usa una instancia de una clase derivada de <see cref="T:System.Data.Entity.DbContext" />.Esta inicialización puede crear condicionalmente la base de datos y/o inicializarla con datos.La estrategia empleada se establece mediante la propiedad estática InitializationStrategy de la clase <see cref="T:System.Data.Entity.Database" />.Se proporcionan las implementaciones siguientes: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />,     <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <typeparam name="TContext">Este parámetro de tipo es contravariante. Es decir, puede usar el tipo especificado o cualquier tipo menos derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     Ejecuta la estrategia para inicializar la base de datos para el contexto determinado. </summary>
      <param name="context"> Contexto. </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> representa la colección de todas las entidades del contexto, o que se pueden consultar de la base de datos, de un tipo determinado.<see cref="T:System.Data.Entity.DbSet`1" /> es una implementación concreta de IDbSet.</summary>
      <typeparam name="TEntity">Tipo que define el conjunto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Agrega la entidad determinada al contexto que subyace al conjunto en estado Added de modo que se insertará en la base de datos cuando se llame a SaveChanges.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Adjunta la entidad determinada al contexto que subyace al conjunto.Es decir, la entidad se coloca en el contexto en estado Unchanged, como si se hubiera leído de la base de datos.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a adjuntar.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
      <returns>La instancia de la entidad, que puede ser un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Crea una nueva instancia de una entidad para el tipo de este conjunto o para un tipo derivado del tipo de este conjunto.Tenga en cuenta que esta instancia NO se agrega ni se asocia al conjunto.La instancia devuelta será un proxy si el contexto subyacente está configurado para crear proxys y el tipo de entidad cumple los requisitos para crear un proxy.</summary>
      <returns>La instancia de la entidad, que puede ser un proxy.</returns>
      <typeparam name="TDerivedEntity">El tipo de entidad que se va a crear.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Busca una entidad con los valores de clave principal determinados.Si en el contexto existe una entidad con los valores de clave principal especificados, se devuelve inmediatamente sin realizar una solicitud al almacenamiento.De lo contrario, se realiza una solicitud al almacén para una entidad con los valores de clave principal determinados y esta entidad, si se encuentra, se adjunta al contexto y se devuelve.Si no se encuentra ninguna entidad en el contexto o en el almacén, se devuelve null.</summary>
      <returns>Entidad encontrada o NULL.</returns>
      <param name="keyValues">Los valores de la clave principal para la entidad que se van a encontrar.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> que representa una vista local de todas las entidades de tipo Added, Unchanged y Modified en este conjunto.Esta vista local permanecerá sincronizada cuando se agreguen o quiten entidades en el contexto.Igualmente, las entidades agregadas o quitadas en la vista local se agregarán o quitarán automáticamente en el contexto.</summary>
      <returns>La vista local.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Marca la entidad determinada como Deleted de modo que se eliminará de la base de datos cuando se llame a SaveChanges.Observe que la entidad debe existir en el contexto en otro estado antes de que se llame a este método.</summary>
      <returns>Entidad.</returns>
      <param name="entity">Entidad que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Implementación de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> que usará Migraciones de Code First para actualizar la base de datos a la versión más reciente.</summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
      <typeparam name="TMigrationsConfiguration">Tipo de la configuración de migraciones que se va a usar durante la inicialización.</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>Inicializa una nueva instancia de la clase MigrateDatabaseToLatestVersion que usará la información de conexión de un contexto construido mediante el constructor predeterminado o generador registrado cuando corresponda</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase MigrateDatabaseToLatestVersion que usará una cadena de conexión específica del archivo de configuración para conectarse a la base de datos con el fin de realizar la migración.</summary>
      <param name="connectionStringName">Nombre de cadena de conexión que se va a usar para la migración.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Inicializa la base de datos que se va a usar para el tipo de contexto especificado.</summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>Implementación de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> que no hace nada.El uso de este inicializador inhabilita la inicialización de la base de datos para el tipo de contexto especificado.Pasar una instancia de esta clase a <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> equivale a pasar NULL.Cuando se usa <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> para resolver inicializadores, debe emplearse una instancia de esta clase para inhabilitar la inicialización.</summary>
      <typeparam name="TContext">Tipo del contexto.</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Ejecuta la estrategia para inicializar la base de datos para el contexto determinado.</summary>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>Métodos de extensión para <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>Devuelve una implementación de <see cref="T:System.ComponentModel.BindingList`1" /> que permanece sincronizada con el objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> determinado.</summary>
      <returns>La lista de enlace.</returns>
      <param name="source">Colección con la que la lista de enlace permanecerá sincronizada.</param>
      <typeparam name="T">El tipo de elemento.</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Métodos de extensión útiles para su uso con consultas LINQ de Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina de forma asincrónica si todos los elementos de una secuencia cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si todos los elementos de la secuencia de origen superan la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> en la que se va a probar si sus elementos cumplen una condición.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si todos los elementos de una secuencia cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si todos los elementos de la secuencia de origen superan la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> en la que se va a probar si sus elementos cumplen una condición.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>Determina de forma asincrónica si una secuencia contiene algún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si la secuencia de origen contiene algún elemento; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a comprobar si está vacía.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina de forma asincrónica si algún elemento de una secuencia cumple una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si algún elemento de la secuencia de origen supera la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> en la que se va a probar si sus elementos cumplen una condición.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si algún elemento de una secuencia cumple una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si algún elemento de la secuencia de origen supera la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> en la que se va a probar si sus elementos cumplen una condición.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si una secuencia contiene algún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si la secuencia de origen contiene algún elemento; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a comprobar si está vacía.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Este método funciona llamando al método AsNoTracking del objeto de consulta subyacente.Si el objeto de consulta subyacente no tiene un método AsNoTracking, la llamada a este método no tendrá ningún efecto.</summary>
      <returns>Una nueva consulta con NoTracking aplicado, o la consulta se origen si no se admite NoTracking.</returns>
      <param name="source">Consulta de origen.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Este método funciona llamando al método AsNoTracking del objeto de consulta subyacente.Si el objeto de consulta subyacente no tiene un método AsNoTracking, la llamada a este método no tendrá ningún efecto.</summary>
      <returns>Una nueva consulta con NoTracking aplicado, o la consulta se origen si no se admite NoTracking.</returns>
      <param name="source">Consulta de origen.</param>
      <typeparam name="T">El tipo de elemento.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.Este método funciona llamando al método AsStreaming del objeto de consulta subyacente.Si el objeto de consulta subyacente no tiene un método AsStreaming, la llamada a este método no tendrá ningún efecto.</summary>
      <returns>Nueva consulta a la que se aplica AsStreaming o la consulta se origen si no se admite AsStreaming.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> a la que se va a aplicar AsStreaming.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.Este método funciona llamando al método AsStreaming del objeto de consulta subyacente.Si el objeto de consulta subyacente no tiene un método AsStreaming, la llamada a este método no tendrá ningún efecto.</summary>
      <returns>Nueva consulta a la que se aplica AsStreaming o la consulta se origen si no se admite AsStreaming.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> a la que se va a aplicar AsStreaming.</param>
      <typeparam name="T">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> cuyo promedio se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Double" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int32" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Int64" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que acepta valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica el promedio de una secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el promedio de la secuencia de valores.</returns>
      <param name="source">Secuencia de valores cuyo promedio se va a calcular.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene ningún elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determina de forma asincrónica si una secuencia contiene un elemento especificado mediante el comparador de igualdad predeterminado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si la secuencia de entrada contiene el valor especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="item">Objeto que se va a buscar en la secuencia.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si una secuencia contiene un elemento especificado mediante el comparador de igualdad predeterminado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si la secuencia de entrada contiene el valor especificado; de lo contrario, contiene false.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="item">Objeto que se va a buscar en la secuencia.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el número de elementos de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica el número de elementos de una secuencia que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia que cumplen la condición de la función del predicado.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el número de elementos de una secuencia que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia que cumplen la condición de la función del predicado.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el número de elementos de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento de <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia que cumple una condición especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento de <paramref name="source" /> que supera la prueba de <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia que cumple una condición especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento de <paramref name="source" /> que supera la prueba de <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento de <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, el primer elemento de <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia que cumple una condición especificada o un valor predeterminado si no se encuentra ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TSource" />) si <paramref name="source" /> está vacío o si ningún elemento supera la prueba especificada por <paramref name="predicate" />; de lo contrario, contiene el primer elemento de <paramref name="source" /> que supera la prueba especificada por <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia que cumple una condición especificada o un valor predeterminado si no se encuentra ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TSource" />) si <paramref name="source" /> está vacío o si ningún elemento supera la prueba especificada por <paramref name="predicate" />; de lo contrario, contiene el primer elemento de <paramref name="source" /> que supera la prueba especificada por <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> tiene más de un elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, el primer elemento de <paramref name="source" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo primer elemento se va a devolver.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> que se va a enumerar.</param>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> que se va a enumerar.</param>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a enumerar.</param>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
      <typeparam name="T">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a enumerar.</param>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="T">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nueva <see cref="T:System.Linq.IQueryable" /> con la ruta de la consulta definida.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable" /> de origen donde se va a llamar a Include.</param>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nuevo objeto IQueryable&amp;lt;T&amp;gt; con la ruta de la consulta definida.</returns>
      <param name="source">IQueryable de origen en que se llama a Include.</param>
      <param name="path">Expresión lambda que representa la ruta de acceso que se va a incluir.</param>
      <typeparam name="T">Tipo de la entidad que se va a consultar.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad de navegación que se va a incluir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nueva <see cref="T:System.Linq.IQueryable`1" /> con la ruta de la consulta definida.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> de origen donde se va a llamar a Include.</param>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
      <typeparam name="T">Tipo de la entidad que se va a consultar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>Enumera la consulta de forma que en las consultas de servidor como las de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> y otros, los resultados de la consulta se cargarán en el <see cref="T:System.Data.Entity.DbContext" /> asociado, en <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o en otra memoria caché del cliente.Esto equivale a llamar a ToList y omitir después la lista sin la sobrecarga que supone crear realmente la lista.</summary>
      <param name="source">Consulta de origen.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>Enumera de forma asincrónica la consulta de forma que en las consultas de servidor como las de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> y otros, los resultados de la consulta se cargarán en el <see cref="T:System.Data.Entity.DbContext" /> asociado, en <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o en otra memoria caché del cliente.Esto equivale a llamar a ToList y omitir después la lista sin la sobrecarga que supone crear realmente la lista.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">Consulta de origen.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Enumera de forma asincrónica la consulta de forma que en las consultas de servidor como las de <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> y otros, los resultados de la consulta se cargarán en el <see cref="T:System.Data.Entity.DbContext" /> asociado, en <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o en otra memoria caché del cliente.Esto equivale a llamar a ToList y omitir después la lista sin la sobrecarga que supone crear realmente la lista.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="source">Consulta de origen.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número total de elementos de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número de elementos de una secuencia que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia que cumplen la condición de la función del predicado.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número de elementos de una secuencia que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia que cumplen la condición de la función del predicado.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número total de elementos de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el valor máximo de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor máximo.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invoca de forma asincrónica una función de proyección en cada elemento de una secuencia y devuelve el valor máximo resultante.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor máximo.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Invoca de forma asincrónica una función de proyección en cada elemento de una secuencia y devuelve el valor máximo resultante.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor máximo.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el valor máximo de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor máximo.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el valor mínimo de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor mínimo.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invoca de forma asincrónica una función de proyección en cada elemento de una secuencia y devuelve el valor mínimo resultante.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor mínimo.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Invoca de forma asincrónica una función de proyección en cada elemento de una secuencia y devuelve el valor mínimo resultante.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor mínimo.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el valor mínimo de una secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo de la secuencia.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de los que se va a determinar el valor mínimo.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia y, si no hay exactamente un elemento en la secuencia, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia que cumple una condición especificada y, si existe más de un elemento semejante, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada que cumple la condición especificada en <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="predicate">Función para probar si un elemento cumple una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia que cumple una condición especificada y, si existe más de un elemento semejante, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada que cumple la condición especificada en <paramref name="predicate" />.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="predicate">Función para probar si un elemento cumple una condición.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia y, si no hay exactamente un elemento en la secuencia, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> tiene más de un elemento.</exception>
      <exception cref="T:System.InvalidOperationException">La secuencia de origen está vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada, o default (<paramref name="TSource" />) si la secuencia no contiene ningún elemento.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> tiene más de un elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia que cumple una condición especificada o un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada que cumple la condición especificada en <paramref name="predicate" /> o default (<paramref name="TSource" />) si no se encuentra ese elemento.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="predicate">Función para probar si un elemento cumple una condición.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia que cumple una condición especificada o un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada que cumple la condición especificada en <paramref name="predicate" /> o default (<paramref name="TSource" />) si no se encuentra ese elemento.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="predicate">Función para probar si un elemento cumple una condición.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento de la secuencia de entrada, o default (<paramref name="TSource" />) si la secuencia no contiene ningún elemento.</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> tiene más de un elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Omite un número especificado de elementos de una secuencia y, a continuación, devuelve los elementos restantes.</summary>
      <returns>Secuencia que contiene los elementos que hay después del índice especificado en la secuencia de entrada.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="countAccessor">Expresión que se evalúa como el número de elementos que se van a omitir.</param>
      <typeparam name="TSource">Tipo de los elementos de origen.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores de la secuencia.</returns>
      <param name="source">Secuencia de valores <see cref="T:System.Single" /> cuya suma se va a calcular.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Calcula de forma asincrónica la suma de la secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la suma de los valores proyectados.</returns>
      <param name="source">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector">Función de proyección que se va a aplicar a cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="source" /> o <paramref name="selector" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no implementa <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Devuelve un número especificado de elementos contiguos desde el principio de una secuencia.</summary>
      <returns>Secuencia que contiene el número especificado de elementos desde el principio de la secuencia de entrada.</returns>
      <param name="source">Secuencia cuyos elementos se van a devolver.</param>
      <param name="countAccessor">Expresión que se evalúa como el número de elementos que se van a devolver.</param>
      <typeparam name="TSource">Tipo de los elementos de origen.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>Crea una matriz a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una matriz que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear una matriz.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Crea una matriz a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una matriz que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear una matriz.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada y un comparador.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada y un comparador.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con un selector de clave y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave, un comparador y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave, un comparador y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con un selector de clave y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TElement" /> seleccionados de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de una <see cref="T:System.Linq.IQueryable" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.List`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de una <see cref="T:System.Linq.IQueryable" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.List`1" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de una <see cref="T:System.Linq.IQueryable`1" /> enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
      <param name="source">Objeto <see cref="T:System.Linq.IQueryable`1" /> a partir del cual se va a crear una lista.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="source" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>Controla el comportamiento de la creación de transacciones mientras se ejecuta un comando o una consulta de base de datos.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>Si hay una transacción existente, úsela; de lo contrario, ejecute el comando o la consulta sin transacción.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>Si no existe ninguna transacción, se usará una nueva transacción para la operación.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>Representa un error al intentar preparar y ejecutar un CommandCompilation.Esta excepción tiene por objeto proporcionar una excepción común que los usuarios pueden detectar para almacenar excepciones de proveedor (SqlException, OracleException) cuando se usa el EntityCommand para ejecutar instrucciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, sin mensaje ni excepción interna.Probablemente no debería existir, pero satisface a FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, con mensaje y sin excepción interna.Probablemente no debería existir, pero satisface a FxCop.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" />, con mensaje y una instancia de excepción interna.</summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>Representa un error al intentar preparar o ejecutar un CommandCompilation.Esta excepción tiene por objeto proporcionar una excepción común que los usuarios pueden detectar para almacenar excepciones de proveedor (SqlException, OracleException) cuando se usa el EntityCommand para ejecutar instrucciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>inicializa una nueva instancia de EntityCommandExecutionException, sin mensaje ni excepción interna.Probablemente no debería existir, pero satisface a FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>inicializa una nueva instancia de EntityCommandExecutionException, con mensaje y sin excepción interna.Probablemente no debería existir, pero satisface a FxCop.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>inicializa una nueva instancia de EntityCommandExecutionException, con mensaje y una instancia de excepción interna.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción interna que provocó la excepción actual.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>Proporciona la excepción utilizada por el cliente de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityException" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityException" />.</summary>
      <param name="info">La información de serialización.</param>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityException" /> que acepta un mensaje preformateado.</summary>
      <param name="message">Mensaje de error traducido.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityException" /> que acepta un mensaje preformateado y una excepción interna.</summary>
      <param name="message">Mensaje de error traducido.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>Representa el identificador de una entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityKey" /> con los valores de clave especificados.</summary>
      <param name="qualifiedEntitySetName">Nombre del EntitySet, calificado por el nombre de EntityContainer, de la entidad.</param>
      <param name="entityKeyValues">Pares clave-valor que identifican la entidad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityKey" /> con los valores de clave especificados.</summary>
      <param name="qualifiedEntitySetName">Nombre del EntitySet, calificado por el nombre de EntityContainer, de la entidad</param>
      <param name="entityKeyValues">Pares clave-valor que identifican la entidad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityKey" /> con las el nombre y el valor de la clave única especificada.</summary>
      <param name="qualifiedEntitySetName">Nombre del EntitySet, calificado por el nombre de EntityContainer, de la entidad</param>
      <param name="keyName">Nombre de clave que identifica la entidad.</param>
      <param name="keyValue">Valor de clave que identifica la entidad.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>Obtiene o define el nombre de EntityContainer que identifica el contenedor de entidades que contiene la entidad.</summary>
      <returns>El nombre de EntityContainer que identifica el contenedor de entidades que contiene la entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>Obtiene o define los valores de clave que identifican la entidad.</summary>
      <returns>Los valores de clave que identifican la entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>Obtiene una EntityKey singleton que identifica una entidad que es el resultado de una operación TREAT en la que se ha producido un error.</summary>
      <returns>Una EntityKey singleton que identifica una entidad que es el resultado de una operación TREAT en la que se ha producido un error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>Obtiene o define el nombre de EntitySet que identifica el conjunto de entidades que contiene la entidad.</summary>
      <returns>El nombre de EntitySet que identifica el conjunto de entidades que contiene la entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>Indica un valor que especifica si esta instancia es o no igual que la clave especificada.</summary>
      <returns>Es true si esta instancia es igual a la clave especificada; de lo contrario, es false.</returns>
      <param name="other">La clave que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>Indica un valor que especifica si esta instancia es o no igual que la clave especificada.</summary>
      <returns>Es true si esta instancia es igual a la clave especificada; de lo contrario, es false.</returns>
      <param name="obj">La clave que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Obtiene el conjunto de entidades de esta clave de entidad a partir del área de trabajo de metadatos especificada, por nombre del contenedor de entidades y nombre del conjunto de entidades.</summary>
      <returns>El conjunto de entidades de esta clave de entidad del área de trabajo especificada.</returns>
      <param name="metadataWorkspace">Área de trabajo donde se va a buscar el conjunto de entidades.</param>
      <exception cref="T:System.ArgumentException">No se ha podido encontrar el conjunto de entidades en el área de trabajo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>Devuelve un código hash basado en valor para permitir que se use EntityKey en tablas hash.</summary>
      <returns>El valor hash de esta EntityKey.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>Obtiene un valor que indica si esta clave es una clave temporal.</summary>
      <returns>Es true si esta clave es una clave temporal; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>Obtiene una EntityKey singleton por la cual se identifica una entidad de solo lectura.</summary>
      <returns>Una EntityKey singleton por la cual se identifica una entidad de solo lectura.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Llamadas después de deserializar esta EntityKey.</summary>
      <param name="context">Contexto de la serialización.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Llamadas después de deserializar esta EntityKey.</summary>
      <param name="context">Contexto de la serialización.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Indica un valor si las dos claves son o no iguales.</summary>
      <returns>Es true si las dos claves son iguales; de lo contrario, es false.</returns>
      <param name="key1">Clave para comparar.</param>
      <param name="key2">Clave para comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Indica un valor si las dos claves no son iguales.</summary>
      <returns>Esa true si las dos claves no son iguales; de lo contrario, es false.</returns>
      <param name="key1">Clave para comparar.</param>
      <param name="key2">Clave para comparar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>Información sobre una clave que forma parte de una EntityKey.Un miembro de clave contiene el nombre y el valor de clave.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>Crea un EntityKeyMember vacío.La serialización usa este constructor.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     Crea un nuevo EntityKeyMember con el valor y el nombre de clave especificados. </summary>
      <param name="keyName"> Nombre de clave </param>
      <param name="keyValue"> Valor de clave </param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     Nombre de clave </summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     Devuelve una representación en forma de cadena del EntityKeyMember </summary>
      <returns> Representación en forma de cadena del EntityKeyMember </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     Valor de clave </summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>Representa una excepción de generación de consultas eSQL; Las condiciones excepcionales que puede provocar esta excepción son principalmente: 1) Errores de sintaxis: se producen durante el análisis del texto de la consulta y cuando una consulta especificada no se ajusta a la gramática formal de eSQL; 2) Errores semánticos: se producen cuando no se cumplen las reglas semánticas del lenguaje eSQL, como metadatos o información de esquema no precisos o no presentes, errores de validación de tipos, infracciones de la regla de ámbito, uso de variables sin definir, etc.Consulte más información en la especificación del lenguaje eSQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntitySqlException" /> con el mensaje de error genérico.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntitySqlException" /> con el mensaje especificado.</summary>
      <param name="message">Mensaje de error.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Core.EntitySqlException" /> con el mensaje y la instancia de innerException especificados.</summary>
      <param name="message">Mensaje de error.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>Obtiene el número de columna aproximado en que se produjo el error.</summary>
      <returns>El número aproximado de la columna donde se produjo el error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>Obtiene el contexto aproximado donde se produjo el error, si está disponible.</summary>
      <returns>El contexto aproximado donde se produjo el error, si está disponible.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>Obtiene la descripción del error que explica el motivo por el que no se aceptó la consulta o un String.Empty vacío </summary>
      <returns>La descripción del error, que explica el motivo por el que no se aceptó la consulta o una String.Empty vacío.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>Obtiene el número de línea aproximado en que se produjo el error. </summary>
      <returns>El número de línea aproximado en que se produjo el error.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>Proporcional la interfaz de DataRecord, que admite tipos estructurados e información de metadatos enriquecida.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>Obtiene la propiedad DataRecordInfo que describe el contenido del registro.</summary>
      <returns>La propiedad DataRecordInfo que describe el contenido del registro.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Devuelve lectores anidados como objetos DbDataReader.</summary>
      <returns>Lectores anidados como objetos DbDataReader.</returns>
      <param name="i">Ordinal de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Obtiene un objeto DbDataRecord que tiene el índice especificado.</summary>
      <returns>Objeto DbDataRecord.</returns>
      <param name="i">Índice de la fila.</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     Se produce para indicar que un árbol de comandos no es válido. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     Crea una nueva InvalidCommandTreeException con un mensaje predeterminado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     Crea una nueva InvalidCommandTreeException con el mensaje especificado. </summary>
      <param name="message"> Mensaje de excepción </param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     Crea una nueva InvalidCommandTreeException con el mensaje y la excepción interna especificados. </summary>
      <param name="message"> Mensaje de excepción. </param>
      <param name="innerException"> Excepción que es la causa de esta InvalidCommandTreeException. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>Clase de excepción de asignación.Tenga en cuenta que esta clase tiene estado, por lo si cambia sus elementos internos, puede ser un cambio importante</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     constructor con mensaje predeterminado </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     constructor predeterminado </summary>
      <param name="message"> mensaje de error traducido </param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     constructor </summary>
      <param name="message"> mensaje de error traducido </param>
      <param name="innerException"> excepción interna </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     clase de excepción de metadatos </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     constructor con mensaje predeterminado </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     constructor predeterminado </summary>
      <param name="message"> mensaje de error traducido </param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     constructor </summary>
      <param name="message"> mensaje de error traducido </param>
      <param name="innerException"> excepción interna </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>Esta excepción se produce cuando un objeto solicitado no se encuentra en el almacenamiento.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
      <param name="message">Mensaje de error localizado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> que toma un mensaje y una instancia de excepción interna.</summary>
      <param name="message">Mensaje de error localizado.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>Esta excepción se produce cuando una operación de actualización infringe la restricción de simultaneidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> utilizando los valores predeterminados.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> con un mensaje especificado.</summary>
      <param name="message">Mensaje asociado a la excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> con un mensaje especificado y una excepción interna.</summary>
      <param name="message">Mensaje asociado a la excepción.</param>
      <param name="innerException">Error que provocó la excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> con un mensaje especificado y una excepción interna.</summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Error que provocó la excepción.</param>
      <param name="stateEntries">Entradas de estado.</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>Representa la clase de excepciones de restricción de propiedades.Tenga en cuenta que esta clase tiene estado, por lo que si cambia sus elementos internos puede producirse un cambio importante.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Mensaje de error localizado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> con un mensaje proporcionado y una excepción interna. </summary>
      <param name="message">Mensaje de error localizado.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Mensaje de error localizado.</param>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Mensaje de error localizado.</param>
      <param name="propertyName">Nombre de la propiedad.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>Obtiene el nombre de la propiedad que infringió la restricción.</summary>
      <returns>El nombre de la propiedad que infringió la restricción.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>La excepción que se produce cuando el proveedor de almacenamiento exhibe un comportamiento incompatible con el proveedor del cliente de la entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que describe la excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> con el mensaje y la excepción interna especificados.</summary>
      <param name="message">Mensaje de error que describe la excepción.</param>
      <param name="innerException">La excepción interna que es la causa de la excepción actual.</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>     Excepción durante el guardado de cambios en el almacenamiento </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>     Constructor predeterminado </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>     Constructor protegido para la serialización </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>     Constructor que toma un mensaje </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>     Constructor que toma un mensaje y una excepción interna </summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>     Constructor que toma un mensaje y una excepción interna </summary>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>     Obtiene las entradas de estado relacionadas con el error. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>Clase DataRecordInfo que proporciona una manera simple de obtener acceso tanto a la información de tipos como a la información de columnas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>Inicializa un nuevo objeto <see cref="T:System.Data.Common.DbDataRecord" /> para un tipo específico con una colección enumerable de campos de datos.</summary>
      <param name="metadata">Metadatos del tipo representado por este objeto, proporcionados por <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> .</param>
      <param name="memberInfo">Colección enumerable de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> que representan la información de columnas.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>Obtiene <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> para este objeto <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>Obtiene información de tipos para este objeto como un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>Definición de comando preparada; se puede almacenar en memoria caché y reutilizar para no tener que volver a preparar un comando.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> utilizando la clase <see cref="T:System.Data.Common.DbCommand" /> proporcionada.</summary>
      <param name="prototype">Objeto <see cref="T:System.Data.Common.DbCommand" /> proporcionado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>Crea y devuelve un objeto <see cref="T:System.Data.Common.DbCommand" /> que se puede ejecutar.</summary>
      <returns>El comando para la base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>Interfaz de metadatos para todos los tipos CLR</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Nombre de la faceta Collation</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Valor que se va a pasar a GetInformation para obtener la ConceptualSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>Valor que se va a pasar a GetInformation para obtener la ConceptualSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>Nombre de la faceta DefaultValue</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Los sistemas de escritura del proveedor deben reemplazar este método para devolver el argumento con los caracteres comodín y el carácter de escape con escape.Este método solamente se utiliza si SupportsEscapingLikeArgument devuelve true.</summary>
      <returns>Argumento con los caracteres comodín y el carácter de escape con escape.</returns>
      <param name="argument">El argumento para el que se va a crear un carácter de escape.</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>Nombre de la faceta FixedLength</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>Cuando se reemplaza en una clase derivada, este método devuelve información específica del proveedor.</summary>
      <returns>El objeto XmlReader que representa la asignación al catálogo del almacén de datos subyacente.</returns>
      <param name="informationType">Tipo de información que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Cuando se reemplaza en una clase derivada, este método asigna el tipo de almacenamiento especificado y un conjunto de facetas para ese tipo a un tipo EDM.</summary>
      <returns>La instancia de <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo de EDM y un conjunto de facetas para ese tipo.</returns>
      <param name="storeType">La instancia de TypeUsage que describe un tipo de almacenamiento y un conjunto de facetas para que ese tipo se asigne al tipo EDM.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Devuelve los objetos FacetDescriptions de un determinado tipo.</summary>
      <returns>Los objetos FacetDescription del tipo EDM especificado.</returns>
      <param name="edmType">Tipo EDM del cual se va a devolver la descripción de la faceta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Obtiene información específica del proveedor.</summary>
      <returns>La información específica del proveedor.</returns>
      <param name="informationType">Tipo de información que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>Cuando se reemplaza en una clase derivada, devuelve una colección de las funciones EDM admitidas por el manifiesto del proveedor.</summary>
      <returns>Colección de funciones EDM.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Cuando se reemplaza en una clase derivada, este método asigna el tipo EDM especificado y un conjunto de facetas para ese tipo de almacenamiento.</summary>
      <returns>La instancia de TypeUsage que describe un tipo de almacenamiento y un conjunto de facetas para dicho tipo.</returns>
      <param name="edmType">La instancia de TypeUsage que describe el tipo EDM y un conjunto de facetas para que ese tipo sea asignado a un tipo de almacenamiento.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>Cuando se reemplaza en una clase derivada, devuelve el conjunto de tipos primitivos compatibles con el origen de datos.</summary>
      <returns>Conjunto de tipos admitido por el origen de datos.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>Nombre de la faceta IsStrict</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>Nombre de la faceta MaxLength</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>Obtiene el nombre de espacio de nombres usado por este manifiesto del proveedor.</summary>
      <returns>Espacio de nombres usado por este manifiesto del proveedor.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Nombre de la faceta Nullable</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Nombre de la faceta Precision</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Nombre de la faceta Scale</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>Nombre de la faceta SRID</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Valor que se va a pasar a GetInformation para obtener la StoreSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>Valor que se va a pasar a GetInformation para obtener la StoreSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Valor que se va a pasar a GetInformation para obtener la StoreSchemaMapping</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>Valor que se va a pasar a GetInformation para obtener la StoreSchemaMappingVersion3</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Indica si el proveedor permite usar cadenas de escape como modelos en una expresión Like.</summary>
      <returns>True si este proveedor permite usar cadenas de escape como modelos en una expresión Like; de lo contrario, false.</returns>
      <param name="escapeCharacter">Si el proveedor admite cadenas de escape, el carácter que se usará como carácter de escape.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>Devuelve un valor booleano que especifica si el proveedor puede controlar los árboles de expresiones que contienen instancias de DbInExpression.La implementación predeterminada devuelve false por compatibilidad con versiones anteriores.Las clases derivadas pueden reemplazar este método.</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Nombre de la faceta Unicode</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>Generador para crear definiciones de comando; use el tipo de este objeto como argumento del método IServiceProvider.GetService en el generador del proveedor;</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>Crea un proveedor de EF que usará la <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> obtenida del singleton de <see cref="T:System.Data.Entity.DbConfiguration" /> de dominio de aplicación para resolver dependencias de EF como la instancia de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> que se va a usar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Agrega una <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que se usará para resolver servicios predeterminados adicionales del proveedor cuando se registra un tipo derivado como proveedor de EF mediante una entrada del archivo de configuración de la aplicación o mediante registro basado en código en <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
      <param name="resolver">Resolución que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Crea el objeto de DbCommandDefinition predeterminado basándose en el comando de prototipo Este método se ha diseñado para que los programadores de proveedores creen una definición de comando predeterminada a partir de un comando.Nota: esto clonará el prototipo</summary>
      <returns>objeto de definición de comando ejecutable</returns>
      <param name="prototype">el comando de prototipo</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Crea un objeto de definición de comando dado un árbol de comandos.</summary>
      <returns>objeto de definición de comando ejecutable</returns>
      <param name="commandTree">árbol de comandos para la instrucción</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Crea una definición de comando a partir del manifiesto especificado y un árbol de comandos.</summary>
      <returns>La definición del comando creado.</returns>
      <param name="providerManifest">El manifiesto.</param>
      <param name="commandTree">El árbol de comandos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Crea una base de datos indicada por la conexión y crea objetos de esquema (tablas, claves principales, claves externas) basados en el contenido de storeItemCollection.</summary>
      <param name="connection">Conexión a una base de datos inexistente que debe crearse y rellenarse con los objetos de almacenamiento indicados por el parámetro storeItemCollection.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución para cualquier comando necesario para crear la base de datos.</param>
      <param name="storeItemCollection">La colección de todos los elementos de almacenamiento en los que debería basarse la creación del script.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Genera un lenguaje de definición de datos (script DDL que crea objetos de esquema, como tablas, claves principales y claves externas) a partir del contenido del parámetro StoreItemCollection, y que está dirigido a la versión de la base de datos que corresponde al token del manifiesto del proveedor.</summary>
      <returns>Un script DDL que crea objetos de esquema a partir del contenido del parámetro StoreItemCollection y que está destinado a la versión de la base de datos que corresponde al token del manifiesto del proveedor.</returns>
      <param name="providerManifestToken">Token de manifiesto del proveedor que identifica la versión de destino.</param>
      <param name="storeItemCollection">Estructura de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Crea un objeto de definición de comandos para el manifiesto del proveedor y el árbol de comandos especificados.</summary>
      <returns>Un objeto de definición de comando ejecutable.</returns>
      <param name="providerManifest">Manifiesto del proveedor recuperado previamente del proveedor de almacenamiento.</param>
      <param name="commandTree">Árbol de comandos para la instrucción.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Obtiene un valor que indica si la base de datos especifica existe o no en el servidor.</summary>
      <returns>True si el proveedor puede deducir la base de datos basándose solamente en la conexión.</returns>
      <param name="connection">Conexión a una base de datos cuya existencia se comprueba mediante este método.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución de los comandos necesario para determinar la existencia de la base de datos.</param>
      <param name="storeItemCollection">El conjunto de todos los elementos de almacenamiento del modelo .Este parámetro ya no se utiliza para determinar la existencia de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Crea una base de datos indicada por la conexión, y crea objetos de esquema (tablas, claves principales, claves externas) basados en el contenido de una StoreItemCollection.</summary>
      <param name="connection">Conexión a una base de datos inexistente que debe crearse y rellenarse con los objetos de almacenamiento indicados por el parámetro storeItemCollection.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución para cualquier comando necesario para crear la base de datos.</param>
      <param name="storeItemCollection">La colección de todos los elementos de almacenamiento en los que debería basarse la creación del script.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Genera un lenguaje de definición de datos (script DDL) que crea objetos de esquema, como tablas, claves principales y claves externas) a partir del contenido del parámetro StoreItemCollection, y que está dirigido a la versión de la base de datos que corresponde al token del manifiesto del proveedor.</summary>
      <returns>Un script DDL que crea objetos de esquema a partir del contenido del parámetro StoreItemCollection y que está destinado a la versión de la base de datos que corresponde al token del manifiesto del proveedor.</returns>
      <param name="providerManifestToken">Token de manifiesto del proveedor que identifica la versión de destino.</param>
      <param name="storeItemCollection">Estructura de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Obtiene un valor que indica si la base de datos especifica existe o no en el servidor.</summary>
      <returns>True si el proveedor puede deducir la base de datos basándose solamente en la conexión.</returns>
      <param name="connection">Conexión a una base de datos cuya existencia se comprueba mediante este método.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución de los comandos necesario para determinar la existencia de la base de datos.</param>
      <param name="storeItemCollection">El conjunto de todos los elementos de almacenamiento del modelo .Este parámetro ya no se utiliza para determinar la existencia de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Elimina la base de datos especificada.</summary>
      <param name="connection">Conexión a una base de datos existente que debe eliminarse.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución para cualquier comando necesario para eliminar la base de datos.</param>
      <param name="storeItemCollection">El conjunto de todos los elementos de almacenamiento del modelo .Este parámetro ya no se utiliza para eliminar la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>Obtiene los servicios espaciales para <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Los servicios espaciales.</returns>
      <param name="manifestToken">Información de token asociada al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Elimina la base de datos especificada.</summary>
      <param name="connection">Conexión a una base de datos existente que debe eliminarse.</param>
      <param name="commandTimeout">Tiempo de espera de ejecución para cualquier comando necesario para eliminar la base de datos.</param>
      <param name="storeItemCollection">El conjunto de todos los elementos de almacenamiento del modelo .Este parámetro ya no se utiliza para eliminar la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>Expande |DataDirectory| en la ruta de acceso especificada si empieza por |DataDirectory| y devuelve la ruta de acceso expandida, o devuelve la cadena proporcionada si no empieza por |DataDirectory|.</summary>
      <returns>Ruta de acceso expandida.</returns>
      <param name="path">Ruta de acceso que se va a expandir.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>Devuelve un lector XML que representa la descripción de CSDL</summary>
      <returns>XmlReader que representa la descripción de CSDL</returns>
      <param name="csdlName">Nombre de la descripción de CSDL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>Cuando se reemplaza en una clase derivada, devuelve una instancia de una clase que se deriva del DbProviderManifest.</summary>
      <returns>Un objeto DbProviderManifest que representa el manifiesto del proveedor.</returns>
      <param name="manifestToken">Información de token asociada al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Devuelve el token del manifiesto del proveedor de una determinada conexión.</summary>
      <returns>Token del manifiesto del proveedor para la conexión especificada.</returns>
      <param name="connection">Conexión en la que buscar el token del manifiesto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Obtiene el lector de datos espaciales para <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>El lector de datos espaciales.</returns>
      <param name="fromReader">El lector del cual proceden los datos espaciales.</param>
      <param name="manifestToken">Información de token asociada al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>Obtiene la <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> que se usará para ejecutar métodos que emplean la conexión especificada.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /></returns>
      <param name="connection">Conexión de base de datos</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Recupera el DbProviderFactory en función de la DbConnection especificada.</summary>
      <returns>La instancia de DbProviderFactory recuperada.</returns>
      <param name="connection">La conexión que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Devuelve el manifiesto del proveedor utilizando la información de versión especificada.</summary>
      <returns>El manifiesto del proveedor utilizando la información de versión especificada.</returns>
      <param name="manifestToken">Información de token asociada al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Devuelve el token del manifiesto del proveedor dada una conexión.</summary>
      <returns>Token del manifiesto del proveedor.</returns>
      <param name="connection">Conexión con el proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Devuelve proveedores dada una conexión.</summary>
      <returns>El <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> del que se creó una instancia a partir de la conexión especificada.</returns>
      <param name="connection">Conexión con el proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>Se le llama para resolver servicios predeterminados adicionales del proveedor cuando se registra un tipo derivado como proveedor de EF mediante una entrada del archivo de configuración de la aplicación o mediante registro basado en código en <see cref="T:System.Data.Entity.DbConfiguration" />.La implementación de este método en esta clase usa las resoluciones agregadas con el método AddDependencyResolver para resolver dependencias.</summary>
      <returns>Instancia del tipo especificado, o NULL si el servicio no se puede resolver.</returns>
      <param name="type">Tipo del servicio que se va a resolver.</param>
      <param name="key">Clave opcional que proporciona información adicional para resolver el servicio.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>Se le llama para resolver servicios predeterminados adicionales del proveedor cuando se registra un tipo derivado como proveedor de EF mediante una entrada del archivo de configuración de la aplicación o mediante registro basado en código en <see cref="T:System.Data.Entity.DbConfiguration" />.La implementación de este método en esta clase usa las resoluciones agregadas con el método AddDependencyResolver para resolver dependencias.</summary>
      <returns>Todos los servicios registrados que satisfacen el tipo y clave dados o una enumeración vacía si no hay ninguno.</returns>
      <param name="type">Tipo del servicio que se va a resolver.</param>
      <param name="key">Clave opcional que proporciona información adicional para resolver el servicio.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Obtiene el lector de datos espaciales para <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>El lector de datos espaciales.</returns>
      <param name="fromReader">El lector del cual proceden los datos espaciales.</param>
      <param name="manifestToken">El token de manifiesto asociado al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Obtiene los servicios espaciales para <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Los servicios espaciales.</returns>
      <param name="key">Información de la base de datos para la cual se utilizarán los servicios espaciales.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>Obtiene los servicios espaciales para <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Los servicios espaciales.</returns>
      <param name="manifestToken">Información de token asociada al manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>Registra un controlador para procesar mensajes no de error procedentes del proveedor de la base de datos.</summary>
      <param name="connection">La conexión para la cual recibir información.</param>
      <param name="handler">El controlador para procesar mensajes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Ajusta el valor del parámetro y las facetas correspondientes del <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> dado.</summary>
      <param name="parameter">Parámetro.</param>
      <param name="parameterType">Tipo del parámetro.</param>
      <param name="value">Valor del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Ajusta el valor del parámetro y las facetas correspondientes del <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> dado.</summary>
      <param name="parameter">Parámetro.</param>
      <param name="parameterType">Tipo del parámetro.</param>
      <param name="value">Valor del parámetro.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>Especialización de ProviderManifest que acepta un XmlReader</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" />.</summary>
      <param name="reader">Objeto <see cref="T:System.Xml.XmlReader" /> que proporciona acceso a los datos XML en el archivo de manifiesto del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Devuelve la lista de descripciones de facetas para el tipo de Entity Data Model (EDM) especificado.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene la lista de descripciones de facetas para el tipo de EDM especificado.</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> para el que se van a recuperar las descripciones de facetas.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Devuelve la lista de funciones admitidas por el proveedor.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene la lista de funciones admitidas por el proveedor.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Devuelve la lista de tipos primitivos admitidos por el proveedor de almacenamiento.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene la lista de tipos primitivos admitidos por el proveedor de almacenamiento.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Obtiene el nombre de espacio de nombres admitido por este manifiesto del proveedor.</summary>
      <returns>El nombre de espacio de nombres admitido por este manifiesto del proveedor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Obtiene el mejor tipo de Entity Data Model (EDM) equivalente asignado para un nombre de tipo de almacenamiento especificado.</summary>
      <returns>El mejor tipo de EDM equivalente asignado para un nombre de tipo de almacenamiento especificado.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Obtiene el mejor tipo primitivo de almacenamiento equivalente asignado para un nombre de tipo de almacenamiento especificado.</summary>
      <returns>El mejor tipo primitivo de almacenamiento equivalente asignado para un nombre de tipo de almacenamiento especificado.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>Clase EntityRecordInfo que proporciona una manera simple de obtener acceso tanto a la información de tipos como a la información de columnas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> de un tipo de entidad concreto, con una colección enumerable de campos de datos y con información específica de clave y de conjunto de entidades.</summary>
      <param name="metadata">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> de la entidad representada por el <see cref="T:System.Data.Common.DbDataRecord" /> descrito por este objeto <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />.</param>
      <param name="memberInfo">Colección enumerable de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> que representan la información de columnas.</param>
      <param name="entityKey">La clave de la entidad.</param>
      <param name="entitySet">Conjunto de entidades al que pertenece la entidad.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>Obtiene el objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> para la entidad.</summary>
      <returns>La clave de la entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>Clase FieldMetadata que proporciona la correlación entre los índices de columna y MemberMetadata.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Inicializa un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> con el valor ordinal y el tipo de campo especificados.</summary>
      <param name="ordinal">Entero que especifica la ubicación de los metadatos.</param>
      <param name="fieldType">Tipo de campo.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>Obtiene el tipo de campo para este objeto <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Tipo de campo de este objeto <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>Obtiene el ordinal para este objeto <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Entero que representa el valor ordinal.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>Representa un tipo base abstracto para los tipos que implementan la interfaz IExpressionVisitor de la que se van a derivar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos.</summary>
      <param name="commandTree">El árbol de comandos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos de eliminación.</summary>
      <param name="deleteTree">El árbol de comandos de eliminación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos de función.</summary>
      <param name="functionTree">El árbol de comandos de función.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos de inserción.</summary>
      <param name="insertTree">El árbol de comandos de inserción.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>Implementa el modelo Visitor de la cláusula de modificación.</summary>
      <param name="modificationClause">La cláusula de modificación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>Implementa el modelo Visitor de la colección de cláusulas de modificación.</summary>
      <param name="modificationClauses">Las cláusulas de modificación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos de consulta.</summary>
      <param name="queryTree">El árbol de comandos de consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>Implementa el modelo Visitor de la cláusula de configuración.</summary>
      <param name="setClause">La cláusula de configuración.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>Implementa el modelo Visitor del árbol del comandos de actualización.</summary>
      <param name="updateTree">El árbol de comandos de actualización.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>Tipo base abstracto para los tipos que implementan la interfaz IExpressionVisitor de la que se va a derivar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">DbAndExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">DbApplyExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">DbArithmeticExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">DbCaseExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">DbCastExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">DbComparisonExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">DbConstantExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">DbCrossJoinExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">DeRefExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">DbDistinctExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">DbElementExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">DbEntityRefExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">DbExceptExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Se le llama cuando se encuentra una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> de un tipo no reconocido.</summary>
      <param name="expression">Expresión</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
      <exception cref="T:System.NotSupportedException">Se producirá siempre si se invoca a este método, ya que indica que <paramref name="expression" /> es de un tipo no compatible.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">DbFilterExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">DbFunctionExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">DbExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />.</summary>
      <param name="expression">DbInExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">DbIntersectExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">DbIsEmptyExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">DbIsNullExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">DbIsOfExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">DbJoinExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">DbLambdaExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">DbLikeExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">DbLimitExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">DbNewInstanceExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">DbNotExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">DbNullExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">DbOfTypeExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">DbOrExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">DbParameterReferenceExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">DbProjectExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">DbPropertyExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">DbQuantifierExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">DbRefExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">DbRefKeyExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">DbRelationshipNavigationExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">DbScanExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">DbSkipExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">DbSortExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">DbTreatExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">DbUnionAllExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Método de modelo Visitor para <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">DbVariableReferenceExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> especificada.</summary>
      <param name="aggregate">Agregado que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>Método práctico para visitar cada <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> de la lista, si la lista no es NULL.</summary>
      <param name="aggregates">Lista de agregados que se van a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" /> especificada.</summary>
      <param name="expression">DbBinaryExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> especificada, si no es NULL.</summary>
      <param name="expression">Expresión que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Método práctico para el procesamiento posterior una vez visitada una clase DbExpressionBinding.</summary>
      <param name="binding">DbExpressionBinding visitada previamente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> especificada.</summary>
      <param name="binding">DbExpressionBinding que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Método práctico para visitar todas las <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> de la lista especificada, si la lista no es NULL.</summary>
      <param name="expressionList">Lista de expresiones que se van a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Método práctico que indica que se han visitado las claves de agrupación de una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> y que ahora se van a visitar los agregados.</summary>
      <param name="binding">DbGroupExpressionBinding de DbGroupByExpression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Método práctico para el procesamiento posterior una vez visitada una clase DbGroupExpressionBinding.</summary>
      <param name="binding">DbGroupExpressionBinding visitada previamente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> especificada.</summary>
      <param name="binding">DbGroupExpressionBinding que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Método práctico para el procesamiento posterior una vez visitada una clase DbLambda.</summary>
      <param name="lambda">DbLambda visitada previamente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Método práctico que indica que ahora se va a visitar el cuerpo de una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> Lambda.</summary>
      <param name="lambda">DbLambda que se va a visitar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> es null</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>Método práctico para visitar la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" /> especificada.</summary>
      <param name="expression">DbUnaryExpression que se va a visitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> es null</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>Los agregados son pseudoexpresiones.Son similares a las expresiones, pero el lugar donde pueden aparecer está muy restringido: solo en la cláusula de agregados de una expresión group-by.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     Obtiene la lista de expresiones que definen los argumentos del agregado. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     Obtiene el tipo de resultado de este agregado </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     Representa el And lógico de dos argumentos booleanos. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     Representa una operación apply, que es la invocación del objeto de función (functor) especificado para cada elemento del conjunto de entrada indicado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el objeto de función (functor) que se invoca para cada elemento del conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     Representa una operación aritmética (suma, resta, multiplicación, división, módulo o negación) aplicada a dos argumentos numéricos. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     Obtiene la lista de expresiones que definen los argumentos actuales. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     Tipo base abstracto para las expresiones que aceptan dos operandos de expresión. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define el argumento izquierdo. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define el argumento derecho. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     Representa una operación lógica Case When...Then...Else. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     Obtiene la cláusula Else de esta DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     Obtiene las cláusulas Then de esta DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     Obtiene las cláusulas When de esta DbCaseExpression. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     Representa una operación de conversión aplicada a un argumento polimórfico. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>     DbCommandTree es el tipo base abstracto para los tipos Delete, Query, Insert y Update de DbCommandTree. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>     Obtiene la clase de este árbol de comandos. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>     Obtiene el espacio de datos en el que deben residir los metadatos usados por este árbol de comandos. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>     Obtiene el área de trabajo de metadatos usada por este árbol de comandos. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>     Obtiene el nombre y el tipo correspondiente de cada parámetro al que se puede hacer referencia dentro de este árbol de comandos. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics"></member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>Describe los diferentes "tipos" (clases) de árboles de comandos.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>Especifica el comando de eliminación.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>Especifica el comando de función.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>Especifica el comando de inserción.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>Especifica el comando de consulta.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>Especifica el comando de actualización.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     Representa una operación de comparación (igualdad, mayor que, mayor o igual que, menor que, menor o igual que, desigualdad) aplicada a dos argumentos. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     Representa un valor constante. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     Obtiene el valor constante. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     Representa una operación de combinación incondicional entre los argumentos de colección especificados </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que proporcionan los conjuntos de entrada que se van a combinar. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Representa una operación de eliminación de una sola fila expresada como un árbol de comandos canónico.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>Obtiene la clase de este árbol de comandos.</summary>
      <returns>La clase de este árbol de comandos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Obtiene una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el predicado que se usa para determinar qué miembros de la colección de destino deben eliminarse.</summary>
      <returns>El predicado que se usa para determinar qué miembros de la colección de destino deben eliminarse.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     Representa la recuperación de una entidad dada usando la referencia especificada. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     Representa la eliminación de elementos duplicados del operando de conjunto especificado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>Representa la conversión a singleton del operando de conjunto especificado.Si el conjunto está vacío, la conversión devolverá NULL; de lo contrario, la conversión devolverá uno de los elementos del conjunto.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     Representa la recuperación de una referencia a la entidad especificada como una referencia. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     Representa la operación de resta de conjuntos entre los operandos izquierdo y derecho. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Representa el tipo base de todas las expresiones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implementa el interfaz del modelo Visitor de los visitantes de expresiones que no generan un valor de resultado.</summary>
      <param name="visitor">Instancia de DbExpressionVisitor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implementa la interfaz del modelo Visitor de los visitantes de expresiones que generan un valor de resultado de un tipo específico.</summary>
      <returns>Una instancia de <paramref name="TResultType" />.</returns>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType.</param>
      <typeparam name="TResultType">Tipo de resultado generado por <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual o no a la instancia DbExpression actual.</summary>
      <returns>Es true si el objeto especificado es igual a la instancia DbExpression actual; de lo contrario, es false.</returns>
      <param name="obj">El objeto que se va a comparar con el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> actual.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Obtiene el tipo de la expresión, que indica la operación de esta expresión.</summary>
      <returns>Tipo de la expresión, que indica la operación de esta expresión.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor binario especificado, que puede ser null.</summary>
      <returns>Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor binario especificado.</returns>
      <param name="value"> Valor binario en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor booleano especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor booleano especificado.</returns>
      <param name="value">Valor booleano en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor de byte especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor de byte especificado.</returns>
      <param name="value">Valor de byte en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor <see cref="T:System.DateTime" /> especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor DateTime especificado.</returns>
      <param name="value">Valor DateTime en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor <see cref="T:System.DateTimeOffset" /> especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor DateTimeOffset especificado.</returns>
      <param name="value">Valor DateTimeOffset en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor decimal especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor decimal especificado.</returns>
      <param name="value">Valor decimal en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor doble especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor doble especificado.</returns>
      <param name="value">Valor doble en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado, que puede ser NULL.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor DbGeography especificado.</returns>
      <param name="value">Valor DbGeography en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, que puede ser NULL.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor DbGeometry especificado.</returns>
      <param name="value">Valor DbGeometry en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor <see cref="T:System.Guid" /> especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Guid especificado.</returns>
      <param name="value">Valor Guid en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int16 especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int16 especificado.</returns>
      <param name="value">Valor Int16 en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int32 especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int32 especificado.</returns>
      <param name="value">Valor Int32 en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int64 especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Int64 especificado.</returns>
      <param name="value">Valor Int64 en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Single especificado (que acepta valores NULL).</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor Single especificado.</returns>
      <param name="value">Valor Single en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor de cadena especificado.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el valor de cadena especificado.</returns>
      <param name="value">Valor de cadena en el que debería basarse la expresión devuelta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Actúa como función hash para este tipo.</summary>
      <returns>Código hash para la expresión actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte una matriz de entero de 8 bits sin signo en un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa la matriz convertida de un entero de 8 bits sin signo.</returns>
      <param name="value">Una matriz de entero de 8 bits sin signo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un objeto DbGeography en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto DbGeography convertido.</returns>
      <param name="value">El objeto DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un objeto DBGeometry en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto DbGeography convertido.</returns>
      <param name="value">El objeto DbGeometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte el objeto booleano que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto booleano que acepta valores NULL convertido.</returns>
      <param name="value">El objeto booleano que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un entero de 8 bits sin signo que admite valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa al entero de 8 bits sin signo convertido.</returns>
      <param name="value">Un entero de 8 bits sin signo que admite valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un objeto <see cref="T:System.DateTime" /> que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa al objeto <see cref="T:System.DateTime" />.</returns>
      <param name="value">El objeto <see cref="T:System.DateTime" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un objeto <see cref="T:System.DateTimeOffset" /> que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa <see cref="T:System.DateTime" /> que acepta valores NULL.</returns>
      <param name="value">El objeto <see cref="T:System.DateTime" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte el objeto decimal que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto decimal que acepta valores NULL.</returns>
      <param name="value">El objeto decimal que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte el objeto doble que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto doble que acepta valores NULL.</returns>
      <param name="value">El objeto doble que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte el objeto Guid que acepta valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto <see cref="T:System.Guid" /> que acepta valores NULL.</returns>
      <param name="value">El objeto <see cref="T:System.Guid" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un entero de 16 bits sin signo que admite valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa al entero de 16 bits sin signo que acepta valores NULL.</returns>
      <param name="value">Un entero de 16 bits sin signo que admite valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un entero de 32 bits sin signo que admite valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa al entero de 32 bits sin signo que acepta valores NULL.</returns>
      <param name="value">Un entero de 32 bits sin signo que admite valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un entero de 64 bits sin signo que admite valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa al entero de 64 bits sin signo que acepta valores NULL.</returns>
      <param name="value">Un entero de 64 bits sin signo que admite valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un número de punto flotante de precisión sencilla que admite valores NULL en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa un número de punto flotante de precisión sencilla.</returns>
      <param name="value">Número de punto flotante de precisión sencilla.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte una colección secuencial de caracteres Unicode <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa una colección secuencial de caracteres Unicode.</returns>
      <param name="value">Una colección secuencial de caracteres Unicode .</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>Obtiene los metadatos de tipo para el tipo de resultado de la expresión.</summary>
      <returns>Metadatos de tipo para el tipo de resultado de la expresión.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>Describe un enlace para una expresión.Es conceptualmente similar a un bucle foreach en C#.La propiedad DbExpression define la colección que se recorre en iteración, mientras que la propiedad Var proporciona un medio de hacer referencia al elemento actual de la colección durante la iteración.DbExpressionBinding se usa para describir los argumentos de conjunto para expresiones relacionales como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> y <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> que hace referencia a la variable de elemento. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     Obtiene el nombre asignado a la variable de elemento. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     Obtiene los metadatos de tipo de la variable de elemento. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     Describe los diferentes "tipos" (clases) de expresiones </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     True para todos. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     AND lógico. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     True para cualquiera. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     Instrucción de caso condicional. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     Conversión de tipo polimórfico. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     Valor constante. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Aplicación cruzada </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     Combinación cruzada </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     Desreferencia. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     Eliminación de duplicados. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     División. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     Conversión de conjunto a singleton. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     Recuperación del valor de referencia de entidad. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     Igualdad </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     Resta de conjuntos </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     Restricción. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     Combinación externa completa </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     Invocación de una función independiente </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     Mayor que. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     Mayor o igual que. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     Agrupación. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     En. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     Combinación interna </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     Intersección de conjuntos. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     Determinación de conjuntos vacíos. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Determinación de valores NULL. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     Comparación de tipos (del tipo o subtipo especificado). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     Comparación de tipos (solo del tipo especificado). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     Aplicación de una función lambda </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     Combinación externa izquierda </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     Menor que. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     Menor o igual que. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     Comparación de cadenas. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     Restricción de recuento de resultados (TOP n). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     Resta. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     Módulo. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     Multiplicación. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     Construcción de instancias, filas y conjuntos. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     Negación lógica. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     Desigualdad. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     Establecer miembros por tipo (o subtipo). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     Establecimiento de miembros por tipo (exacto). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     OR lógico. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Aplicación externa. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     Referencia a un parámetro. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     Suma. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     Proyección. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     Recuperación de una propiedad estática o de instancia. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     Referencia. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     Recuperación de valores de clave de referencia. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     Navegación de una relación (composición o asociación). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     Examen de conjuntos de relaciones o entidades. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     Expresiones de omisión de elementos de una colección ordenada. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     Ordenación. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     Conversión de tipos. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     Negativo. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     Unión de conjuntos (con duplicados). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     Referencia a una variable. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>Garantiza que todos los metadatos de un determinado árbol de expresiones correspondan al área de trabajo de metadatos especificada, volviendo a enlazar y a generar las expresiones a los metadatos de reemplazo adecuados en caso de ser necesario.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" />.</summary>
      <param name="targetWorkspace">El área de trabajo de destino.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implementa el modelo Visitor para la recuperación de una propiedad de instancia.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">Expresión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implementa el modelo Visitor del conjunto de entidades.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="entitySet">Conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implementa el modelo Visitor de la función.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="functionMetadata">Los metadatos de la función.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implementa el modelo Visitor del tipo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="type">El tipo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implementa el modelo Visitor del uso del tipo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="type">El tipo.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>Clase base abstracta de modelo Visitor de expresión que deben implementar los visitantes que no devuelven un valor de resultado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Método de modelo Visitor para DbAndExpression.</summary>
      <param name="expression">DbAndExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Método de modelo Visitor para DbApplyExpression.</summary>
      <param name="expression">DbApplyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Método de modelo Visitor para DbArithmeticExpression.</summary>
      <param name="expression">DbArithmeticExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Método de modelo Visitor para DbCaseExpression.</summary>
      <param name="expression">DbCaseExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Método de modelo Visitor para DbCastExpression.</summary>
      <param name="expression">DbCastExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Método de modelo Visitor para DbComparisonExpression.</summary>
      <param name="expression">DbComparisonExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Método de modelo Visitor para DbConstantExpression.</summary>
      <param name="expression">DbConstantExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Método de modelo Visitor para DbCrossJoinExpression.</summary>
      <param name="expression">DbCrossJoinExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Método de modelo Visitor para DbDerefExpression.</summary>
      <param name="expression">DbDerefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Método de modelo Visitor para DbDistinctExpression.</summary>
      <param name="expression">DbDistinctExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Método de modelo Visitor para DbElementExpression.</summary>
      <param name="expression">DbElementExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Método de modelo Visitor para DbEntityRefExpression.</summary>
      <param name="expression">DbEntityRefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Método de modelo Visitor para DbExceptExpression.</summary>
      <param name="expression">DbExceptExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>La llamada se produce cuando se encuentra una expresión de un tipo no reconocido.</summary>
      <param name="expression">Expresión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Método de modelo Visitor para DbFilterExpression.</summary>
      <param name="expression">DbFilterExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Método de modelo Visitor de DbFunctionExpression.</summary>
      <param name="expression">DbFunctionExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Método de modelo Visitor para DbGroupByExpression.</summary>
      <param name="expression">DbGroupByExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Método de modelo Visitor para DbInExpression.</summary>
      <param name="expression">DbInExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Método de modelo Visitor para DbIntersectExpression.</summary>
      <param name="expression">DbIntersectExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Método de modelo Visitor para DbIsEmptyExpression.</summary>
      <param name="expression">DbIsEmptyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Método de modelo Visitor para DbIsNullExpression.</summary>
      <param name="expression">DbIsNullExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Método de modelo Visitor para DbIsOfExpression.</summary>
      <param name="expression">DbIsOfExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Método de modelo Visitor para DbJoinExpression.</summary>
      <param name="expression">DbJoinExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Método de modelo Visitor para DbLambdaExpression.</summary>
      <param name="expression">DbLambdaExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Método de modelo Visitor para DbLikeExpression.</summary>
      <param name="expression">DbLikeExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Método de modelo Visitor para DbLimitExpression.</summary>
      <param name="expression">DbLimitExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Método de modelo Visitor para DbNewInstanceExpression.</summary>
      <param name="expression">DbNewInstanceExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Método de modelo Visitor para DbNotExpression.</summary>
      <param name="expression">DbNotExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Método de modelo Visitor para DbNullExpression.</summary>
      <param name="expression">DbNullExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Método de modelo Visitor para DbOfTypeExpression.</summary>
      <param name="expression">DbOfTypeExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Método de modelo Visitor para DbOrExpression.</summary>
      <param name="expression">DbOrExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Método de modelo Visitor para DbParameterReferenceExpression.</summary>
      <param name="expression">DbParameterReferenceExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Método de modelo Visitor para DbProjectExpression.</summary>
      <param name="expression">DbProjectExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Método de modelo Visitor para DbPropertyExpression.</summary>
      <param name="expression">DbPropertyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Método de modelo Visitor para DbQuantifierExpression.</summary>
      <param name="expression">DbQuantifierExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Método de modelo Visitor para DbRefExpression.</summary>
      <param name="expression">DbRefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Método de modelo Visitor para DbRefKeyExpression.</summary>
      <param name="expression">DbRefKeyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Método de modelo Visitor para DbRelationshipNavigationExpression.</summary>
      <param name="expression">DbRelationshipNavigationExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Método de modelo Visitor para DbScanExpression.</summary>
      <param name="expression">DbScanExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Método de modelo Visitor para DbSkipExpression.</summary>
      <param name="expression">DbSkipExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Método de modelo Visitor para DbSortExpression.</summary>
      <param name="expression">DbSortExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Método de modelo Visitor para DbTreatExpression.</summary>
      <param name="expression">DbTreatExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Método de modelo Visitor para DbUnionAllExpression.</summary>
      <param name="expression">DbUnionAllExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Método de modelo Visitor para DbVariableReferenceExpression.</summary>
      <param name="expression">DbVariableReferenceExpression que se va a visitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     Clase base abstracta de modelo Visitor de expresión que deben implementar los visitantes que devuelven un valor de resultado de un tipo específico. </summary>
      <typeparam name="TResultType"> Tipo del valor de resultado producido por el visitante. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     Método de modelo Visitor con tipos para DbAndExpression. </summary>
      <param name="expression"> DbAndExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     Método de modelo Visitor con tipos para DbApplyExpression. </summary>
      <param name="expression"> DbApplyExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     Método de modelo Visitor con tipos para DbArithmeticExpression. </summary>
      <param name="expression"> DbArithmeticExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     Método de modelo Visitor con tipos para DbCaseExpression. </summary>
      <param name="expression"> DbCaseExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     Método de modelo Visitor con tipos para DbCastExpression. </summary>
      <param name="expression"> DbCastExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     Método de modelo Visitor con tipos para DbComparisonExpression. </summary>
      <param name="expression"> DbComparisonExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     Método de modelo Visitor con tipos para DbConstantExpression. </summary>
      <param name="expression"> DbConstantExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     Método de modelo Visitor con tipos para DbCrossJoinExpression. </summary>
      <param name="expression"> DbCrossJoinExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     Método de modelo Visitor para DbDerefExpression. </summary>
      <param name="expression"> DbDerefExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     Método de modelo Visitor con tipos para DbDistinctExpression. </summary>
      <param name="expression"> DbDistinctExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     Método de modelo Visitor con tipos para DbElementExpression. </summary>
      <param name="expression"> DbElementExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     Método de modelo Visitor para DbEntityRefExpression. </summary>
      <param name="expression"> DbEntityRefExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     Método de modelo Visitor con tipos para DbExceptExpression. </summary>
      <param name="expression"> DbExceptExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     La llamada se produce cuando se encuentra una expresión de un tipo no reconocido. </summary>
      <param name="expression"> Expresión. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     Método de modelo Visitor con tipos para DbFilterExpression. </summary>
      <param name="expression"> DbFilterExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     Método de modelo Visitor para DbFunctionExpression </summary>
      <param name="expression"> DbFunctionExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     Método de modelo Visitor con tipos para DbGroupByExpression. </summary>
      <param name="expression"> DbGroupByExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     Método de modelo Visitor con tipos para DbInExpression. </summary>
      <param name="expression"> DbInExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     Método de modelo Visitor con tipos para DbIntersectExpression. </summary>
      <param name="expression"> DbIntersectExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     Método de modelo Visitor con tipos para DbIsEmptyExpression. </summary>
      <param name="expression"> DbIsEmptyExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     Método de modelo Visitor con tipos para DbIsNullExpression. </summary>
      <param name="expression"> DbIsNullExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     Método de modelo Visitor con tipos para DbIsOfExpression. </summary>
      <param name="expression"> DbIsOfExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     Método de modelo Visitor con tipos para DbJoinExpression. </summary>
      <param name="expression"> DbJoinExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     Método de modelo Visitor para DbLambdaExpression. </summary>
      <param name="expression"> DbLambdaExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     Método de modelo Visitor para DbLikeExpression. </summary>
      <param name="expression"> DbLikeExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     Método de modelo Visitor para DbLimitExpression. </summary>
      <param name="expression"> DbLimitExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     Método de modelo Visitor con tipos para DbNewInstanceExpression. </summary>
      <param name="expression"> DbNewInstanceExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     Método de modelo Visitor con tipos para DbNotExpression. </summary>
      <param name="expression"> DbNotExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     Método de modelo Visitor con tipos para DbNullExpression. </summary>
      <param name="expression"> DbNullExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     Método de modelo Visitor con tipos para DbOfTypeExpression. </summary>
      <param name="expression"> DbOfTypeExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     Método de modelo Visitor con tipos para DbOrExpression. </summary>
      <param name="expression"> DbOrExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     Método de modelo Visitor con tipos para DbParameterReferenceExpression. </summary>
      <param name="expression"> DbParameterReferenceExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     Método de modelo Visitor con tipos para DbProjectExpression. </summary>
      <param name="expression"> DbProjectExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     Método de modelo Visitor con tipos para DbPropertyExpression. </summary>
      <param name="expression"> DbPropertyExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     Método de modelo Visitor con tipos para DbQuantifierExpression. </summary>
      <param name="expression"> DbQuantifierExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     Método de modelo Visitor con tipos para DbRefExpression. </summary>
      <param name="expression"> DbRefExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     Método de modelo Visitor para DbRefKeyExpression. </summary>
      <param name="expression"> DbRefKeyExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     Método de modelo Visitor con tipos para DbRelationshipNavigationExpression. </summary>
      <param name="expression"> DbRelationshipNavigationExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     Método de modelo Visitor con tipos para DbScanExpression. </summary>
      <param name="expression"> DbScanExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     Método de modelo Visitor con tipos para DbSkipExpression. </summary>
      <param name="expression"> DbSkipExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     Método de modelo Visitor con tipos para DbSortExpression. </summary>
      <param name="expression"> DbSortExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     Método de modelo Visitor con tipos para DbTreatExpression. </summary>
      <param name="expression"> DbTreatExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     Método de modelo Visitor con tipos para DbUnionAllExpression. </summary>
      <param name="expression"> DbUnionAllExpression que se va a visitar. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     Método de modelo Visitor con tipos para DbVariableReferenceExpression. </summary>
      <param name="expression"> DbVariableReferenceExpression que se va a visitar. </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     Representa un predicado aplicado a un conjunto de entrada para generar el conjunto de elementos que cumplen el predicado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el predicado usado para filtrar el conjunto de entrada. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     Tipo de agregado que corresponde a la invocación de una función de agregado. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     Obtiene un valor que indica si la función de agregado se aplica de un modo distinto </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     Obtiene los metadatos de método que especifican la función de agregado que debe invocarse. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Representa una invocación de función expresada como un árbol de comandos canónico.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>Crea una nueva clase DbFunctionCommandTree que usa el área de trabajo de metadatos, el espacio de datos y los metadatos de función especificados.</summary>
      <param name="metadata">Área de trabajo de metadatos que el árbol de comandos debe usar. </param>
      <param name="dataSpace">'Espacio' lógico al que deben pertenecer los metadatos de las expresiones usadas en este árbol de comandos.</param>
      <param name="edmFunction">La característica de EDM a invocar.</param>
      <param name="resultType">El tipo de resultado de la función.</param>
      <param name="parameters">Los parámetros asociados a la función a invocar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>Obtiene o define la clase del árbol de comandos.</summary>
      <returns>La clase del árbol de comandos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Obtiene la clase <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" /> que representa la función que se va a invocar.</summary>
      <returns>La clase <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" /> que representa la función que se va a invocar.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Obtiene el tipo de resultado de la función; actualmente está restringido a una colección de RowTypes.A diferencia de la instancia típica de RowType, simplemente indica el nombre o el tipo, no el orden de los parámetros.</summary>
      <returns>El tipo de resultado de la función.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     Representa la invocación de una función. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona los argumentos para la función. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     Obtiene los metadatos para la función que se va a invocar. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>Representa una colección de elementos que componen un grupo.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     Representa una operación "agrupar por", que es una agrupación de los elementos del conjunto de entrada basada en las expresiones de clave especificadas seguida de la aplicación de los agregados especificados. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> que proporciona los agregados que se van a aplicar. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     Obtiene la <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> que especifica el conjunto de entrada y proporciona acceso a las variables de elemento de conjunto y elemento de grupo. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona las claves de agrupación. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Define el enlace para el conjunto de entrada en una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.Además de las propiedades de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, DbGroupExpressionBinding también brinda acceso al elemento group mediante la referencia de variable &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; y al agregado de grupo mediante la propiedad &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt;.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     Obtiene la clase DbGroupAggregate que representa la colección de elementos del grupo. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     Obtiene la clase DbVariableReferenceExpression que hace referencia a la variable de elemento group. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     Obtiene el nombre asignado a la variable de elemento de grupo. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     Obtiene los metadatos de tipo de la variable de elemento de grupo. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     Obtiene la clase DbVariableReferenceExpression que hace referencia a la variable de elemento. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     Obtiene el nombre asignado a la variable de elemento. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     Obtiene los metadatos de tipo de la variable de elemento. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     Representa una expresión booleana que comprueba si un elemento especificado coincide con algún elemento de una lista. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     Obtiene una clase DbExpression que especifica el elemento cuya coincidencia se va a buscar. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     Obtiene la lista de DbExpression para probar si hay alguna coincidencia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>Representa una operación de inserción de una sola fila expresada como un árbol de comandos canónico.Cuando se define la propiedad <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" />, el comando devuelve un lector; de lo contrario, devuelve un valor escalar que indica el número de filas afectadas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>Obtiene la clase del árbol de comandos.</summary>
      <returns>La clase del árbol de comandos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Obtiene una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica una proyección de los resultados que van a devolverse, en función de las filas modificadas.Si es NULL, indica que no se debe devolver ningún resultado de este comando.</summary>
      <returns>Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica una proyección de los resultados que van a devolverse, en función de las filas modificadas.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Obtiene las cláusulas de conjunto que determinan valores de columnas de la fila insertada.</summary>
      <returns>Las cláusulas de conjunto que determinan valores de columnas de la fila insertada.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     Representa la operación de intersección de conjuntos entre los operandos izquierdo y derecho. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     Representa una determinación de conjunto vacío aplicada a un único argumento de conjunto. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     Representa una determinación NULL aplicada a un único argumento. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     Representa la comparación entre el tipo de un único argumento y el tipo especificado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     Obtiene los metadatos de tipo con los que se deben comparar los metadatos de tipo del argumento. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     Representa una operación de combinación interna, externa izquierda o externa completa entre los argumentos de colección indicados en la condición de combinación especificada. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la condición de combinación que se va a aplicar. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que proporciona la entrada izquierda. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que proporciona la entrada derecha. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     Representa la aplicación de una función Lambda. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona los argumentos a los que se debe aplicar la función Lambda. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> que representa la función Lambda aplicada por esta expresión. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     Representa una comparación de cadenas con el modelo especificado y con una cadena de escape opcional </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     Obtiene la expresión que especifica la cadena que se va a comparar con el modelo especificado </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     Obtiene la expresión que proporciona una cadena de escape opcional que se usará para la comparación </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     Obtiene la expresión que especifica el modelo con el que se debe comparar la cadena especificada </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     Representa la restricción del número de elementos de la colección de argumentos al valor de límite especificado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     Obtiene la expresión que especifica la colección de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     Obtiene la expresión que especifica el límite del número de elementos devueltos desde la colección de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     Obtiene si la operación de límite incluirá resultados equivalentes, lo que podría generar más resultados que los especificados por el valor de límite si hubiera valores equivalentes. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>Especifica una sola cláusula de una operación de modificación de actualización o inserción, vea <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> y <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /></summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     Representa una operación DML expresada como un árbol de comandos canónico </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica la tabla de destino de la operación DML. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     Representa la construcción de una instancia nueva de un tipo dado, incluidos los tipos de registro y de establecimiento. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona los valores de propiedad y columna, o los elementos establecidos para la nueva instancia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     Representa el Not lógico de un único argumento booleano. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     Representa un valor NULL. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     Representa la recuperación de los elementos del tipo especificado en el argumento establecido dado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     Obtiene los metadatos del tipo de elementos que se deberían recuperar en el argumento establecido. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     Representa el Or lógico de dos argumentos booleanos. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     Representa una referencia a un parámetro declarado en el árbol de comandos que contiene esta expresión. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     Obtiene el nombre del parámetro al que se hace referencia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     Representa la proyección de un conjunto de valores dado sobre el conjunto de entrada especificado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la proyección. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>Proporciona métodos y propiedades para recuperar la propiedad de una instancia.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implementa el patrón del visitante para las expresiones que no producen un resultado.</summary>
      <param name="visitor">Una instancia de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">visitor es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implementa el modelo del visitante para las expresiones que producen un resultado de un tipo específico.</summary>
      <returns>El resultado de un tipo específico producido por <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> .</returns>
      <param name="visitor">Instancia de un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> con tipo que produce un resultado de un tipo específico.</param>
      <typeparam name="TResultType">Tipo del resultado producido por el visitante.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor es null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Obtiene una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la instancia cuya propiedad debería recuperarse.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la instancia cuya propiedad se debe recuperar.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>Permite una conversión implícita a <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <returns>Valor convertido.</returns>
      <param name="value">Expresión que se va a convertir.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Obtiene los metadatos de propiedades para la propiedad que se ha de recuperar.</summary>
      <returns>Metadatos de propiedades para la propiedad que se ha de recuperar.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Crea un nuevo par clave-valor basado en esta expresión de propiedad.</summary>
      <returns>Un nuevo par clave-valor con la clave y el valor derivados de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     Representa una operación de un cuantificador del tipo especificado (Any, All) sobre los elementos del conjunto de entrada dado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     Obtiene el predicado booleano que se debe evaluar para cada elemento del conjunto de entrada. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>Representa una operación de consulta expresada como un árbol de comandos canónico.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Construye una nueva clase DbQueryCommandTree que usa el área de trabajo de metadatos especificada.</summary>
      <param name="metadata">Área de trabajo de metadatos que el árbol de comandos debe usar.</param>
      <param name="dataSpace">'Espacio' lógico al que deben pertenecer los metadatos de las expresiones usadas en este árbol de comandos.</param>
      <param name="query">Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la lógica de la consulta.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> o <paramref name="query" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> no representa un espacio de datos válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>Construye una nueva clase DbQueryCommandTree que usa el área de trabajo de metadatos especificada.</summary>
      <param name="metadata">Área de trabajo de metadatos que el árbol de comandos debe usar.</param>
      <param name="dataSpace">'Espacio' lógico al que deben pertenecer los metadatos de las expresiones usadas en este árbol de comandos. </param>
      <param name="query">Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la lógica de la consulta. </param>
      <param name="validate">Cuando se establece en false, la validación del árbol se desactiva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> o <paramref name="query" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> no representa un espacio de datos válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)"></member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>Obtiene la clase de este árbol de comandos.</summary>
      <returns>La clase de este árbol de comandos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Obtiene una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la lógica de la consulta.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la lógica de la consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     Representa una referencia (fuertemente tipada) a una instancia específica dentro de un conjunto de entidades dado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     Obtiene los metadatos del conjunto de entidades que contiene la instancia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     Representa la recuperación del valor de clave de la referencia especificada como una fila. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     Representa la navegación de una relación (de composición o asociación) dado el rol 'from', el rol 'to' y una instancia del rol from </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     Obtiene los metadatos para el extremo de la relación desde el que se va a navegar </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     Obtiene los metadatos para el extremo de la relación hasta el que se va a navegar </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica la instancia del extremo 'from' de la relación desde el que se debe llevar a cabo la navegación. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     Obtiene los metadatos para la relación en la que se produce la navegación </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     Representa un 'examen' de todos los elementos de un conjunto de entidades determinado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     Obtiene los metadatos del conjunto de entidades o de relaciones al que se hace referencia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     Especifica una cláusula de una operación de modificación que establece el valor de una propiedad. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     Obtiene una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica la propiedad que se debería actualizar. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     Obtiene una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el nuevo valor con el que actualizar la propiedad. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     Representa una operación skip del número especificado de elementos del conjunto de entrada después de aplicar la ordenación descrita en las claves de ordenación indicada. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     Obtiene la expresión que especifica el número de elementos que se van a omitir de la colección de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> que define el criterio de ordenación. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     Especifica un criterio de ordenación que se puede usar como parte del criterio de ordenación de una DbSortExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     Obtiene un valor booleano que indica si este criterio de ordenación usa o no un sentido ascendente. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     Obtiene un valor de cadena que especifica la intercalación para este criterio de ordenación. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona el valor de este criterio de ordenación. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     Representa una operación de ordenación aplicada a los elementos del conjunto de entrada especificado según las claves de ordenación dadas. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     Obtiene el <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     Obtiene una lista de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> que define el criterio de ordenación. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     Representa la conversión de tipo de un único argumento al tipo especificado. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     Tipo base abstracto para las expresiones que aceptan un solo operando de expresión </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     Obtiene la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define el argumento. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     Representa la operación de unión de conjuntos (sin eliminación de duplicados) entre los operandos izquierdo y derecho. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Representa una operación de actualización de una sola fila expresada como un árbol de comandos.Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" />.</summary>
      <param name="metadata">Modelo sobre el que operará este comando.</param>
      <param name="dataSpace">Espacio de datos.</param>
      <param name="target">La tabla de destino de la operación del lenguaje de manipulación de datos (DML).</param>
      <param name="predicate">Un predicado que se usa para determinar qué miembros de la colección de destino deberían actualizarse.</param>
      <param name="setClauses">La lista de cláusulas set de actualización que definen la operación de actualización.</param>
      <param name="returning">Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica una proyección de los resultados que van a devolverse, en función de las filas modificadas.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>Obtiene la clase de este árbol de comandos.</summary>
      <returns>La clase de este árbol de comandos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el predicado que se usa para determinar qué miembros de la colección de destino deben actualizarse.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el predicado que se usa para determinar qué miembros de la colección de destino se deben actualizar.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Obtiene un objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica una proyección de los resultados que se van a devolver, tomando como base las filas modificadas.</summary>
      <returns>Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica una proyección de los resultados que van a devolverse, en función de las filas modificadas.Si es null, indica que no debe devolverse ningún resultado desde este comando.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Obtiene la lista de cláusulas set de actualización que definen la operación de actualización.</summary>
      <returns>La lista de cláusulas set de actualización que definen la operación de actualización.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     Representa una referencia a una variable que está actualmente en el ámbito. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que no generan un valor de resultado. </summary>
      <param name="visitor"> Instancia de DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Método de modelo Visitor para los visitantes de expresiones que generan un valor de resultado de un tipo específico. </summary>
      <param name="visitor"> Instancia de una clase DbExpressionVisitor con tipo que produce un valor de resultado de tipo TResultType. </param>
      <typeparam name="TResultType">     Tipo del resultado producido por visitor</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     Obtiene el nombre de la variable a la que se hace referencia. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>Visita todos los elementos de un árbol de expresión desde una expresión raíz determinada.Si cambia cualquier elemento, el árbol se recompilará hasta la raíz y se devolverá la nueva expresión raíz; de lo contrario, se devolverá la expresión raíz original.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Representa un evento al entrar al ámbito del visitante de expresiones con variables de ámbito especificadas.</summary>
      <param name="scopeVariables">La colección de variables de ámbito.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>Sale del ámbito del visitante de expresiones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Sustituye la antigua expresión por una nueva para el visitante de expresiones.</summary>
      <param name="oldExpression">La antigua expresión.</param>
      <param name="newExpression">La nueva expresión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Representa un evento cuando vuelve a enlazarse la variable del visitante de expresiones.</summary>
      <param name="fromVarRef">Ubicación de la variable.</param>
      <param name="toVarRef">La referencia de la variable en la que vuelve a enlazarse.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Implementa el modelo Visitor de la expresión lógica AND.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbAndExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Implementa el modelo Visitor de la invocación de la función especificada de cada elemento del conjunto de entradas especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbApplyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Implementa el modelo Visitor de la operación aritmética aplicada a los argumentos numéricos.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbArithmeticExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Implementa el modelo Visitor de las cláusulas When, Then y Else.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbCaseExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Implementa el modelo Visitor de la conversión de tipo de un único argumento al tipo especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbCastExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Implementa el modelo Visitor de la operación de comparación aplicada a dos argumentos.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbComparisonExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Implementa el modelo Visitor de los diferentes tipos de constantes.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbConstantExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Implementa el modelo Visitor de la operación de combinación incondicional entre los argumentos de colección especificados.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbCrossJoinExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Implementa el modelo Visitor de la expresión que recupera una entidad basada en la referencia especificada.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbDerefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Implementa el modelo Visitor de los elementos duplicados eliminados del argumento del conjunto especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbDistinctExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Implementa el modelo Visitor de la conversión del argumento del conjunto especificado a un singleton.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbElementExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Implementa el modelo Visitor de la expresión que extrae una referencia de la instancia de la entidad subyacente.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbEntityRefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Implementa el modelo Visitor de la operación de resta de conjuntos entre los operandos izquierdo y derecho.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbExceptExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implementa el modelo Visitor de la funcionalidad básica requerida por los tipos de expresiones.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Implementa el modelo Visitor de un predicado aplicado para filtrar un conjunto de entradas.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbFilterExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Implementa el modelo Visitor de la invocación de una función.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbFunctionExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Implementa el modelo Visitor de un grupo por operación.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbGroupByExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Implementa el modelo Visitor de DbInExpression.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbInExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Implementa el modelo Visitor de la operación de intersección de conjuntos entre los operandos izquierdo y derecho.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbIntersectExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Implementa el modelo Visitor de una determinación de conjunto vacío aplicada a un único argumento de conjunto.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbIsEmptyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Implementa el modelo Visitor de la determinación NULL aplicada a un único argumento de conjunto.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbIsNullExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Implementa el modelo Visitor de la comparación de tipo de un único argumento con el tipo especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbIsOfExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Implementa el modelo Visitor de una operación de combinación interna, externa izquierda o externa completa entre los argumentos de colección indicados en la condición de combinación especificada.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbJoinExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Implementa el modelo Visitor de la aplicación de una función lambda a argumentos representados por objetos DbExpression.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbLambdaExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Implementa el modelo Visitor de una comparación de cadenas con el modelo especificado y con una cadena de escape opcional.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbLikeExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Implementa el modelo Visitor de la restricción del número de elementos de la colección de argumentos al valor de límite especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbLimitExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Implementa el modelo Visitor de la construcción de una instancia nueva de un tipo dado, incluidos los tipos de registro y de establecimiento.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbNewInstanceExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Implementa el modelo Visitor de la expresión lógica NOT de un único argumento booleano.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbNotExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Implementa el modelo Visitor de la referencia a un literal NULL escrito.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbNullExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Implementa el modelo Visitor para la recuperación de los elementos del tipo especificado en el argumento del conjunto especificado.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbOfTypeExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Implementa el modelo Visitor de la expresión lógica OR de dos argumentos booleanos.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbOrExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Implementa el modelo Visitor de la referencia a un parámetro declarado en el árbol de comandos que contiene esta expresión.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbParameterReferenceExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Implementa el modelo Visitor de la proyección de un determinado conjunto de entradas sobre la expresión especificada.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbProjectExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Implementa el modelo Visitor para la recuperación de una propiedad de instancia.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbPropertyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Implementa el modelo Visitor de una operación de cuantificador del tipo especificado sobre los elementos de un determinado conjunto de entradas.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbQuantifierExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Implementa el modelo Visitor de una referencia muy sólida a una instancia específica dentro de un conjunto de entidades.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbRefExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Implementa el modelo Visitor para la recuperación del valor de la clave desde el valor de referencia subyacente.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbRefKeyExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Implementa el modelo Visitor de la navegación de una relación.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbRelationshipNavigationExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Implementa el modelo Visitor del examen de un conjunto de entidades o de relaciones, tal y como indica la propiedad Target.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbScanExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Implementa el modelo Visitor de la expresión Skip.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbSkipExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Implementa el modelo Visitor de una clave de ordenación que puede utilizarse como parte del criterio de ordenación.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbSortExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Implementa el modelo Visitor de una operación de conversión de tipo aplicada a un argumento polimórfico.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbTreatExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Implementa el modelo Visitor de la operación de unión de conjuntos entre los operandos izquierdo y derecho.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbUnionAllExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Implementa el modelo Visitor de una referencia a una variable que está actualmente en el ámbito.</summary>
      <returns>El visitante implementado.</returns>
      <param name="expression">DbVariableReferenceExpression que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Implementa el modelo Visitor del agregado.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="aggregate">Agregado que se va a visitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Implementa el modelo Visitor del conjunto de entidades.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="entitySet">Conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Implementa el modelo Visitor de la expresión.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="expression">Expresión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Implementa el modelo Visitor del enlace de la expresión.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="binding">Expresión que se va a enlazar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Implementa el modelo Visitor de la lista de enlaces de expresión.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="list">La lista de enlaces de expresión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Implementa el modelo Visitor de la lista de expresiones.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="list">La lista de expresiones.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Implementa el modelo Visitor de la función.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="functionMetadata">Los metadatos de la función.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>Implementa el modelo Visitor del agregado de la función.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="aggregate">El agregado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>Implementa el modelo Visitor del agregado del grupo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="aggregate">El agregado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Implementa el modelo Visitor del enlace de expresiones del grupo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="binding">El enlace.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Implementa el modelo Visitor de la función Lambda.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="lambda">La función lambda.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>Implementa el modelo Visitor de la cláusula de ordenación.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="clause">La cláusula de ordenación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Implementa el modelo Visitor del criterio de ordenación.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="sortOrder">El criterio de ordenación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Implementa el modelo Visitor del tipo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="type">El tipo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Implementa el modelo Visitor del uso del tipo.</summary>
      <returns>El modelo Visitor implementado.</returns>
      <param name="type">El tipo.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>Proporciona una API para construir <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> y permite obtener acceso a esa API como métodos de extensión en el propio tipo de expresión.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.</summary>
      <returns>Nuevo agregado de función con una referencia a la función y el argumento especificados.La propiedad Distinct del agregado de función tendrá el valor false.</returns>
      <param name="function">Función que define la operación de agregado.</param>
      <param name="argument">Argumento sobre el que se debe calcular la función de agregado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> o <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is not an aggregate function or has more than one argument, or the result type of <paramref name="argument" /> is not equal or promotable to the parameter type of <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> que se aplica de modo distinto.</summary>
      <returns>Nuevo agregado de función con una referencia a la función y el argumento especificados.La propiedad Distinct del agregado de función tendrá el valor true.</returns>
      <param name="function">Función que define la operación de agregado.</param>
      <param name="argument">Argumento sobre el que se debe calcular la función de agregado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> o <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is not an aggregate function or has more than one argument, or the result type of <paramref name="argument" /> is not equal or promotable to the parameter type of <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> que determina si el predicado definido se aplica a todos los elementos del conjunto de entrada.</summary>
      <returns>Nueva DbQuantifierExpression que representa la operación All.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Método que representa un predicado que se va a evaluar para cada miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado booleano que proporcione la lógica del predicado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="predicate" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not have a collection result type.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> que determina si el predicado definido se aplica a todos los elementos del conjunto de entrada.</summary>
      <returns>Nueva DbQuantifierExpression que representa la operación All.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Expresión que representa un predicado que se va a evaluar para cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> que realiza la operación lógica And de los argumentos izquierdo y derecho.</summary>
      <returns>Nueva DbAndExpression con los argumentos especificados.</returns>
      <param name="left">Expresión booleana que especifica el argumento izquierdo.</param>
      <param name="right">Expresión booleana que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> o <paramref name="right" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que determina si el argumento de conjunto especificado no está vacío.</summary>
      <returns>Nueva <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> que se aplica a una nueva <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> con el argumento especificado.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> que determina si el predicado definido se aplica a cualquier elemento del conjunto de entrada.</summary>
      <returns> Nueva DbQuantifierExpression que representa la operación Any. </returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Método que representa el predicado que se va a evaluar para cada miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado booleano que proporcione la lógica del predicado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="predicate" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not have a collection result type.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> que determina si el predicado definido se aplica a cualquier elemento del conjunto de entrada.</summary>
      <returns>Nueva DbQuantifierExpression que representa la operación Any.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Expresión que representa un predicado que se va a evaluar para cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>Devuelve los argumentos especificados como objeto de par clave-valor.</summary>
      <returns>Un objeto de par clave-valor.</returns>
      <param name="value">El valor del par clave-valor.</param>
      <param name="alias">La clave del par clave-valor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Devuelve los argumentos especificados como objeto de par clave-valor.</summary>
      <returns>Un objeto de par clave-valor.</returns>
      <param name="value">El valor del par clave-valor.</param>
      <param name="alias">La clave del par clave-valor.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que usa un nombre de variable generado para enlazar la expresión especificada.</summary>
      <returns>Nuevo enlace de expresión con la expresión especificada y un nombre de variable generado.</returns>
      <param name="input">Expresión que se va a enlazar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que usa el nombre de variable especificado para enlazar la expresión dada.</summary>
      <returns>Nuevo enlace de expresión con la expresión y el nombre de variable especificados</returns>
      <param name="input">Expresión que se va a enlazar</param>
      <param name="varName">Nombre de variable que se debe usar para el enlace</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="varName" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Nueva DbCaseExpression con los casos especificados y el resultado predeterminado.</returns>
      <param name="whenExpressions">Lista de expresiones que proporcionan las condiciones para cada caso.</param>
      <param name="thenExpressions">Lista de expresiones que proporcionan el resultado de cada caso.</param>
      <param name="elseExpression">Expresión que define el resultado cuando no hay ningún caso coincidente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> o <paramref name="thenExpressions" /> es NULL o contiene NULL, o bien <paramref name="elseExpression" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> o <paramref name="thenExpressions" /> está vacío o <paramref name="whenExpressions" /> contiene una expresión con un tipo de resultado no booleano, o bien no existe un tipo de resultado común para todas las expresiones de <paramref name="thenExpressions" /> y <paramref name="elseExpression" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> que aplica una operación de conversión a un argumento polimórfico.</summary>
      <returns>Nueva DbCastExpression con el argumento y el tipo de destino especificados.</returns>
      <param name="argument">Argumento al que se debe aplicar la conversión.</param>
      <param name="toType">Metadatos de tipo que especifican el tipo al que se va a convertir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="toType" /> es null.</exception>
      <exception cref="T:System.ArgumentException">La conversión especificada no es válida.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> del tipo primitivo especificado con el valor constante dado.</summary>
      <returns>Nueva DbConstantExpression con el valor especificado y un tipo de resultado de <paramref name="constantType" />.</returns>
      <param name="constantType">Tipo del valor constante.</param>
      <param name="value">Valor constante que se va a representar.</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es una instancia de un tipo de constante válido, <paramref name="constantType" /> no representa un tipo primitivo, o bien <paramref name="value" /> es de un tipo primitivo diferente al representado mediante <paramref name="constantType" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> con el valor constante especificado.</summary>
      <returns>Nueva DbConstantExpression con el valor especificado.</returns>
      <param name="value">Valor constante que se va a representar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es una instancia de un tipo de constante válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="keyValues">Colección de objetos <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporcionan los valores de clave.Estas expresiones deben coincidir (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> es NULL, o bien <paramref name="keyValues" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="keyValues" /> no coincide con el recuento de miembros clave declarado por el tipo de elemento de <paramref name="entitySet" />, o bien <paramref name="keyValues" /> contiene una expresión con un tipo de resultado que es incompatible con el tipo de miembro clave correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="keyValues">Colección de objetos <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporcionan los valores de clave.Estas expresiones deben coincidir (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> es NULL, o bien <paramref name="keyValues" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="keyValues" /> no coincide con el recuento de miembros clave declarado por el tipo de elemento de <paramref name="entitySet" />, o bien <paramref name="keyValues" /> contiene una expresión con un tipo de resultado que es incompatible con el tipo de miembro clave correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica de un tipo dado en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="entityType">Tipo específico de la entidad a la que se hace referencia.Debe ser un tipo de entidad de la misma jerarquía que el tipo de elemento del conjunto de entidades.</param>
      <param name="keyValues">Colección de objetos <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporcionan los valores de clave.Estas expresiones deben coincidir (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> o <paramref name="entityType" /> es NULL, o bien <paramref name="keyValues" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> no pertenece a la misma jerarquía (un subtipo, un supertipo o el mismo tipo) que el tipo de elemento de <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="keyValues" /> no coincide con el recuento de miembros clave declarado por el tipo de elemento de <paramref name="entitySet" />, o bien <paramref name="keyValues" /> contiene una expresión con un tipo de resultado que es incompatible con el tipo de miembro clave correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica de un tipo dado en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="entityType">Tipo específico de la entidad a la que se hace referencia.Debe ser un tipo de entidad de la misma jerarquía que el tipo de elemento del conjunto de entidades.</param>
      <param name="keyValues">Colección de objetos <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporcionan los valores de clave.Estas expresiones deben coincidir (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> o <paramref name="entityType" /> es NULL, o bien <paramref name="keyValues" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> no pertenece a la misma jerarquía de tipos (un subtipo, un supertipo o el mismo tipo) que el tipo de elemento de <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="keyValues" /> no coincide con el recuento de miembros clave declarado por el tipo de elemento de <paramref name="entitySet" />, o bien <paramref name="keyValues" /> contiene una expresión con un tipo de resultado que es incompatible con el tipo de miembro clave correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.No se incluyen las filas para las que <paramref name="apply" /> se evalúa como un conjunto vacío.</summary>
      <returns>Nueva DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossApply.</returns>
      <param name="source">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada. </param>
      <param name="apply">Método que especifica la lógica que se va a evaluar una vez por cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="apply" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">El resultado de <paramref name="apply" /> contiene un nombre o expresión que es NULL.</exception>
      <exception cref="T:System.ArgumentException">El resultado de <paramref name="apply" /> contiene un nombre o expresión que no es válido en un enlace de expresión.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.No se incluyen las filas para las que <paramref name="apply" /> se evalúa como un conjunto vacío.</summary>
      <returns>Una nueva DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossApply.</returns>
      <param name="input">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada.</param>
      <param name="apply">Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica la lógica que se va a evaluar una vez por cada miembro del conjunto de entradas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="apply" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> que combina incondicionalmente los conjuntos especificados por la lista de enlaces de expresión de entrada.</summary>
      <returns>Nueva DbCrossJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossJoin, que representa la combinación incondicional de los conjuntos de entrada.</returns>
      <param name="inputs">Lista de enlaces de expresión que especifica los conjuntos de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> es NULL o contiene null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> contiene menos de dos enlaces de expresión.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> que recupera una entidad concreta dada una expresión de referencia.</summary>
      <returns>Nueva DbDerefExpression que recupera la entidad especificada</returns>
      <param name="argument">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que proporciona la referencia.Esta expresión debe tener un tipo de referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de referencia.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> que quita los duplicados del argumento de conjunto especificado.</summary>
      <returns>Nueva DbDistinctExpression que representa la operación distinct aplicada al argumento de conjunto especificado.</returns>
      <param name="argument">Expresión que define el conjunto sobre el que se va a realizar la operación distinct.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de referencia.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que divide el argumento izquierdo por el argumento derecho.</summary>
      <returns>Nueva DbArithmeticExpression que representa la operación de división.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico común entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> que convierte un conjunto en un singleton.</summary>
      <returns>DbElementExpression que representa la conversión del argumento de conjunto especificado en un singleton.</returns>
      <param name="argument">Expresión que especifica el conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de referencia.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que compara los argumentos izquierdo y derecho para ver si son iguales.</summary>
      <returns>Nueva DbComparisonExpression que representa la comparación de igualdad.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico común entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> que calcula la resta del argumento de conjunto derecho del argumento de conjunto izquierdo.</summary>
      <returns>Nueva DbExceptExpression que representa la diferencia entre el argumento izquierdo y el argumento derecho.</returns>
      <param name="left">Expresión que define el argumento de conjunto izquierdo.</param>
      <param name="right">Expresión que define el argumento de conjunto derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico común entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que determina si el argumento de conjunto especificado no está vacío.</summary>
      <returns>Nueva <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> que se aplica a una nueva <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> con el argumento especificado.</returns>
      <param name="argument">Expresión que especifica el conjunto de entrada</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> con el valor booleano false.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> que filtra los elementos del conjunto de entrada dado usando el predicado especificado.</summary>
      <returns>Nueva DbFilterExpression que produce el conjunto filtrado.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Expresión que representa un predicado que se va a evaluar para cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por las expresiones izquierda y derecha, según la condición de combinación definida, usando FullOuterJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de FullOuterJoin, que representa la operación de combinación externa completa aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada. </returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Método que representa la condición según la cual se va a combinar.Este método debe generar una expresión con un tipo de resultado booleano que proporciona la lógica de la condición de combinación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> o <paramref name="right" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por los enlaces de expresión izquierdo y derecho, según la condición de combinación definida, usando FullOuterJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de FullOuterJoin, que representa la operación de combinación externa completa aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Expresión que especifica la condición según la cual se va a combinar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> que recupera la referencia de la entidad especificada en formato estructural.</summary>
      <returns>Nueva DbEntityRefExpression que recupera una referencia a la entidad especificada.</returns>
      <param name="argument">Expresión que proporciona la entidad.Esta expresión debe tener un tipo de resultado de entidad.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de entidad.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> que recupera los valores de clave de la referencia especificada en formato estructural.</summary>
      <returns>Nueva DbRefKeyExpression que recupera los valores de clave de la referencia especificada.</returns>
      <param name="argument">Expresión que proporciona la referencia.Esta expresión debe tener un tipo de referencia con un tipo de elemento de entidad.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de entidad.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que determina si el argumento izquierdo es mayor que el argumento derecho.</summary>
      <returns>Nueva DbComparisonExpression que representa la comparación de mayor que.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que determina si el argumento izquierdo es mayor o igual que el argumento derecho.</summary>
      <returns>Nueva DbComparisonExpression que representa la comparación de mayor o igual que.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">Izquierda o derecha es NULL.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre izquierda y derecha.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> sobre el argumento especificado.</summary>
      <returns>Nuevo agregado de grupo que representa los elementos del grupo a los que hace referencia el argumento especificado.</returns>
      <param name="argument">Argumento sobre el que se va a realizar la operación de anidamiento</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un nuevo enlace de expresión de grupo que usa los nombres de variable y de variable de grupo generados para enlazar la expresión especificada.</summary>
      <returns>Nuevo enlace de expresión de grupo con la expresión especificada y un nombre de variable generado y un nombre de variable de grupo.</returns>
      <param name="input">Expresión que se va a enlazar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>Crea un nuevo <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> que usa el nombre de variable y los nombres de variable de grupo especificados para enlazar la expresión dada.</summary>
      <returns>Nuevo enlace de expresión de grupo con la expresión, el nombre de variable y el nombre de variable de grupo especificados.</returns>
      <param name="input">Expresión que se va a enlazar.</param>
      <param name="varName">Nombre de variable que se debe usar para el enlace.</param>
      <param name="groupVarName">Nombre de variable que debe usarse para hacer referencia al grupo cuando el nuevo enlace de la expresión de grupo se emplea en una expresión group-by.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> , <paramref name="varName" /> o <paramref name="groupVarName" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> que agrupa los elementos del conjunto de entrada según las claves de grupo especificadas y aplica los agregados dados.</summary>
      <returns>Nueva DbGroupByExpression con el conjunto de entrada, las claves de agrupamiento y los agregados especificados.</returns>
      <param name="input">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> que especifica el conjunto de entrada.</param>
      <param name="keys">Lista de pares cadena-expresión que definen las columnas de agrupación.</param>
      <param name="aggregates">Lista de expresiones que especifican los agregados que se van a aplicar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> o <paramref name="aggregates" /> es NULL, <paramref name="keys" /> contiene un nombre o expresión de columna clave NULL, o los agregados contienen un nombre de columna agregado NULL, o <paramref name="aggregate" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> y <paramref name="aggregates" /> están vacíos, o bien se especificó un nombre de columna no válido o duplicado.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> que busca si el resultado de la expresión especificada coincide con los resultados de las expresiones constantes de la lista especificada.</summary>
      <returns>Nueva DbInExpression con los argumentos especificados si la lista DbConstantExpression no está vacía; de lo contrario, una expresión constante false.</returns>
      <param name="expression">DbExpression con la que se debe buscar una coincidencia.</param>
      <param name="list">Una lista de DbConstantExpression para probar si existe alguna coincidencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="list" /> es null.</exception>
      <exception cref="T:System.ArgumentException">El tipo de resultado de <paramref name="expression" /> es diferente del tipo de resultado de una expresión de <paramref name="list" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por las expresiones izquierda y derecha, según la condición de combinación definida, usando InnerJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de InnerJoin, que representa la operación de combinación interna aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Método que representa la condición según la cual se va a combinar.Este método debe generar una expresión con un tipo de resultado booleano que proporciona la lógica de la condición de combinación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> o <paramref name="right" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por las expresiones izquierda y derecha, según la condición de combinación definida, usando InnerJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de InnerJoin, que representa la operación de combinación interna aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Expresión que especifica la condición según la cual se va a combinar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> que calcula la intersección de los argumentos de conjunto izquierdo y derecho.</summary>
      <returns>Nueva clase DbIntersectExpression que representa la intersección de los argumentos izquierdo y derecho.</returns>
      <param name="left">Expresión que define el argumento de conjunto izquierdo.</param>
      <param name="right">Expresión que define el argumento de conjunto derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o la derecha es <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado de colección común entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva expresión <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> que representa la aplicación de la función Lambda especificada a los argumentos dados.</summary>
      <returns>Nueva clase DbLambdaExpression que representa la aplicación de la función Lambda.</returns>
      <param name="lambda">Instancia de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> que representa la función Lambda que se va a aplicar.</param>
      <param name="arguments">Lista de expresiones que proporcionan los argumentos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> es NULL, o bien <paramref name="arguments" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="arguments" /> no es igual al número de variables declarado por <paramref name="lambda" />, o bien <paramref name="arguments" /> contiene una expresión que tiene un tipo de resultado que no es igual ni se puede promover al tipo de variable correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea una nueva expresión <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> que representa la aplicación de la función Lambda especificada a los argumentos dados.</summary>
      <returns>Nueva clase DbLambdaExpression que representa la aplicación de la función Lambda.</returns>
      <param name="lambda">Instancia de <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> que representa la función Lambda que se va a aplicar.</param>
      <param name="arguments">Expresiones que proporcionan los argumentos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> es NULL, o bien <paramref name="arguments" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="arguments" /> no es igual al número de variables declarado por <paramref name="lambda" />, o bien <paramref name="arguments" /> contiene una expresión que tiene un tipo de resultado que no es igual ni se puede promover al tipo de variable correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que representa la invocación de la función especificada con los argumentos dados.</summary>
      <returns>Nueva clase DbFunctionExpression que representa la invocación de la función.</returns>
      <param name="function">Metadatos para la función que se va a invocar.</param>
      <param name="arguments">Lista de expresiones que proporcionan los argumentos para la función.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> es NULL, o bien <paramref name="arguments" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="arguments" /> no es igual al número de variables declarado por <paramref name="function" />, o bien <paramref name="arguments" /> contiene una expresión que tiene un tipo de resultado que no es igual ni se puede promover al tipo de variable correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que representa la invocación de la función especificada con los argumentos dados.</summary>
      <returns>Nueva clase DbFunctionExpression que representa la invocación de la función.</returns>
      <param name="function">Metadatos para la función que se va a invocar.</param>
      <param name="arguments">Expresiones que proporcionan los argumentos para la función.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> es NULL, o bien <paramref name="arguments" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El recuento de <paramref name="arguments" /> no es igual al número de variables declarado por <paramref name="function" />, o bien <paramref name="arguments" /> contiene una expresión que tiene un tipo de resultado que no es igual ni se puede promover al tipo de variable correspondiente.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> que determina si el argumento de conjunto especificado es un conjunto vacío.</summary>
      <returns>Nueva clase DbIsEmptyExpression con el argumento especificado.</returns>
      <param name="argument">Expresión que especifica el conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> que determina si el argumento especificado es NULL.</summary>
      <returns>Nueva clase DbIsNullExpression con el argumento especificado.</returns>
      <param name="argument">Expresión que especifica el argumento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> tiene un tipo de resultado de la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> que determina si el argumento dado es del tipo especificado o un subtipo.</summary>
      <returns>Nueva clase DbIsOfExpression con la instancia y el tipo especificados, y el valor IsOf para DbExpressionKind.</returns>
      <param name="argument">Expresión que especifica la instancia.</param>
      <param name="type">Metadatos de tipo que especifican el tipo con el que debe compararse el tipo de resultado de la instancia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="type" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> no está en la misma jerarquía de tipos que el tipo de resultado de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva expresión <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> que determina si el argumento dado es del tipo especificado y solo de ese tipo (no un subtipo).</summary>
      <returns>Nueva clase DbIsOfExpression con la instancia y el tipo especificados, y el valor IsOfOnly para DbExpressionKind.</returns>
      <param name="argument">Expresión que especifica la instancia.</param>
      <param name="type">Metadatos de tipo que especifican el tipo con el que debe compararse el tipo de resultado de la instancia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="type" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> no está en la misma jerarquía de tipos que el tipo de resultado de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por las expresiones externas e internas, según una condición de igualdad entre las claves externa e interna especificadas, usando InnerJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de InnerJoin, que representa la operación de combinación interna aplicada a los conjuntos de entrada izquierdo y derecho bajo una condición de combinación que compara la igualdad de los valores de clave externa e interna.</returns>
      <param name="outer">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto externo.</param>
      <param name="inner">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto interno.</param>
      <param name="outerKey">Método que especifica cómo se debe derivar el valor de clave externa a partir de un elemento del conjunto externo.</param>
      <param name="innerKey">Método que especifica cómo se debe derivar el valor de clave interna a partir de un elemento del conjunto interno.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> o <paramref name="innerKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> o <paramref name="innerKey" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="outerKey" /> o <paramref name="innerKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">La expresión que genera <paramref name="outerKey" /> o <paramref name="innerKey" /> no es comparativo de igualdad.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> que proyecta el selector especificado sobre los conjuntos indicados por las expresiones externas e internas, combinadas una condición de igualdad entre las claves externa e interna especificadas, usando InnerJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbProjectExpression con el selector especificado como proyección y una nueva DbJoinExpression como entrada.La DbJoinExpression de entrada se crea con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de InnerJoin, que representa la operación de combinación interna aplicada a los conjuntos de entrada izquierdo y derecho bajo una condición de combinación que compara la igualdad de los valores de clave externa e interna.</returns>
      <param name="outer">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto externo.</param>
      <param name="inner">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto interno.</param>
      <param name="outerKey">Método que especifica cómo se debe derivar el valor de clave externa a partir de un elemento del conjunto externo.</param>
      <param name="innerKey">Método que especifica cómo se debe derivar el valor de clave interna a partir de un elemento del conjunto interno.</param>
      <param name="selector">Método que especifica cómo se debe derivar un elemento del conjunto de resultados a partir de los elementos de los conjuntos interno y externo.Este método debe generar una instancia de un tipo que sea compatible con Join y se pueda resolver en una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Los requisitos de compatibilidad con <paramref name="TSelector" /> se describen en las notas.</param>
      <typeparam name="TSelector">El tipo del selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> o <paramref name="selector" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> o <paramref name="inner" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="outerKey" /> o <paramref name="innerKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">El resultado de <paramref name="selector" /> es NULL después de la conversión a DbExpression.</exception>
      <exception cref="T:System.ArgumentException">Las expresiones que generan <paramref name="outerKey" /> y <paramref name="innerKey" /> no son compatibles de igualdad.</exception>
      <exception cref="T:System.ArgumentException">El resultado de <paramref name="selector" /> no es compatible con SelectMany.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> con la implementación de función Lambda insertada y los parámetros formales especificados.</summary>
      <returns>Nueva DbLambda que describe una función Lambda insertada con el cuerpo y los parámetros formales especificados</returns>
      <param name="body">Expresión que define la lógica de la función Lambda.</param>
      <param name="variables">Colección <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> que representa los parámetros formales para la función Lambda.Estas variables son válidas para su uso en la expresión <paramref name="body" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> es NULL o contiene NULL, o <paramref name="body" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> contiene más de un elemento con el mismo nombre de variable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> con la implementación de función Lambda insertada y los parámetros formales especificados.</summary>
      <returns>Nueva DbLambda que describe una función Lambda insertada con el cuerpo y los parámetros formales especificados.</returns>
      <param name="body">Expresión que define la lógica de la función Lambda</param>
      <param name="variables">Colección <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> que representa los parámetros formales para la función Lambda.Estas variables son válidas para su uso en la expresión body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> es NULL o contiene NULL, o <paramref name="body" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> contiene más de un elemento con el mismo nombre de variable.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por las expresiones izquierda y derecha, según la condición de combinación definida, usando LeftOuterJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de LeftOuterJoin, que representa la operación de combinación externa izquierda aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Método que representa la condición según la cual se va a combinar.Este método debe generar una expresión con un tipo de resultado booleano que proporciona la lógica de la condición de combinación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> o <paramref name="right" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> que combina los conjuntos especificados por los enlaces de expresión derecho, según la condición de combinación definida, usando LeftOuterJoin como <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Nueva clase DbJoinExpression, con un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de LeftOuterJoin, que representa la operación de combinación externa izquierda aplicada a los conjuntos de entrada izquierdo y derecho bajo la condición de combinación especificada.</returns>
      <param name="left">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto izquierdo.</param>
      <param name="right">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el argumento de conjunto derecho.</param>
      <param name="joinCondition">Expresión que especifica la condición según la cual se va a combinar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> , <paramref name="right" /> o <paramref name="joinCondition" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que determina si el argumento izquierdo es menor que el argumento derecho.</summary>
      <returns>Nueva clase DbComparisonExpression que representa la comparación de menor que.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que determina si el argumento izquierdo es menor o igual que el argumento derecho.</summary>
      <returns>Nueva clase DbComparisonExpression que representa la comparación de menor o igual que.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> que compara la cadena de entrada especificada con el modelo definido.</summary>
      <returns>Nueva clase DbLikeExpression con la entrada y el modelo especificados, y un escape NULL.</returns>
      <param name="argument">Expresión que especifica la cadena de entrada.</param>
      <param name="pattern">Expresión que especifica la cadena de modelo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> o <paramref name="pattern" /> no tiene un tipo de resultado de cadena.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> que compara la cadena de entrada especificada con el modelo dado usando el escape opcional.</summary>
      <returns>Nueva clase DbLikeExpression con la entrada, el modelo y el escape especificados.</returns>
      <param name="argument">Expresión que especifica la cadena de entrada.</param>
      <param name="pattern">Expresión que especifica la cadena de modelo.</param>
      <param name="escape">Expresión opcional que especifica la cadena de escape.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> o el escape es <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />, <paramref name="pattern" /> o el escape no tiene un tipo de resultado de cadena.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> que restringe el número de elementos de la colección de argumentos al valor de límite de recuento especificado.Los resultados equivalentes no se incluyen en el resultado.</summary>
      <returns>Nueva clase DbLimitExpression con el argumento y los valores límite de recuento especificados que no incluye resultados equivalentes.</returns>
      <param name="argument">Una expresión que especifica la colección de entrada.</param>
      <param name="count">Expresión que especifica el valor de límite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="count" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección, o bien <paramref name="count" /> no tiene ningún tipo de resultado que sea igual o se pueda promover a un tipo entero de 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que resta el argumento derecho del argumento izquierdo.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de resta.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que calcula el resto del argumento izquierdo dividido por el argumento derecho.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de módulo.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que multiplica el argumento izquierdo por el argumento derecho.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de multiplicación.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuyo orden se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> que representa la navegación de una relación de composición o asociación.</summary>
      <returns>Nueva clase DbRelationshipNavigationExpression que representa la navegación de los extremos de relación de origen y de destino especificados del tipo de relación indicado desde la instancia de origen de navegación especificada.</returns>
      <param name="navigateFrom">Expresión que especifica la instancia desde la que debería producirse la navegación.</param>
      <param name="fromEnd">Metadatos de la propiedad que representan el extremo de la relación desde la que debería realizarse la navegación.</param>
      <param name="toEnd">Metadatos de la propiedad que representan el extremo de la relación hasta la cual debe realizarse la navegación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" /> , <paramref name="toEnd" /> o <paramref name="NavigateForm" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">El mismo tipo de relación no declara <paramref name="fromEnd" /> ni <paramref name="toEnd" />, o <paramref name="navigateFrom" /> tiene un tipo de resultado que no es compatible con el tipo de propiedad de <paramref name="fromEnd" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> que representa la navegación de una relación de composición o asociación.</summary>
      <returns>Nueva clase DbRelationshipNavigationExpression que representa la navegación de los extremos de relación de origen y de destino especificados del tipo de relación indicado desde la instancia de origen de navegación especificada.</returns>
      <param name="type">Metadatos para el tipo de relación que representa la relación.</param>
      <param name="fromEndName">Nombre de la propiedad del tipo de relación que representa el extremo de la relación desde el cual debería realizarse la navegación.</param>
      <param name="toEndName">Nombre de la propiedad del tipo de relación que representa el extremo de la relación hacia el cual debería realizarse la navegación.</param>
      <param name="navigateFrom">Expresión que especifica la instancia desde la que debería producirse la navegación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" /> , <paramref name="toEndName" /> o <paramref name="NavigateForm" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> no está asociado al área de trabajo de metadatos de este árbol de comandos, o bien <paramref name="navigateFrom" /> está asociado a un árbol de comandos diferente, o bien <paramref name="type" /> no declara una propiedad de fin de relación con nombre <paramref name="toEndName" /> o <paramref name="fromEndName" />, o bien <paramref name="navigateFrom" /> tiene un tipo de resultado que no es compatible con <paramref name="fromEndName" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que niega el valor del argumento.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de negación.</returns>
      <param name="argument">Expresión que especifica el argumento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico para <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Si el argumento de tipo es un tipo de colección, los argumentos especifican los elementos de la colección.De lo contrario, los argumentos se usan como valores de propiedad o de columna en la nueva instancia.</summary>
      <returns>Nueva clase DbNewInstanceExpression con el argumento y los argumentos especificados.</returns>
      <param name="instanceType">Tipo de la nueva instancia.</param>
      <param name="arguments">Expresiones que especifican valores de las nuevas instancias, interpretados según el tipo de la instancia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> o <paramref name="arguments" /> es NULL, o bien <paramref name="arguments" /> contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> está vacío o los tipos de resultados de las expresiones incluidas no coinciden con los requisitos de <paramref name="instanceType" />. Vea la sección de notas para obtener más información.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Si el argumento de tipo es un tipo de colección, los argumentos especifican los elementos de la colección.De lo contrario, los argumentos se usan como valores de propiedad o de columna en la nueva instancia.</summary>
      <returns>Nueva clase DbNewInstanceExpression con el argumento y los argumentos especificados.</returns>
      <param name="instanceType">Tipo de la nueva instancia.</param>
      <param name="arguments">Expresiones que especifican valores de las nuevas instancias, interpretados según el tipo de la instancia.</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> o <paramref name="arguments" /> es NULL, o bien <paramref name="arguments" /> contiene NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> que construye una colección que contiene los elementos especificados.El tipo de la colección se basa en el tipo común de los elementos.Si no existe ningún tipo de elemento común, se inicia una excepción.</summary>
      <returns>Nueva clase DbNewInstanceExpression con el tipo de colección y los argumentos especificados.</returns>
      <param name="elements">Lista de expresiones que proporcionan los elementos de la colección</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> está vacío o contiene expresiones para las cuales no existe ningún tipo de resultado común.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> que construye una colección que contiene los elementos especificados.El tipo de la colección se basa en el tipo común de los elementos.Si no existe ningún tipo de elemento común, se inicia una excepción.</summary>
      <returns>Nueva clase DbNewInstanceExpression con el tipo de colección y los argumentos especificados.</returns>
      <param name="elements">Lista de expresiones que proporcionan los elementos de la colección</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> es NULL o contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> está vacío o contiene expresiones para las cuales no existe ningún tipo de resultado común.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> que construye una colección vacía del tipo de colección especificado.</summary>
      <returns>Nueva clase DbNewInstanceExpression con el tipo de colección especificada y una lista de Arguments vacía.</returns>
      <param name="collectionType">Metadatos de tipo para la colección que se va a crear</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> no es un tipo de colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> que genera una fila con las columnas con nombre especificadas y los valores definidos, especificados como expresiones.</summary>
      <returns>Nueva clase DbNewInstanceExpression que representa la construcción de la fila.</returns>
      <param name="columnValues">Lista de pares clave-valor cadena-DbExpression que define la estructura y los valores de la fila.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> es NULL o contiene un elemento con un nombre de columna o expresión .</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> está vacío o contiene un nombre de columna duplicado o no válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> que realiza la negación lógica del argumento especificado.</summary>
      <returns>Nueva DbNotExpression con el argumento especificado.</returns>
      <param name="argument">Expresión booleana que especifica el argumento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">argumento no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> que compara los argumentos izquierdo y derecho para ver si son distintos.</summary>
      <returns>Nueva DbComparisonExpression que representa la comparación de desigualdad.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado cuya igualdad pueda compararse entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, que representa un valor NULL con tipo.</summary>
      <returns>Una instancia de DbNullExpression.</returns>
      <param name="nullType">Tipo del valor NULL.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> que genera un conjunto que consta de los elementos del conjunto de entrada especificado que son del tipo indicado.</summary>
      <returns>Una nueva clase DbOfTypeExpression con el argumento de conjunto y el tipo especificados, y una ExpressionKind de <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />.</returns>
      <param name="argument">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada.</param>
      <param name="type">Metadatos del tipo que deben tener los elementos del conjunto de entrada para poder incluirlos en el conjunto resultante.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="type" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección <paramref name="type" />, o bien el tipo no pertenece a la misma jerarquía de tipos que el tipo de elemento del tipo de resultado de la colección de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> que genera un conjunto que consta de los elementos del conjunto de entrada especificado que son exactamente del tipo indicado.</summary>
      <returns>Una nueva clase DbOfTypeExpression con el argumento de conjunto y el tipo especificados, y una ExpressionKind de <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />.</returns>
      <param name="argument">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada.</param>
      <param name="type">Metadatos del tipo con el que deben coincidir exactamente los elementos del conjunto de entrada para poder incluirlos en el conjunto resultante.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="type" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección <paramref name="type" />, o bien el tipo no pertenece a la misma jerarquía de tipos que el tipo de elemento del tipo de resultado de la colección de <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> que realiza la operación lógica Or de los argumentos izquierdo y derecho. </summary>
      <returns> Nueva clase DbOrExpression con los argumentos especificados. </returns>
      <param name="left"> Expresión booleana que especifica el argumento izquierdo. </param>
      <param name="right"> Expresión booleana que especifica el argumento derecho. </param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, que ordena el conjunto de entrada dado según la clave de ordenación especificada, en sentido ascendente y con la intercalación predeterminada.</summary>
      <returns>Nueva clase DbSortExpression que representa la operación order by.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="sortKey" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de orden comparativo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> que ordena el conjunto de entrada dado según el criterio de ordenación especificada, con sentido de ordenación ascendente y la intercalación especificada.</summary>
      <returns>Nueva clase DbSortExpression que representa la operación order by.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> , <paramref name="sortKey" /> o <paramref name="collation" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de cadena de orden comparativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> que ordena el conjunto de entrada dado según la clave de ordenación especificada, con sentido de ordenación descendente y la intercalación predeterminada.</summary>
      <returns>Nueva clase DbSortExpression que representa la operación order by.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="sortKey" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de cadena de orden comparativo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> que ordena el conjunto de entrada dado según la clave de ordenación especificada, con sentido de ordenación descendente y la intercalación predeterminada.</summary>
      <returns>Nueva clase DbSortExpression que representa la operación order by.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> , <paramref name="sortKey" /> o <paramref name="collation" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de cadena de orden comparativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.Las filas para las que <paramref name="apply" /> se evalúa como un conjunto que tienen un valor de columna apply de null.</summary>
      <returns>Nueva clase DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de OuterApply.</returns>
      <param name="source">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada.</param>
      <param name="apply">Método que especifica la lógica que se va a evaluar una vez por cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="apply" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentNullException">El resultado de apply contiene un nombre o expresión que es NULL.</exception>
      <exception cref="T:System.ArgumentException">El resultado de apply contiene un nombre o expresión que no es válido en un enlace de expresión.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.Las filas para las que <paramref name="apply" /> se evalúa como un conjunto que tienen un valor de columna apply de null.</summary>
      <returns>Nueva clase DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de OuterApply.</returns>
      <param name="input">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica el conjunto de entrada.</param>
      <param name="apply">Un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> que especifica la lógica que se va a evaluar una vez por cada miembro del conjunto de entradas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="apply" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> que hace referencia a un parámetro con el nombre y el tipo especificados.</summary>
      <returns>Una clase DbParameterReferenceExpression que representa una referencia a un parámetro con el nombre y el tipo especificados; el tipo de resultado de la expresión será el mismo que <paramref name="type" />.</returns>
      <param name="type">Tipo del parámetro al que se hace referencia</param>
      <param name="name">Nombre del parámetro al que se hace referencia</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que suma el argumento izquierdo al argumento derecho.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de suma.</returns>
      <param name="left">Expresión que especifica el argumento izquierdo.</param>
      <param name="right">Expresión que especifica el argumento derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico común entre izquierda y derecha.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> que proyecta la expresión especificada sobre el conjunto de entrada dado.</summary>
      <returns>Nueva clase DbProjectExpression que representa la operación de proyección.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="projection">Expresión que se va a proyectar sobre el conjunto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="projection" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> que representa la recuperación de la propiedad especificada.</summary>
      <returns>Nueva clase DbPropertyExpression que representa la recuperación de la propiedad.</returns>
      <param name="instance">Instancia desde la que se va a recuperar la propiedad.Puede ser NULL si la propiedad es estática.</param>
      <param name="propertyMetadata">Metadatos de la propiedad que se va a recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> es NULL, o bien <paramref name="instance" /> es NULL y la propiedad no es estática.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> que representa la recuperación de la propiedad de navegación especificada.</summary>
      <returns>Nueva clase DbPropertyExpression que representa la recuperación de la propiedad de navegación.</returns>
      <param name="instance">Instancia desde la que se va a recuperar la propiedad de navegación.</param>
      <param name="navigationProperty">Metadatos de la propiedad de navegación que se va a recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> es NULL, o bien <paramref name="instance" /> es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> que representa la recuperación del miembro del extremo de la relación especificado.</summary>
      <returns>Nueva clase DbPropertyExpression que representa la recuperación del miembro del extremo de la relación.</returns>
      <param name="instance">Instancia desde la que se va a recuperar el miembro del extremo de la relación.</param>
      <param name="relationshipEnd">Metadatos del miembro del extremo de la relación que se va a recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> es NULL, o bien <paramref name="instance" /> es NULL y la propiedad no es estática.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> que representa la recuperación de la propiedad de instancia con el nombre especificado de la instancia dada.</summary>
      <returns>Nueva clase DbPropertyExpression que representa la recuperación de la propiedad</returns>
      <param name="instance">Instancia desde la que se va a recuperar la propiedad.</param>
      <param name="propertyName">Nombre de la propiedad que se va a recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> es NULL, o bien <paramref name="instance" /> es NULL y la propiedad no es estática.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">No se declara ninguna propiedad con el nombre especificado por el tipo de <paramref name="instance" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="keyRow">Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que construye un registro con columnas que coinciden (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> o <paramref name="keyRow" /> es null.</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> que codifica una referencia a una entidad específica en función de valores de clave.</summary>
      <returns>Nueva DbRefExpression que hace referencia al elemento con los valores de clave especificados en el conjunto de entidades indicado.</returns>
      <param name="entitySet">Conjunto de entidades en el que reside el elemento al que se hace referencia.</param>
      <param name="keyRow">Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que construye un registro con columnas que coinciden (en número, tipo y orden) con las propiedades de clave del tipo de entidad al que se hace referencia.</param>
      <param name="entityType">Tipo de la entidad a la que se debe hacer referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> , <paramref name="keyRow" /> o <paramref name="entityType" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> no está en la misma jerarquía de tipos que el tipo de entidad del conjunto de entidades, o bien <paramref name="keyRow" /> no tiene un tipo de resultado de registro que coincida con las propiedades clave del tipo de entidad del conjunto de entidades.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> que hace referencia a la entidad o el conjunto de relaciones especificados.</summary>
      <returns>Nueva clase DbScanExpression basada en la entidad o el conjunto de relaciones especificados.</returns>
      <param name="targetSet">Metadatos de la entidad o el conjunto de relaciones al que se va a hacer referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> que selecciona la expresión especificada sobre el conjunto de entrada dado.</summary>
      <returns> Nueva clase DbProjectExpression que representa la operación de selección. </returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="projection">Método que especifica cómo derivar la expresión proyectada dado un miembro del conjunto de entrada.Este método debe generar una instancia de un tipo que sea compatible con Select y se pueda resolver en una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Los requisitos de compatibilidad con <paramref name="TProjection" /> se describen en las notas.</param>
      <typeparam name="TProjection">Tipo de resultado del método de <paramref name="projection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="projection" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">El resultado de <paramref name="projection" /> es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.No se incluyen las filas para las que <paramref name="apply" /> se evalúa como un conjunto vacío.A continuación, se crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> que selecciona el <paramref name="selector" /> especificado de cada fila, generando la colección total de resultados.</summary>
      <returns>Una nueva clase DbProjectExpression que selecciona la columna apply desde una nueva DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossApply.</returns>
      <param name="source">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada.</param>
      <param name="apply">Método que representa la lógica que se va a evaluar una vez por cada miembro del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="apply" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="apply" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="apply" /> no tiene un tipo de colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> que evalúa la expresión <paramref name="apply" /> especificada una vez por cada elemento de un determinado conjunto de entradas, generando una colección de filas con las columnas input y apply correspondientes.No se incluyen las filas para las que <paramref name="apply" /> se evalúa como un conjunto vacío.A continuación, se crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> que selecciona el <paramref name="selector" /> especificado de cada fila, generando la colección total de resultados.</summary>
      <returns>Una nueva clase DbProjectExpression que selecciona el resultado del selector dado desde una nueva DbApplyExpression con los enlaces input y apply especificados, y un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> de CrossApply.</returns>
      <param name="source">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que especifica el conjunto de entrada.</param>
      <param name="apply">Método que representa la lógica que se va a evaluar una vez por cada miembro del conjunto de entrada.</param>
      <param name="selector">Método que especifica cómo se debe derivar un elemento del conjunto de resultados, dado un elemento de los conjuntos input y apply.Este método debe generar una instancia de un tipo que sea compatible con SelectMany y que pueda resolverse en una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Los requisitos de compatibilidad con <paramref name="TSelector" /> se describen en las notas.</param>
      <typeparam name="TSelector">Tipo de resultado del método de <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> , <paramref name="apply" /> o <paramref name="selector" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="apply" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">El resultado de <paramref name="selector" /> es NULL después de la conversión a DbExpression.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="apply" /> no tiene un tipo de colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> que ordena el conjunto de entrada dado según las especificaciones de ordenación indicadas antes de omitir el número especificado de elementos.</summary>
      <returns>Nueva clase DbSkipExpression que representa la operación skip.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="sortOrder">Lista de especificaciones de ordenación que determinan cómo se deben ordenar los elementos del conjunto de entrada.</param>
      <param name="count">Expresión que especifica cuántos elementos del conjunto ordenado se van a omitir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> o <paramref name="count" /> es NULL, o bien <paramref name="sortOrder" /> contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> está vacío, o bien <paramref name="count" /> no es <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> ni <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />, o bien tiene un tipo de resultado que no es igual a un tipo entero de 64 bits ni puede convertirse en dicho tipo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> que omite el número especificado de elementos del conjunto de entrada ordenado dado.</summary>
      <returns>Nueva clase DbSkipExpression que representa la operación skip.</returns>
      <param name="argument">Clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> que especifica el conjunto de entrada ordenado.</param>
      <param name="count">Una expresión que especifica cuántos elementos del conjunto ordenado se van a omitir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="count" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> no es <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> ni <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />, o bien tiene un tipo de resultado que no es igual a un tipo entero de 64 bits ni puede convertirse en dicho tipo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> que ordena el conjunto de entrada dado según las especificaciones de ordenación determinadas.</summary>
      <returns>Nueva clase DbSortExpression que representa la operación sort.</returns>
      <param name="input">Enlace de expresión que especifica el conjunto de entrada.</param>
      <param name="sortOrder">Lista de especificaciones de ordenación que determinan cómo se deben ordenar los elementos del conjunto de entrada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="sortOrder" /> es NULL, o bien <paramref name="sortOrder" /> contiene NULL.</exception>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="sortOrder" /> está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> que restringe el número de elementos de la colección de argumentos al valor de límite de recuento especificado.Los resultados equivalentes no se incluyen en el resultado.</summary>
      <returns>Nueva clase DbLimitExpression con el argumento y los valores límite de recuento especificados que no incluye resultados equivalentes.</returns>
      <param name="argument">Una expresión que especifica la colección de entrada.</param>
      <param name="count">Expresión que especifica el valor de límite.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="count" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> no tiene un tipo de resultado de la colección, o bien <paramref name="count" /> no tiene ningún tipo de resultado que sea igual o se pueda promover a un tipo entero de 64 bits.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> con un orden que incluye el criterio de ordenación del conjunto de entrada de ordenación dado junto con el criterio de ordenación especificado, con sentido de ordenación ascendente y la intercalación predeterminada.</summary>
      <returns>Nueva clase DbSortExpression que representa la nueva operación global order-by.</returns>
      <param name="source">Clase DbSortExpression que especifica el conjunto de entrada ordenado.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación adicional, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="sortKey" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de orden comparativo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> con un orden que incluye el criterio de ordenación del conjunto de entrada de ordenación dado junto con el criterio de ordenación especificado, con sentido de ordenación ascendente y la intercalación especificada.</summary>
      <returns>Nueva clase DbSortExpression que representa la nueva operación global order-by.</returns>
      <param name="source">Clase DbSortExpression que especifica el conjunto de entrada ordenado.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación adicional, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> o <paramref name="collation" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de cadena de orden comparativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> con un orden que incluye el criterio de ordenación del conjunto de entrada de ordenación dado junto con el criterio de ordenación especificado, con sentido de ordenación descendente y la intercalación predeterminada.</summary>
      <returns>Nueva clase DbSortExpression que representa la nueva operación global order-by.</returns>
      <param name="source">Clase DbSortExpression que especifica el conjunto de entrada ordenado.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación adicional, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="sortKey" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de orden comparativo.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> con un orden que incluye el criterio de ordenación del conjunto de entrada de ordenación dado junto con el criterio de ordenación especificado, con sentido de ordenación descendente y la intercalación especificada.</summary>
      <returns>Nueva clase DbSortExpression que representa la nueva operación global order-by.</returns>
      <param name="source">Clase DbSortExpression que especifica el conjunto de entrada ordenado.</param>
      <param name="sortKey">Método que especifica cómo derivar la expresión de criterio de ordenación adicional, dado un miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado de orden comparable que proporcione la definición del criterio de ordenación.</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> , <paramref name="sortKey" /> o <paramref name="collation" /> es NULL.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="sortKey" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> no tiene un tipo de resultado de la colección.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="sortKey" /> no tiene un tipo de resultado de cadena de orden comparativo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> con un criterio de ordenación ascendente y la intercalación predeterminada.</summary>
      <returns>Una nueva cláusula de ordenación con el criterio de ordenación especificado y sentido de ordenación ascendente.</returns>
      <param name="key">Expresión que define el criterio de ordenación</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> no tiene un tipo de resultado con comparación de orden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> con un criterio de ordenación ascendente y la intercalación especificada.</summary>
      <returns>Nueva cláusula de ordenación con el criterio de ordenación y la intercalación especificados, y sentido de ordenación ascendente</returns>
      <param name="key">Expresión que define el criterio de ordenación</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> no tiene un tipo de resultado con comparación de orden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> con un criterio de ordenación descendente y la intercalación predeterminada</summary>
      <returns>Nueva cláusula de ordenación con el criterio de ordenación especificado y sentido de ordenación descendente</returns>
      <param name="key">Expresión que define el criterio de ordenación</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> no tiene un tipo de resultado con comparación de orden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> con un criterio de ordenación descendente y la intercalación especificada.</summary>
      <returns>Nueva cláusula de ordenación con el criterio de ordenación y la intercalación especificados, y sentido de ordenación descendente</returns>
      <param name="key">Expresión que define el criterio de ordenación</param>
      <param name="collation">Intercalación por la que se va a ordenar</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> está vacío o solo contiene caracteres de espacios en blanco.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> no tiene un tipo de resultado con comparación de orden.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>Nueva clase DbTreatExpression con el argumento y el tipo especificados.</returns>
      <param name="argument">Expresión que especifica la instancia.</param>
      <param name="treatType">Metadatos del tipo como el que se debe tratar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> o <paramref name="treatType" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> no está en la misma jerarquía de tipos que el tipo de resultado de <paramref name="argument" />.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> con el valor booleano true.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> que niega el valor del argumento.</summary>
      <returns>Nueva clase DbArithmeticExpression que representa la operación de negación.</returns>
      <param name="argument">Expresión que especifica el argumento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado numérico para <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que calcula la unión de los argumentos de conjunto izquierdo y derecho con los duplicados quitados.</summary>
      <returns>Nueva clase DbExpression que calcula la unión, sin duplicados, de los argumentos de conjunto izquierdo y derecho.</returns>
      <param name="left">Expresión que define el argumento de conjunto izquierdo.</param>
      <param name="right">Expresión que define el argumento de conjunto derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado de colección común con un tipo de elemento cuya igualdad se pueda comparar entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> que calcula la unión de los argumentos de conjunto izquierdo y derecho, y no quita los duplicados.</summary>
      <returns>Nueva clase DbUnionAllExpression que calcula la unión, incluidos los duplicados, de los argumentos de conjunto izquierdo y derecho.</returns>
      <param name="left">Expresión que define el argumento de conjunto izquierdo.</param>
      <param name="right">Expresión que define el argumento de conjunto derecho.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> o <paramref name="right" /> es null.</exception>
      <exception cref="T:System.ArgumentException">No existe ningún tipo de resultado de colección común entre <paramref name="left" /> y <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> que hace referencia a una variable con el nombre y el tipo especificados.</summary>
      <returns>Clase DbVariableReferenceExpression que representa una referencia a una variable con el nombre y el tipo especificados; el tipo de resultado de la expresión será el mismo que <paramref name="type" />.</returns>
      <param name="type">Tipo de la variable a la que se hace referencia</param>
      <param name="name">Nombre de la variable a la que se hace referencia</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> que filtra los elementos del conjunto de entrada dado usando el predicado especificado.</summary>
      <returns>Nueva DbQuantifierExpression que representa la operación Any.</returns>
      <param name="source">Expresión que especifica el conjunto de entrada.</param>
      <param name="predicate">Método que representa el predicado que se va a evaluar para cada miembro del conjunto de entrada.Este método debe generar una expresión con un tipo de resultado booleano que proporcione la lógica del predicado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> o <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.ArgumentNullException">La expresión generada por <paramref name="predicate" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">La expresión generada por <paramref name="predicate" /> no tiene un tipo de resultado booleano.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>Proporciona una API para construir clases <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que invocan funciones de EDM canónicas y permite obtener acceso a esa API como métodos de extensión en el propio tipo de expresión.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Abs' con el argumento especificado, que debe tener un tipo de resultados numérico.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor absoluto de <paramref name="value" />.</returns>
      <param name="value">Expresión que especifica el valor numérico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Abs' acepta un argumento con el tipo de resultados de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddDays' con los argumentos especificados, que deben tener tipos de resultados DateTime o DateTimeOffset y entero.El tipo de resultados de la expresión es igual que el de <paramref name="dateValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de días especificado por <paramref name="addValue" /> al valor especificado por <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de días que se van a sumar a <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddDays' acepta argumentos con los tipos de resultados de <paramref name="dateValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddHours' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de horas especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de horas que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddHours' acepta argumentos con los tipos de resultados de <paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddMicroseconds' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de microsegundos especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de microsegundos que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddMicroseconds' acepta argumentos con los tipos de resultados de <paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddMilliseconds' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time, y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de milisegundos especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de milisegundos que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddMilliseconds' acepta argumentos con los tipos de resultados de <paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddMinutes' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de minutos especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de minutos que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddMinutes' acepta argumentos con los tipos de resultados de <paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddMonths' con los argumentos especificados, que deben tener tipos de resultados DateTime o DateTimeOffset y entero.El tipo de resultados de la expresión es igual que el de <paramref name="dateValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de meses especificado por <paramref name="addValue" /> al valor especificado por <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de meses que se van a sumar a <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddMonths' acepta argumentos con los tipos de resultados de <paramref name="dateValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddNanoseconds' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de nanosegundos especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de nanosegundos que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddNanoseconds' acepta argumentos con los tipos de resultados de <paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddSeconds' con los argumentos especificados, que deben tener tipos de resultados DateTime, DateTimeOffset o Time y entero.El tipo de resultados de la expresión es igual que el de <paramref name="timeValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de segundos especificado por <paramref name="addValue" /> al valor especificado por <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de segundos que se van a sumar a <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddSeconds' acepta argumentos con los tipos de resultados de<paramref name="timeValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AddYears' con los argumentos especificados, que deben tener tipos de resultados DateTime o DateTimeOffset y entero.El tipo de resultados de la expresión es igual que el de <paramref name="dateValue" />.</summary>
      <returns>Una nueva clase DbFunctionExpression que suma el número de años especificado por <paramref name="addValue" /> al valor especificado por <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor al que se debe sumar <paramref name="addValue" />.</param>
      <param name="addValue">Expresión que especifica el número de años que se van a sumar a <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> o <paramref name="addValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'AddYears' acepta argumentos con los tipos de resultados de <paramref name="dateValue" /> y <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Avg' en la colección especificada.El tipo de resultado de la expresión es el mismo que el tipo de elemento de la colección.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor promedio.</returns>
      <param name="collection">Una expresión que especifica la colección cuyo valor promedio debe calcularse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Avg' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'BitwiseAnd' con los argumentos especificados, que deben tener el mismo tipo de resultados numérico entero.El tipo de resultados de la expresión es de este mismo tipo.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor obtenido al realizar la operación AND bit a bit de <paramref name="value1" /> y de <paramref name="value2" />.</returns>
      <param name="value1">Expresión que especifica el primer operando.</param>
      <param name="value2">Expresión que especifica el segundo operando.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> o <paramref name="value2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'BitwiseAnd' acepta argumentos con los tipos de resultados de <paramref name="value1" /> y <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'BitwiseNot' con el argumento especificado, que debe tener un tipo de resultados numérico entero.El tipo de resultados de la expresión es de este mismo tipo.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor obtenido al realizar la operación NOT bit a bit de <paramref name="value" />.</returns>
      <param name="value">Expresión que especifica el primer operando.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'BitwiseNot' acepta argumentos con los tipos de resultados de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'BitwiseOr' con los argumentos especificados, que deben tener el mismo tipo de resultados numérico entero.El tipo de resultados de la expresión es de este mismo tipo.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor obtenido al realizar la operación OR bit a bit de <paramref name="value1" /> y de <paramref name="value2" />.</returns>
      <param name="value1">Expresión que especifica el primer operando.</param>
      <param name="value2">Expresión que especifica el segundo operando.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> o <paramref name="value2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'BitwiseOr' acepta argumentos con los tipos de resultados de <paramref name="value1" /> y <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'BitwiseXor' con los argumentos especificados, que deben tener el mismo tipo de resultados numérico entero.El tipo de resultados de la expresión es de este mismo tipo.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor obtenido al realizar la operación XOR (OR excluyente) bit a bit de <paramref name="value1" /> y de <paramref name="value2" />.</returns>
      <param name="value1">Expresión que especifica el primer operando.</param>
      <param name="value2">Expresión que especifica el segundo operando.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> o <paramref name="value2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'BitwiseXor' acepta argumentos con los tipos de resultados de <paramref name="value1" /> y <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Ceiling' con el argumento especificado, que debe tener un tipo de resultados single, double o decimal.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el menor valor entero no es menor que <paramref name="value" />.</returns>
      <param name="value">Expresión que especifica el valor numérico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Ceiling' acepta un argumento con el tipo de resultados de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Concat' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es de cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que produce la cadena concatenada.</returns>
      <param name="string1">Expresión que especifica la cadena que debe aparecer en primer lugar en la cadena de resultados concatenada.</param>
      <param name="string2">Expresión que especifica la cadena que debe aparecer en segundo lugar en la cadena de resultados concatenada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> o <paramref name="string2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Concaty' acepta argumentos con el tipo de resultados de <paramref name="string1" /> y de <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Contains' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es booleano.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si <paramref name="searchedForString" /> se produce o no dentro de <paramref name="searchedString" />.</returns>
      <param name="searchedString">Expresión que especifica la cadena en la que se va a buscar cualquier aparición de <paramref name="searchedForString" />.</param>
      <param name="searchedForString">Expresión que especifica la cadena que se va a buscar en <paramref name="searchedString" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> o <paramref name="searchedForString" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Contains' acepta argumentos con el tipo de resultados de <paramref name="searchedString" /> y <paramref name="searchedForString" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Count' en la colección especificada.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de recuento.</returns>
      <param name="collection">Expresión que especifica la colección en la que se debe calcular el valor de recuento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Count' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CreateDateTime' con los argumentos especificados.<paramref name="second" /> debe tener un tipo de resultados de Edm.Double, mientras todos los demás argumentos deben tener un tipo de resultados de Edm.Int32.El tipo de resultado de la expresión es Edm.DateTime.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor DateTime en función de los valores especificados.</returns>
      <param name="year">Expresión que proporciona el valor de año para la nueva instancia de DateTime.</param>
      <param name="month">Expresión que proporciona el valor de mes para la nueva instancia de DateTime.</param>
      <param name="day">Expresión que proporciona el valor de día para la nueva instancia de DateTime.</param>
      <param name="hour">Expresión que proporciona el valor de hora para la nueva instancia de DateTime.</param>
      <param name="minute">Expresión que proporciona el valor de minuto para la nueva instancia de DateTime.</param>
      <param name="second">Expresión que proporciona el valor de segundo para la nueva instancia de DateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'CreateDateTime' acepta argumentos con los tipos de resultados de <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> y <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CreateDateTimeOffset' con los argumentos especificados.<paramref name="second" /> debe tener un tipo de resultados de Edm.Double, mientras todos los demás argumentos deben tener un tipo de resultados de Edm.Int32.El tipo de resultado de la expresión es Edm.DateTimeOffset.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor DateTimeOffset en función de los valores especificados.</returns>
      <param name="year">Expresión que proporciona el valor de año para la nueva instancia de DateTimeOffset.</param>
      <param name="month">Expresión que proporciona el valor de mes para la nueva instancia de DateTimeOffset.</param>
      <param name="day">Expresión que proporciona el valor de día para la nueva instancia de DateTimeOffset.</param>
      <param name="hour">Expresión que proporciona el valor de hora para la nueva instancia de DateTimeOffset.</param>
      <param name="minute">Expresión que proporciona el valor de minuto para la nueva instancia de DateTimeOffset.</param>
      <param name="second">Expresión que proporciona el valor de segundo para la nueva instancia de DateTimeOffset.</param>
      <param name="timeZoneOffset">Expresión que proporciona el número de minutos del valor de ajuste de zona horaria para la nueva instancia de DateTimeOffset.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> o <paramref name="timeZoneOffset" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'CreateDateTimeOffset' acepta argumentos con el tipo de resultados de <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> y <paramref name="timeZoneOffset" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CreateTime' con los argumentos especificados.<paramref name="second" /> debe tener un tipo de resultados de Edm.Double, mientras todos los demás argumentos deben tener un tipo de resultados de Edm.Int32.El tipo de resultado de la expresión es Edm.Time.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor Time en función de los valores especificados.</returns>
      <param name="hour">Expresión que proporciona el valor de hora para la nueva instancia de DateTime.</param>
      <param name="minute">Expresión que proporciona el valor de minuto para la nueva instancia de DateTime.</param>
      <param name="second">Expresión que proporciona el valor de segundo para la nueva instancia de DateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />, <paramref name="minute" /> o <paramref name="second" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'CreateTime' acepta argumentos con el tipo de resultados de <paramref name="hour" />, <paramref name="minute" /> y <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CurrentDateTime'.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la fecha y la hora actuales como una instancia de Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CurrentDateTimeOffset'.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la fecha y la hora actuales como una instancia de Edm.DateTimeOffset.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CurrentUtcDateTime'.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la fecha y la hora UTC actuales como una instancia de Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Day' con el argumento especificado, que debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de día entero de <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor del que se debe recuperar el día.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Day' acepta argumentos con el tipo de resultados de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DayOfYear' con el argumento especificado, que debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de año desde <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor del que se debe recuperar el día del año.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DayOfYear' acepta argumentos con el tipo de resultados de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffDays' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de <paramref name="dateValue1" /> debe coincidir con el tipo de resultado de <paramref name="dateValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de días entre <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expresión que especifica el primer valor DateTime o DateTimeOffset.</param>
      <param name="dateValue2">Expresión que especifica el valor DateTime o DateTimeOffset para el que se debe calcular la diferencia en días con respecto a <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> o <paramref name="dateValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffDays' acepta argumentos con los tipos de resultados de <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffHours' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de horas entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en horas con respecto a <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffHours' acepta argumentos con los tipos de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffMicroseconds' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de microsegundos entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en microsegundos con respecto a <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffMicroseconds' acepta argumentos con el tipo de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffMilliseconds' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de milisegundos entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en milisegundos con respecto a <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffMilliseconds' acepta argumentos con el tipo de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffMinutes' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de minutos entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en minutos con respecto a <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffMinutes' acepta argumentos con los tipos de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffMonths' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de <paramref name="dateValue1" /> debe coincidir con el tipo de resultado de <paramref name="dateValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de meses entre <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expresión que especifica el primer valor DateTime o DateTimeOffset.</param>
      <param name="dateValue2">Expresión que especifica el valor DateTime o DateTimeOffset para el que se debe calcular la diferencia en meses con respecto a <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> o <paramref name="dateValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffMonths' acepta argumentos con los tipos de resultados de <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffNanoseconds' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de nanosegundos entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en nanosegundos con respecto a <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffNanoseconds' acepta argumentos con los tipos de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffSeconds' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de <paramref name="timeValue1" /> debe coincidir con el tipo de resultado de <paramref name="timeValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de segundos entre <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Expresión que especifica el primer valor DateTime, DateTimeOffset o Time.</param>
      <param name="timeValue2">Expresión que especifica el valor DateTime, DateTimeOffset o Time para el que se debe calcular la diferencia en segundos con respecto a <paramref name="timeValue1" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> o <paramref name="timeValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffSeconds' acepta argumentos con los tipos de resultados de <paramref name="timeValue1" /> y <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'DiffYears' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de <paramref name="dateValue1" /> debe coincidir con el tipo de resultado de <paramref name="dateValue2" />.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la diferencia de años entre <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Expresión que especifica el primer valor DateTime o DateTimeOffset.</param>
      <param name="dateValue2">Expresión que especifica el valor DateTime o DateTimeOffset para el que se debe calcular la diferencia en años con respecto a <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> o <paramref name="dateValue2" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'DiffYears' acepta argumentos con los tipos de resultados de <paramref name="dateValue1" /> y <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'EndsWith' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es booleano.</summary>
      <returns>Nueva clase DbFunctionExpression que indica si <paramref name="stringArgument" /> acaba en <paramref name="suffix" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena en la que se va a comprobar el valor <paramref name="suffix" />. especificado.</param>
      <param name="suffix">Expresión que especifica el sufijo cuyo <paramref name="stringArgument" /> debe comprobarse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> o <paramref name="suffix" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'EndsWith' acepta argumentos con los tipos de resultados de <paramref name="stringArgument" /> y <paramref name="suffix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Floor' con el argumento especificado, que debe tener un tipo de resultados single, double o decimal.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el mayor valor entero que no es mayor que <paramref name="value" />.</returns>
      <param name="value">Expresión que especifica el valor numérico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Floor' acepta un argumento con el tipo de resultados de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GetTotalOffsetMinutes' con el argumento especificado, que debe tener un tipo de resultados DateTimeOffset.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el número de minutos que <paramref name="dateTimeOffsetArgument" /> está desplazado respecto a GMT.</returns>
      <param name="dateTimeOffsetArgument">Expresión que especifica el valor DateTimeOffset del que se debe recuperar el desplazamiento de minutos respecto a GMT.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'GetTotalOffsetMinutes' acepta un argumento con el tipo de resultados de <paramref name="dateTimeOffsetArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Hour' con el argumento especificado, que debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de hora entero de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor del que se debe recuperar la hora.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Hours' acepta argumentos con los tipo de resultados de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IndexOf' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el primer índice de <paramref name="stringToFind" /> en <paramref name="searchString" />.</returns>
      <param name="searchString">Expresión que especifica la cadena que se va a buscar en <paramref name="stringToFind" />.</param>
      <param name="stringToFind">Expresión que especifica que se debe comprobar la cadena que se va a buscar dentro de <paramref name="searchString" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> o <paramref name="stringToFind" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'IndexOf' acepta argumentos con los tipos de resultados de <paramref name="searchString" /> y <paramref name="stringToFind" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Left' con los argumentos especificados, que deben tener un tipo de resultados numérico entero y de cadena.El tipo de resultados de la expresión es de cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la subcadena situada más a la izquierda con la longitud <paramref name="length" /> desde <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena de la que se va a extraer la subcadena situada más a la izquierda.</param>
      <param name="length">Expresión que especifica la longitud de la subcadena situada más a la izquierda que se va a extraer de <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> o <paramref name="length" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Left' acepta argumentos con los tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Length' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la longitud de <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena para la que se debe calcular la longitud.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Length' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'BigCount' en la colección especificada.El tipo de resultado de la expresión es Edm.Int64.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de recuento.</returns>
      <param name="collection">Expresión que especifica la colección en la que se debe calcular el valor de recuento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'BigCount' acepta argumentos con los tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Max' en la colección especificada.El tipo de resultado de la expresión es el mismo que el tipo de elemento de la colección.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor máximo.</returns>
      <param name="collection">Expresión que especifica la colección cuyo valor máximo se debe recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Max' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Millisecond' con el argumento especificado, que debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de milisegundo entero de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor del que se debe recuperar el milisegundo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Millisecond' acepta un argumento con el tipo de resultados de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Min' en la colección especificada.El tipo de resultado de la expresión es el mismo que el tipo de elemento de la colección.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor mínimo.</returns>
      <param name="collection">Expresión que especifica la colección cuyo valor mínimo se debe recuperar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Min' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Minute' con el argumento especificado, que debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de minutos entero de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor del que se debe recuperar el minuto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Minute' acepta un argumento con el tipo de resultados de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Month' con el argumento especificado, que debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de mes entero de <paramref name="dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor del que se debe recuperar el mes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Month' acepta un argumento con el tipo de resultados de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'NewGuid'.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor GUID.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Power' con los argumentos especificados, que deben tener tipos de resultados numéricos.El tipo de resultados de la expresión es igual que el de <paramref name="baseArgument" />.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="baseArgument" /> elevado a la potencia especificada por <paramref name="exponent" />.</returns>
      <param name="baseArgument">Expresión que especifica el valor numérico que se va a elevar a la potencia indicada.</param>
      <param name="exponent">Expresión que especifica la potencia a la que se debe elevar <paramref name="baseArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> o <paramref name="exponent" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Power' acepta argumentos con los tipos de resultados de <paramref name="baseArgument" /> y <paramref name="exponent" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Replace' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve una nueva cadena en función de <paramref name="stringArgument" />, donde todas las apariciones de <paramref name="toReplace" /> se sustituyen por <paramref name="replacement" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena en la que se va a realizar la operación de reemplazo.</param>
      <param name="toReplace">Expresión que especifica la cadena que se va a reemplazar.</param>
      <param name="replacement">Expresión que especifica la cadena de reemplazo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="toReplace" /> o <paramref name="replacement" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Replace' acepta argumentos con los tipos de resultados de <paramref name="stringArgument" />, <paramref name="toReplace" /> y <paramref name="replacement" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Reverse' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor inverso de <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena que se va a invertir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Reverse' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Right' con los argumentos especificados, que deben tener un tipo de resultados numérico entero y de cadena.El tipo de resultados de la expresión es de cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la subcadena situada más a la derecha con la longitud <paramref name="length" /> desde <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena de la que se va a extraer la subcadena situada más a la derecha.</param>
      <param name="length">Expresión que especifica la longitud de la subcadena situada más a la derecha que se va a extraer de <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> o <paramref name="length" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Right' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Round' con el argumento especificado, que debe tener un tipo de resultados single, double o decimal.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que redondea el argumento especificado al valor entero más cercano.</returns>
      <param name="value">Expresión que especifica el valor numérico que ser va a redondear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Round' acepta un argumento con el tipo de resultados de <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Round' con los argumentos especificados, que deben tener tipos de resultados single, double o decimal y entero.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que redondea el argumento especificado al valor entero más próximo, con la precisión especificada por <paramref name="digits" />.</returns>
      <param name="value">Expresión que especifica el valor numérico que ser va a redondear.</param>
      <param name="digits">Expresión que especifica el número de dígitos de precisión que se va a usar para el redondeo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> o <paramref name="digits" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Round' acepta argumentos con los tipos de resultados de <paramref name="value" /> y <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Second' con el argumento especificado, que debe tener un tipo de resultados DateTime, DateTimeOffset o Time.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de segundo entero de <paramref name="timeValue" />.</returns>
      <param name="timeValue">Expresión que especifica el valor del que se debe recuperar el segundo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Second' acepta un argumento con el tipo de resultado de <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'StartsWith' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es booleano.</summary>
      <returns>Nueva clase DbFunctionExpression que indica si <paramref name="stringArgument" /> empieza por <paramref name="prefix" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena en la que se va a comprobar el valor <paramref name="prefix" />. especificado.</param>
      <param name="prefix">Expresión que especifica el prefijo cuyo <paramref name="stringArgument" /> debe comprobarse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> o <paramref name="prefix" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'StartsWith acepta argumentos con los tipos de resultados de <paramref name="stringArgument" /> y <paramref name="prefix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'StDev' en los miembros de la colección especificada que no son NULL.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de desviación estándar de los miembros de la colección que no son NULL.</returns>
      <param name="collection">Expresión que especifica la colección cuya desviación típica debe calcularse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'StDev' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'StDevP' en el rellenado de la colección especificada.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de desviación estándar.</returns>
      <param name="collection">Expresión que especifica la colección cuya desviación típica debe calcularse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'StDevP' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Substring' con los argumentos especificados, que deben tener un tipo de resultados numérico entero y de cadena.El tipo de resultados de la expresión es de cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la subcadena con la longitud <paramref name="length" /> desde <paramref name="stringArgument" /> empezando por <paramref name="start" />.</returns>
      <param name="stringArgument">Expresión que especifica la cadena de la que se va a extraer la subcadena.</param>
      <param name="start">Expresión que especifica el índice inicial del que se debe tomar la subcadena.</param>
      <param name="length">Expresión que especifica la longitud de la subcadena.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="start" /> o <paramref name="length" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Substring' acepta argumentos con los tipos de resultado de <paramref name="stringArgument" />, <paramref name="start" /> y <paramref name="length" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Sum' en la colección especificada.El tipo de resultado de la expresión es el mismo que el tipo de elemento de la colección.</summary>
      <returns>Nueva clase DbFunctionExpression que produce la suma.</returns>
      <param name="collection">Expresión que especifica la colección cuya suma se debe calcular.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Sum' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'ToLower' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="stringArgument" /> convertido a minúsculas.</returns>
      <param name="stringArgument">Expresión que especifica la cadena que se debe convertir en minúsculas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'ToLower' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'ToUpper' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="stringArgument" /> convertido a mayúsculas.</returns>
      <param name="stringArgument">Expresión que especifica la cadena que se debe convertir a mayúsculas.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'ToUpper' acepta un argumento con el tipo de resultado de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Trim' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="stringArgument" /> al que se han quitado los espacios inicial y final.</returns>
      <param name="stringArgument">Expresión que especifica la cadena cuyo espacio inicial y final se debe quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Trim' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'RTrim' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="stringArgument" /> al que se ha quitado el espacio final.</returns>
      <param name="stringArgument">Expresión que especifica la cadena cuyo espacio final se debe quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'RTrim' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'LTrim' con el argumento especificado, que debe tener un tipo de resultados de cadena.El tipo de resultados de la expresión es también una cadena.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="stringArgument" /> al que se ha quitado el espacio inicial.</returns>
      <param name="stringArgument">Expresión que especifica la cadena cuyo espacio inicial se debe quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'LTrim' acepta un argumento con el tipo de resultados de <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Truncate' con los argumentos especificados, que deben tener tipos de resultados single, double o decimal y entero.El tipo de resultados de la expresión es igual que el de <paramref name="value" />.</summary>
      <returns>Nueva clase DbFunctionExpression que trunca el argumento especificado al valor entero más cercano, con la precisión especificada por <paramref name="digits" />.</returns>
      <param name="value">Expresión que especifica el valor numérico que se va a truncar.</param>
      <param name="digits">Expresión que especifica el número de dígitos de precisión que se va a usar para truncar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> o <paramref name="digits" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Truncate' acepta argumentos con los tipos de resultados de <paramref name="value" /> y <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'TruncateTime' con el argumento especificado, que debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultados de la expresión es igual que el de <paramref name="dateValue" />.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de <paramref name="dateValue" /> con la hora puesta a cero.</returns>
      <param name="dateValue">Expresión que especifica el valor para el que se debe truncar la parte de hora.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'TruncateTime' acepta un argumento con el tipo de resultados de <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Var' en los miembros de la colección especificada que no son NULL.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de varianza estadística de los miembros de la colección que no son NULL.</returns>
      <param name="collection">Expresión que especifica la colección cuya varianza estadística debe calcularse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Var' acepta un argumento con el tipo de resultados de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'VarP' en el rellenado de la colección especificada.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que produce el valor de varianza estadística.</returns>
      <param name="collection">Expresión que especifica la colección cuya varianza estadística debe calcularse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'VarP' acepta un argumento con el tipo de resultado de <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Year' con el argumento especificado, que debe tener un tipo de resultados DateTime o DateTimeOffset.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de año entero de <paramref name=" dateValue" />.</returns>
      <param name="dateValue">Expresión que especifica el valor del que se debe recuperar el año.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ninguna sobrecarga de la función canónica 'Year' acepta un argumento con el tipo de resultado de <paramref name="dateValue" />.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Representa la clase Row está pensada para proporcionar un medio de llamada similar a un constructor; &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt;.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> con la primera columna especificado y los valores de columna sucesivos opcionales </summary>
      <param name="columnValue">Par clave-valor que proporciona la primera columna en la nueva instancia de fila (necesario).</param>
      <param name="columnValues">Pares clave-valor que proporcionan cualquier columna posterior en la nueva instancia de fila (opcional).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Convierte un objeto Row en <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que representa el objeto Row convertido.</returns>
      <param name="row">Objeto row.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>Crea una nueva clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> que construye una fila nueva basándose en las columnas contenidas en esta instancia de Row.</summary>
      <returns>Nueva clase DbNewInstanceExpression que construye una fila con los mismos nombres de columna y valores DbExpression que esta instancia de Row.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>Proporciona una API para construir clases <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que invocan funciones de EDM canónicas espaciales relacionadas y, cuando procede, permite obtener acceso a esa API como métodos de extensión en el propio tipo de expresión.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Area' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el área de spatialValue, o bien null si spatialValue no es una superficie.</returns>
      <param name="spatialValue">Expresión que especifica el valor de superficie espacial para el que se debe calcular el área.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AsBinary' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Binary.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la representación binaria conocida de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor espacial a partir del cual se debe generar la representación binaria conocida.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AsGml' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.String.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la representación del lenguaje de marcado de geografía (GML) de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor espacial a partir del cual se debe generar la representación del lenguaje de marcado de geografía (GML).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'AsText' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.String.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la representación de texto conocida de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor espacial a partir del cual se debe generar la representación de texto conocida.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Centroid' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el punto centroide de geometryValue (que puede no estar en la superficie propiamente dicha), o bien null si geometryValue no es una superficie.</returns>
      <param name="geometryValue">Expresión que especifica el valor de superficie de geometría del que se debe recuperar el centroide.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'CoordinateSystemId' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor SRID de entero de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor del que se debe recuperar el identificador del sistema de coordenadas (SRID).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Distance' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la distancia entre los puntos más cercanos de spatialValue1 y spatialValue1.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial del que se debe medir la distancia de spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Elevation' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de elevación de spatialValue, o bien null si spatialValue no es un punto.</returns>
      <param name="spatialValue">Expresión que especifica el valor del punto espacial del que se debe recuperar el valor de elevación (coordenada Z).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'EndPoint' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado es igual que el de spatialValue.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el punto final de spatialValue, o bien null si spatialValue no es una curva.</returns>
      <param name="spatialValue">Expresión que especifica el valor de curva espacial del que se debe recuperar el punto final.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'ExteriorRing' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el anillo exterior del polígono geometryValue, o bien null si geometryValue no es un polígono.</returns>
      <param name="geometryValue">Valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyCollectionFromBinary' con los argumentos especificados.geographyCollectionWellKnownBinaryValue debe tener un tipo de resultados binario, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de colección de geografía en función de los valores especificados.</returns>
      <param name="geographyCollectionWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de colección de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de colección de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyCollectionFromText' con los argumentos especificados.geographyCollectionWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de colección de geografía en función de los valores especificados.</returns>
      <param name="geographyCollectionWellKnownText">Expresión que proporciona la representación de texto conocida del valor de colección de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de colección de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromBinary' con el argumento especificado, que debe tener un tipo de resultado binario.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función del valor binario especificado.</returns>
      <param name="wellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromBinary' con los argumentos especificados.wellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función de los valores especificados.</returns>
      <param name="wellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromGml' con el argumento especificado, que debe tener un tipo de resultado de cadena.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función del valor especificado con el identificador del sistema de coordenadas (SRID) predeterminado del proveedor subyacente.</returns>
      <param name="geographyMarkup">Expresión que proporciona la representación del lenguaje de marcado de geografía (GML) del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromGml' con los argumentos especificados.geographyMarkup debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función de los valores especificados.</returns>
      <param name="geographyMarkup">Expresión que proporciona la representación del lenguaje de marcado de geografía (GML) del valor de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromText' con el argumento especificado, que debe tener un tipo de resultado de cadena.El tipo de resultado de la expresión es Edm.Geography.Su valor tiene el identificador del sistema de coordenadas (SRID) predeterminado del proveedor subyacente.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función del valor especificado.</returns>
      <param name="wellKnownText">Expresión que proporciona la representación de texto conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyFromText' con los argumentos especificados.wellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geografía en función de los valores especificados.</returns>
      <param name="wellKnownText">Expresión que proporciona la representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyLineFromBinary' con los argumentos especificados.lineWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de línea de geografía en función de los valores especificados.</returns>
      <param name="lineWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de línea de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de línea de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyLineFromText' con los argumentos especificados.lineWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de línea de geografía en función de los valores especificados.</returns>
      <param name="lineWellKnownText">Expresión que proporciona la representación de texto conocida del valor de línea de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de línea de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiLineFromBinary' con los argumentos especificados.multiLineWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multilínea de geografía en función de los valores especificados.</returns>
      <param name="multiLineWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multilínea de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multilínea de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiLineFromText' con los argumentos especificados.multiLineWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multilínea de geografía en función de los valores especificados.</returns>
      <param name="multiLineWellKnownText">Expresión que proporciona la representación de texto conocida del valor multilínea de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multilínea de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiPointFromBinary' con los argumentos especificados.multiPointWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipunto de geografía en función de los valores especificados.</returns>
      <param name="multiPointWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multipunto de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipunto de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiPointFromText' con los argumentos especificados.multiPointWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipunto de geografía en función de los valores especificados.</returns>
      <param name="multiPointWellKnownText">Expresión que proporciona la representación de texto conocida del valor multipunto de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipunto de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiPolygonFromBinary' con los argumentos especificados.multiPolygonWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipolígono de geografía en función de los valores especificados.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multipolígono de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipolígono de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyMultiPolygonFromText' con los argumentos especificados.multiPolygonWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipolígono de geografía en función de los valores especificados.</returns>
      <param name="multiPolygonWellKnownText">Expresión que proporciona la representación de texto conocida del valor multipolígono de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipolígono de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyPointFromBinary' con los argumentos especificados.pointWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de punto de geografía en función de los valores especificados.</returns>
      <param name="pointWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de punto de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del pointWellKnownBinaryValue del sistema de coordenadas del valor de punto de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyPointFromText' con los argumentos especificados.</summary>
      <returns>La función canónica 'GeographyPointFromText'.</returns>
      <param name="pointWellKnownText">Expresión que proporciona la representación de texto conocida del valor de punto de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del systempointWellKnownTextValue del sistema de coordenadas del valor de punto de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyPolygonFromBinary' con los argumentos especificados.polygonWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de polígono de geografía en función de los valores especificados.</returns>
      <param name="polygonWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de polígono de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de polígono de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeographyPolygonFromText' con los argumentos especificados.polygonWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geography.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de polígono de geografía en función de los valores especificados.</returns>
      <param name="polygonWellKnownText">Expresión que proporciona la representación de texto conocida del valor de polígono de geografía.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de polígono de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryCollectionFromBinary' con los argumentos especificados.geometryCollectionWellKnownBinaryValue debe tener un tipo de resultados binario, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de colección de geometría en función de los valores especificados.</returns>
      <param name="geometryCollectionWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de colección de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de colección de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryCollectionFromText' con los argumentos especificados.geometryCollectionWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de colección de geometría en función de los valores especificados.</returns>
      <param name="geometryCollectionWellKnownText">Expresión que proporciona la representación de texto conocida del valor de colección de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de colección de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromBinary' con el argumento especificado, que debe tener un tipo de resultado binario.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función del valor binario especificado.</returns>
      <param name="wellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromBinary' con los argumentos especificados.wellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función de los valores especificados.</returns>
      <param name="wellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromGml' con el argumento especificado, que debe tener un tipo de resultado de cadena.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función del valor especificado con el identificador del sistema de coordenadas (SRID) predeterminado del proveedor subyacente.</returns>
      <param name="geometryMarkup">Expresión que proporciona la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromGml' con los argumentos especificados.geometryMarkup debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función de los valores especificados.</returns>
      <param name="geometryMarkup">Expresión que proporciona la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromText' con el argumento especificado, que debe tener un tipo de resultado de cadena.El tipo de resultado de la expresión es Edm.Geometry.Su valor tiene el identificador del sistema de coordenadas (SRID) predeterminado del proveedor subyacente.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función del valor especificado.</returns>
      <param name="wellKnownText">Expresión que proporciona la representación de texto conocida del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryFromText' con los argumentos especificados.wellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de geometría en función de los valores especificados.</returns>
      <param name="wellKnownText">Expresión que proporciona la representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryLineFromBinary' con los argumentos especificados.lineWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de línea de geometría en función de los valores especificados.</returns>
      <param name="lineWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de línea de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de línea de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryLineFromText' con los argumentos especificados.lineWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de línea de geometría en función de los valores especificados.</returns>
      <param name="lineWellKnownText">Expresión que proporciona la representación de texto conocida del valor de línea de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de línea de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiLineFromBinary' con los argumentos especificados.multiLineWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multilínea de geometría en función de los valores especificados.</returns>
      <param name="multiLineWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multilínea de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multilínea de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiLineFromText' con los argumentos especificados.multiLineWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multilínea de geometría en función de los valores especificados.</returns>
      <param name="multiLineWellKnownText">Expresión que proporciona la representación de texto conocida del valor multilínea de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multilínea de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiPointFromBinary' con los argumentos especificados.multiPointWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipunto de geometría en función de los valores especificados.</returns>
      <param name="multiPointWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multipunto de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipunto de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiPointFromText' con los argumentos especificados.multiPointWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipunto de geometría en función de los valores especificados.</returns>
      <param name="multiPointWellKnownText">Expresión que proporciona la representación de texto conocida del valor multipunto de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipunto de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiPolygonFromBinary' con los argumentos especificados.multiPolygonWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipolígono de geometría en función de los valores especificados.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor multipolígono de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipolígono de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryMultiPolygonFromText' con los argumentos especificados.multiPolygonWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor multipolígono de geometría en función de los valores especificados.</returns>
      <param name="multiPolygonWellKnownText">Expresión que proporciona la representación de texto conocida del valor multipolígono de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor multipolígono de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryPointFromBinary' con los argumentos especificados.pointWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de punto de geometría en función de los valores especificados.</returns>
      <param name="pointWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de punto de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de punto de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryPointFromText' con los argumentos especificados.pointWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de punto de geometría en función de los valores especificados.</returns>
      <param name="pointWellKnownText">Expresión que proporciona la representación de texto conocida del valor de punto de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de punto de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryPolygonFromBinary' con los argumentos especificados.polygonWellKnownBinaryValue debe tener un tipo de resultados binario, mientras coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de polígono de geometría en función de los valores especificados.</returns>
      <param name="polygonWellKnownBinaryValue">Expresión que proporciona la representación binaria conocida del valor de polígono de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de polígono de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'GeometryPolygonFromText' con los argumentos especificados.polygonWellKnownText debe tener un tipo de resultados de cadena, mientras que coordinateSystemId debe tener un tipo de resultados numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un nuevo valor de polígono de geometría en función de los valores especificados.</returns>
      <param name="polygonWellKnownText">Expresión que proporciona la representación de texto conocida del valor de polígono de geometría.</param>
      <param name="coordinateSystemId">Expresión que proporciona el identificador del sistema de coordenadas (SRID) del sistema de coordenadas del valor de polígono de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'InteriorRingAt' con los argumentos especificados.El primer argumento debe tener un tipo de resultado Edm.Geometry.El segundo argumento debe tener un tipo de resultado numérico entero.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el anillo interior en la posición indexValue de geometryValue, o bien null si geometryValue no es un polígono.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <param name="indexValue">Expresión que especifica la posición del anillo interior que se va a recuperar del polígono.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'InteriorRingCount' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el número de anillos interiores del polígono geometryValue, o bien null si geometryValue no es un polígono.</returns>
      <param name="geometryValue">Valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IsClosedSpatial' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si spatialValue está cerrado, o bien null si spatialValue no es una curva.</returns>
      <param name="spatialValue">Expresión que especifica el valor de curva espacial del que se debe recuperar el valor IsClosedSpatial.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IsEmptySpatial' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si spatialValue está o no vacío.</returns>
      <param name="spatialValue">Expresión que especifica el valor espacial del que se debe recuperar el valor IsEmptySpatial.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IsRing' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue es un anillo (cerrado y simple), o bien null si geometryValue no es una curva.</returns>
      <param name="geometryValue">Expresión que especifica el valor de curva de geometría del que se debe recuperar el valor IsRing.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IsSimpleGeometry' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue es una geometría simple.</returns>
      <param name="geometryValue">Valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'IsValidGeometry' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue es válido.</returns>
      <param name="geometryValue">Expresión que especifica el valor de geometría para el que se debe comprobar la validez espacial.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Latitude' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor Latitude de geographyValue o, o bien null si geographyValue no es un punto.</returns>
      <param name="geographyValue">Expresión que especifica el valor de punto de geografía del que se debe recuperar el valor Latitude.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Longitude' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor Longitude de geographyValue o, o bien null si geometryValue no es un punto.</returns>
      <param name="geographyValue">Expresión que especifica el valor de punto de geografía del que se debe recuperar el valor Longitude.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'Measure' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la medida de spatialValue, o bien null si spatialValue no es un punto.</returns>
      <param name="spatialValue">Expresión que especifica el valor del punto espacial del que se debe recuperar el valor de coordenada de medida (M).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'PointAt' con los argumentos especificados.El primer argumento debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El segundo argumento debe tener un tipo de resultado numérico entero.El tipo de resultado de la expresión es igual que el de spatialValue.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el punto en la posición indexValue de spatialValue, o bien null si spatialValue no es una cadena de línea.</returns>
      <param name="spatialValue">Expresión que especifica el valor de cadena de línea espacial.</param>
      <param name="indexValue">Expresión que especifica la posición del punto que se va a recuperar de la cadena de línea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'PointCount' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el número de puntos de spatialValue, o bien null si spatialValue no es una cadena de línea.</returns>
      <param name="spatialValue">Expresión que especifica el valor de cadena de línea espacial del que se debe recuperar el número de puntos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'PointOnSurface' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un punto que está garantizado que está en el geometryValue de superficie, o bien null si geometryValue no es una superficie.</returns>
      <param name="geometryValue">Expresión que especifica el valor de superficie de geometría del que se debe recuperar el punto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialBoundary' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el límite de geometryValue.</returns>
      <param name="geometryValue">Expresión que especifica el valor de geometría del que se debe recuperar el valor SpatialBoundary.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialBuffer' con los argumentos especificados, que deben tener un tipo de resultado Edm.Geography o Edm.Geometry y Edm.Double.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor de geometría que representa todos los puntos de igual o menor distancia desde spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor espacial.</param>
      <param name="distance">Expresión que especifica la distancia de búfer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialContains' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 contiene espacialmente a geometryValue2.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialConvexHull' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la forma convexa de geometryValue.</returns>
      <param name="geometryValue">Expresión que especifica el valor de geometría del que se debe recuperar el valor de forma convexa.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialCrosses' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 se cruza con la intersección de geometryValue2.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialDifference' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es igual que el de spatialValue1 y spatialValue2.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de geometría que representa la diferencia simétrica de spatialValue2 con spatialValue1.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial del cual se debe calcular la diferencia simétrica con spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialDimension' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor Dimension de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor del que se debe recuperar el valor Dimension.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialDisjoint' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si patialValue1 y spatialValue2 son disjuntos espacialmente.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial que se debe comparar con spatialValue1 para ver si son disjuntos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialElementAt' con los argumentos especificados.El primer argumento debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El segundo argumento debe tener un tipo de resultado numérico entero.El tipo de resultado de la expresión es igual que el de spatialValue.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el elemento de colección en la posición indexValue de spatialValue, o bien null si spatialValue no es una colección.</returns>
      <param name="spatialValue">Expresión que especifica el valor de colección de geografía o geometría.</param>
      <param name="indexValue">Expresión que especifica la posición del elemento que se va a recuperar de la colección de geometría o geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialElementCount' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Int32.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el número de elementos de spatialValue, o bien null si spatialValue no es una colección.</returns>
      <param name="spatialValue">Expresión que especifica el valor de colección de geografía o geometría del que se debe recuperar el número de elementos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialEnvelope' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Geometry.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el cuadro de límite mínimo de geometryValue.</returns>
      <param name="geometryValue">Expresión que especifica el valor del que se debe recuperar el valor Envelope.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialEquals' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si patialValue1 y spatialValue2 son iguales.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial que se debe comparar con spatialValue1 para ver si son iguales.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialIntersection' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es igual que el de spatialValue1 y spatialValue2.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor espacial que representa la intersección de spatialValue1 y spatialValue2.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial para el que se debe calcular la intersección con spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialIntersects' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si patialValue1 y spatialValue2 intersectan.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial que se debe comparar con spatialValue1 para ver si forman una intersección.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialLength' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve la longitud de spatialValue, o bien null si spatialValue no es una curva.</returns>
      <param name="spatialValue">Expresión que especifica el valor de curva espacial del que se debe recuperar la longitud.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialOverlaps' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 se superpone espacialmente a geometryValue2.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialRelate' con los argumentos especificados, cada uno de los cuales debe tener tipos de resultado Edm.Geometry y de cadena.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 está relacionado espacialmente con geometryValue2 según la relación espacial designada por intersectionPatternMatrix.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
      <param name="intersectionPatternMatrix">Expresión que especifica la representación de texto del modelo de intersección Dimensionally Extended Nine-Intersection Model (DE-9IM) usado para comparar geometryValue1 y geometryValue2.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialSymmetricDifference' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es igual que el de spatialValue1 y spatialValue2.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de geometría que representa la diferencia simétrica de spatialValue2 con spatialValue1.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial para el que se debe calcular la diferencia simétrica con spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialTouches' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 toca con geometryValue2.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialTypeName' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de la expresión es Edm.String.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el nombre del tipo de geometría de cadena de spatialValue.</returns>
      <param name="spatialValue">Expresión que especifica el valor del que se debe recuperar el nombre del tipo de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialUnion' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado de spatialValue1 debe coincidir con el de spatialValue2.El tipo de resultado de la expresión es igual que el de spatialValue1 y spatialValue2.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor espacial que representa la unión de spatialValue1 y spatialValue2.</returns>
      <param name="spatialValue1">Expresión que especifica el primer valor espacial.</param>
      <param name="spatialValue2">Expresión que especifica el valor espacial para el que se debe calcular la unión con spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'SpatialWithin' con los argumentos especificados, cada uno de los cuales debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Boolean.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve un valor booleano que indica si geometryValue1 se encuentra dentro de geometryValue2.</returns>
      <param name="geometryValue1">Expresión que especifica el primer valor de geometría.</param>
      <param name="geometryValue2">Expresión que especifica el valor de geometría que se debe comparar con geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'StartPoint' con el argumento especificado, que debe tener un tipo de resultado Edm.Geography o Edm.Geometry.El tipo de resultado es igual que el de spatialValue.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el punto inicial de spatialValue, o bien null si spatialValue no es una curva.</returns>
      <param name="spatialValue">Expresión que especifica el valor de curva espacial del que se debe recuperar el punto inicial.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'XCoordinate' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de la coordenada X de geometryValue, o bien null si geometryValue no es un punto.</returns>
      <param name="geometryValue">Expresión que especifica el valor de punto de geometría del que se debe recuperar el valor de la coordenada X.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea una clase <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> que invoca la función canónica 'YCoordinate' con el argumento especificado, que debe tener un tipo de resultado Edm.Geometry.El tipo de resultado de la expresión es Edm.Double.</summary>
      <returns>Nueva clase DbFunctionExpression que devuelve el valor de la coordenada Y de geometryValue, o bien null si geometryValue no es un punto.</returns>
      <param name="geometryValue">Expresión que especifica el valor de punto de geometría del que se debe recuperar el valor de la coordenada Y.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>Clase pública del analizador de Entity SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>Analiza la consulta especificada con los parámetros indicados.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, que contiene <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> e información que describe las definiciones de funciones insertadas, si hay alguna.</returns>
      <param name="query">Consulta de Entity SQL que se va a analizar.</param>
      <param name="parameters">Parámetros de consulta opcionales.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Analizar una consulta específica con unas variables determinadas y genera una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> .</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, que contiene <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> e información que describe las definiciones de funciones insertadas, si hay alguna.</returns>
      <param name="query">Consulta que se va a analizar.</param>
      <param name="variables">Variables de la consulta opcional.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>Definición de función insertada de consulta de Entity SQL, devuelta como parte de <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>Posición final de la definición de función en el texto de consulta de eSQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>Cuerpo y parámetros de la función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>Nombre de la función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>Posición inicial de la definición de función en el texto de consulta de eSQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Información de resultado del analizador de Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>Árbol de comandos generado durante el análisis.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>Lista de objetos <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> que describen las definiciones de función insertada de consulta.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>Clase que representa un comando para la capa conceptual</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> utilizando los valores especificados.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> con la instrucción especificada.</summary>
      <param name="statement">Texto del comando.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> con la instrucción y la conexión especificadas.</summary>
      <param name="statement">Texto del comando.</param>
      <param name="connection">Conexión al origen de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> con la instrucción, la conexión y la transacción especificadas.</summary>
      <param name="statement">Texto del comando.</param>
      <param name="connection">Conexión al origen de datos.</param>
      <param name="transaction">Transacción en la cual se ejecuta el comando.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Construye el objeto EntityCommand con la instrucción eSQL especificada y el objeto de conexión que se va a usar</summary>
      <param name="statement">Texto del comando eSQL que se va a ejecutar</param>
      <param name="connection">Objeto de conexión</param>
      <param name="resolver">Resolución empleada para resolver DbProviderServices</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>Cancela la ejecución de un <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>Obtiene o establece una instrucción de Entity SQL que especifica un comando o un procedimiento almacenado que se va a ejecutar.</summary>
      <returns>Instrucción de Entity SQL que especifica un comando o un procedimiento almacenado que se va a ejecutar.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>Obtiene o establece el período que se ha de esperar antes de que se supere el tiempo de espera.</summary>
      <returns>El tiempo en segundos que se ha de esperar para que se ejecute el comando.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>Obtiene o define Árbol de comandos que se va a ejecutar; solamente puede definirse el árbol de comandos o el texto del comando, pero no ambos.</summary>
      <returns>Árbol de comandos que se va a ejecutar.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>Obtiene o establece un valor que indica cómo se debe interpretar la propiedad <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" />.</summary>
      <returns>Uno de los valores de la enumeración <see cref="T:System.Data.CommandType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>Obtiene o establece el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> utilizado por el <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> .</summary>
      <returns>Conexión utilizada por el comando de la entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>Crea y devuelve un nuevo objeto de parámetro que representa un parámetro de la instrucción eSQL</summary>
      <returns>Objeto del parámetro.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>Crea una nueva instancia de un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Una nueva instancia de un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>Objeto de conexión que se usa para ejecutar el comando</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>Colección de parámetros de este comando</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>Transacción en la que se ejecuta este comando</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Obtiene o establece un valor que indica si el objeto de comando debe estar visible en un control del Diseñador de Windows Forms.</summary>
      <returns>Es true si el objeto de comando debería ser visible en un control de Diseñador de Windows Forms; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Obtiene o define un valor que indica si el almacenamiento en caché del plan de consulta está o no activado.</summary>
      <returns>Es true si el almacenamiento en caché del plan de consulta está activado; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>Ejecuta el comando y devuelve un lector de datos para leer los resultados</summary>
      <returns>Objeto DbDataReader</returns>
      <param name="behavior">Comportamiento que se va a usar al ejecutar el comando</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica el comando y devuelve un lector de datos para leer los resultados</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un objeto DbDataReader.</returns>
      <param name="behavior">Comportamiento que se va a usar al ejecutar el comando</param>
      <param name="cancellationToken">Token para supervisar las solicitudes de cancelación</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Ejecuta el comando actual.</summary>
      <returns>El número de filas afectadas.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica el comando y descarta cualquier resultado devuelto del comando</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de filas afectadas.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>Ejecuta el comando y devuelve un lector de datos.</summary>
      <returns>El <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> que contiene los resultados.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Compila la propiedad <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> en un árbol de comandos y la pasa al proveedor del almacén subyacente para su ejecución; a continuación, crea un <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> a partir del conjunto de resultados generado utilizando el <see cref="T:System.Data.CommandBehavior" /> especificado.</summary>
      <returns>El <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> que contiene los resultados.</returns>
      <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>Ejecuta de forma asincrónica el comando y devuelve un lector de datos para leer los resultados.Solo se le puede llamar en CommandType.CommandText (de lo contrario, use los métodos Execute* estándar)</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un objeto EntityDataReader.</returns>
      <exception cref="T:System.InvalidOperationException">Para los comandos de procedimiento almacenado, si se le llama para todo salvo un resultado de colección de entidades</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>Ejecuta de forma asincrónica el comando y devuelve un lector de datos para leer los resultados.Solo se le puede llamar en CommandType.CommandText (de lo contrario, use los métodos Execute* estándar)</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un objeto EntityDataReader.</returns>
      <param name="behavior">Comportamiento que se va a usar al ejecutar el comando</param>
      <exception cref="T:System.InvalidOperationException">Para los comandos de procedimiento almacenado, si se le llama para todo salvo un resultado de colección de entidades</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica el comando y devuelve un lector de datos para leer los resultados.Solo se le puede llamar en CommandType.CommandText (de lo contrario, use los métodos Execute* estándar)</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un objeto EntityDataReader.</returns>
      <param name="behavior">Comportamiento que se va a usar al ejecutar el comando</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">Para los comandos de procedimiento almacenado, si se le llama para todo salvo un resultado de colección de entidades</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica el comando y devuelve un lector de datos para leer los resultados.Solo se le puede llamar en CommandType.CommandText (de lo contrario, use los métodos Execute* estándar)</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un objeto EntityDataReader.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">Para los comandos de procedimiento almacenado, si se le llama para todo salvo un resultado de colección de entidades</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Ejecuta el comando y devuelve la primera columna de la primera fila del conjunto de resultados.Las demás columnas o filas no se tienen en cuenta.</summary>
      <returns>La primera columna de la primera fila del conjunto de resultados, o una referencia null (Nothing en Visual Basic) si el conjunto de resultados está vacío.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Obtiene los parámetros de la instrucción de Entity SQL o del procedimiento almacenado.</summary>
      <returns>Los parámetros de la instrucción de Entity SQL o del procedimiento almacenado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>Compila el comando del nivel de entidad y crea una versión preparada del comando.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>Compila el comando del nivel de entidad y devuelve el texto del comando de almacenamiento.</summary>
      <returns>El texto del comando de almacenamiento.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>Obtiene o define la transacción dentro de la cual se ejecuta <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
      <returns>La transacción dentro de la cual se ejecuta <see cref="T:System.Data.SqlClient.SqlCommand" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Obtiene o define cómo se aplican los resultados de un comando a las filas que están siendo actualizadas.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.UpdateRowSource" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>Clase que representa una conexión para la capa conceptual.Una conexión de entidad solo se puede inicializar una vez (abriendo la conexión).Por tanto, no es posible cambiar la cadena de conexión, asociar una nueva conexión de almacenamiento o cambiar la cadena de conexión de almacenamiento.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> con los objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> y <see cref="T:System.Data.Common.DbConnection" /> especificados.</summary>
      <param name="workspace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> que se va a asociar a esta <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <param name="connection">Conexión de origen de datos subyacente para este objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro workspace o connection es null.</exception>
      <exception cref="T:System.ArgumentException">Falta el modelo conceptual del área de trabajo. -o bien- Falta el archivo de asignación del área de trabajo. -o bien- Falta el modelo de almacenamiento del área de trabajo. -o bien- La conexión no está en estado cerrado.</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">connection no procede de un proveedor compatible con ADO.NET Entity Framework.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>Construye el objeto EntityConnection a partir de los metadatos cargados en memoria</summary>
      <param name="workspace">Área de trabajo que contiene información de metadatos.</param>
      <param name="connection">Conexión de almacenamiento.</param>
      <param name="entityConnectionOwnsStoreConnection">Si se establece en true, la conexión de almacenamiento se desecha cuando se desecha la conexión de la entidad; de lo contrario, el autor de la llamada debe desechar la conexión de almacenamiento.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, tomando como base la cadena de conexión.</summary>
      <param name="connectionString">Cadena de conexión específica del proveedor.</param>
      <exception cref="T:System.ArgumentException">Se ha proporcionado una palabra clave de la cadena de conexión no válida, o no se ha proporcionado una palabra clave de la cadena de conexión requerida.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>Inicia una transacción de base de datos</summary>
      <returns>Objeto que representa la nueva transacción</returns>
      <param name="isolationLevel">Nivel de aislamiento de la transacción</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>Comienza una transacción utilizando el proveedor subyacente.</summary>
      <returns>Un nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.La instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> devuelta se puede asociar posteriormente a <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> para ejecutar el comando en esa transacción.</returns>
      <exception cref="T:System.InvalidOperationException">El proveedor de datos subyacente no se conoce. -o bien- La invocación a <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> se ha realizado en una <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> que ya tiene una transacción actual. -o bien- El estado de la entidad <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> no es <see cref="F:System.Data.ConnectionState.Open" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Comienza una transacción con el nivel de aislamiento especificado utilizando el proveedor subyacente.</summary>
      <returns>Un nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.La instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> devuelta se puede asociar posteriormente a <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> para ejecutar el comando en esa transacción.</returns>
      <param name="isolationLevel">Nivel de aislamiento de la transacción.</param>
      <exception cref="T:System.InvalidOperationException">El proveedor de datos subyacente no se conoce. -o bien- La invocación a <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> se ha realizado en una <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> que ya tiene una transacción actual. -o bien- El estado de la entidad <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> no es <see cref="F:System.Data.ConnectionState.Open" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>No compatible.</summary>
      <param name="databaseName">No compatible.</param>
      <exception cref="T:System.NotSupportedException">Cuando se invoca al método.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>Cierra la conexión con la base de datos.</summary>
      <exception cref="T:System.InvalidOperationException">Se ha producido un error al cerrarse la conexión.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>Obtiene o establece la cadena de conexión <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>La cadena de conexión requerida para establecer la conexión inicial con un origen de datos.El valor predeterminado es una cadena vacía.En una conexión cerrada, se devuelve el valor establecido actualmente.Si no se ha establecido ningún valor, se devuelve una cadena vacía.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Obtiene el número de segundos que se debe esperar cuando se intenta establecer una conexión antes de que finalice el intento y se genere un error.</summary>
      <returns>El tiempo (en segundos) que se debe esperar para que se abra una conexión.El valor predeterminado es el tiempo de espera predeterminado del proveedor de datos subyacente.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>Crea una instancia nueva de <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, con la propiedad <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> establecida en <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> .</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
      <exception cref="T:System.InvalidOperationException">El nombre del proveedor de datos subyacente no se conoce.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>Crea un nuevo objeto de comando que usa este objeto de conexión</summary>
      <returns>Objeto de comando.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>Obtiene el nombre de la base de datos actual o de la base de datos que se va a utilizar una vez que se abra la conexión.</summary>
      <returns>El valor de la propiedad Database del proveedor de datos subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>Obtiene el nombre o la dirección de red del origen de datos con el que se va a establecer conexión.</summary>
      <returns>El nombre del origen de datos.El valor predeterminado es una cadena vacía.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>Obtiene el generador de proveedor asociado a EntityConnection</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>Limpia este objeto de conexión</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Da de alta esta <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> en la transacción especificada.</summary>
      <param name="transaction">Objeto de transacción en el que se da de alta.</param>
      <exception cref="T:System.InvalidOperationException">El estado de la <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> no es <see cref="F:System.Data.ConnectionState.Open" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> asociado a esta <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> .</summary>
      <returns>Control <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> asociado a este objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> .</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">La cadena de conexión insertada contiene un valor de la palabra clave Metadata no válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>Establece una conexión con el origen de datos llamando al método Open del proveedor de datos subyacente.</summary>
      <exception cref="T:System.InvalidOperationException">Se produce un error al abrir la conexión o cuando el nombre del proveedor de datos subyacente no se conoce.</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">La cadena de conexión insertada contiene un valor de la palabra clave Metadata no válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>Establece de forma asincrónica una conexión con el almacenamiento de datos llamando al método Open del proveedor de datos subyacente</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>Obtiene una cadena que contiene la versión del origen de datos al que está conectado el cliente.</summary>
      <returns>La versión del origen de datos contenido en la cadena de conexión del proveedor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>Obtiene el estado del objeto EntityConnection, que se configura para hacer el seguimiento del estado de la conexión de base de datos subyacente que ajusta este objeto EntityConnection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>Proporciona acceso a la conexión de origen de datos subyacente usada por el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> para la conexión de origen de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>Clase que representa un generador de cadenas de conexión para el proveedor del cliente de entidades</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> utilizando la cadena de conexión proporcionada.</summary>
      <param name="connectionString">Cadena de conexión específica del proveedor para el origen de datos subyacente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Borra el contenido de la instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Determina si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contiene una clave específica.</summary>
      <returns>Devuelve true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> contiene un elemento que tiene la clave especificada; de lo contrario, devuelve false.</returns>
      <param name="keyword">Clave que se buscará en <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> tiene o no un tamaño fijo.</summary>
      <returns>Devuelve true en todos los casos porque <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> suministra una colección de tamaño fijo de pares palabra clave-valor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Obtiene o establece el valor asociado a la clave especificada.En C#, esta propiedad es el indizador.</summary>
      <returns>Valor asociado a la clave especificada.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> .</summary>
      <returns>Interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Obtiene o establece las ubicaciones de los metadatos en la cadena de conexión.</summary>
      <returns>Obtiene o establece las ubicaciones de los metadatos en la cadena de conexión.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Obtiene o establece el nombre de una sección según se define en un archivo de configuración.</summary>
      <returns>El nombre de una sección en un archivo de configuración.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Obtiene o define el nombre del proveedor de datos .NET Framework subyacente de la cadena de conexión.</summary>
      <returns>El nombre invariable del proveedor de datos de .NET Framework subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Obtiene o establece la cadena de conexión interior específica del proveedor.</summary>
      <returns>La cadena de conexión interior específica del proveedor.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Quita la entrada con la clave especificada de la instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Devuelve true si la clave existía en la cadena de conexión y se quitó; devuelve false si la clave no existía.</returns>
      <param name="keyword">Clave del par palabra clave-valor que se va a quitar de la cadena de conexión incluida en este <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> .</param>
      <exception cref="T:System.ArgumentNullException">la palabra clave es null (Nothing en Visual Basic)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Recupera un valor que se corresponde con la clave proporcionada por este <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> .</summary>
      <returns>Devuelve true si keyword se encontró en la cadena de conexión; de lo contrario, devuelve false.</returns>
      <param name="keyword">Clave del elemento que se va a recuperar.</param>
      <param name="value">Valor que corresponde a keyword.</param>
      <exception cref="T:System.ArgumentNullException">keyword contiene un valor null (Nothing en Visual Basic).</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>Clase de lector de datos para el proveedor del cliente de entidades</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>Cierra el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Obtiene <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> para esta <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" /> .</summary>
      <returns>La información de un registro de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>Obtiene un valor que indica la profundidad de anidamiento de la fila actual.</summary>
      <returns>Profundidad de anidamiento de la fila actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Libera los recursos consumidos por este <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> e invoca al método <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" /> .</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>Obtiene el número de columnas de la fila actual.</summary>
      <returns>El número de columnas de la fila actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como tipo Boolean.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un byte.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Lee una secuencia de bytes de la columna especificada, a partir de la ubicación indicada por dataIndex, en el búfer, a partir de la ubicación indicada por bufferIndex.</summary>
      <returns>El número real de bytes que se leen.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
      <param name="dataOffset">Índice de la fila desde la que se va a iniciar la operación de lectura.</param>
      <param name="buffer">Búfer en el que se van a copiar los datos.</param>
      <param name="bufferOffset">Índice del búfer en el que se van a copiar los datos.</param>
      <param name="length">Número máximo de caracteres que se pueden leer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un único carácter.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Lee una secuencia de caracteres de la columna especificada, a partir de la ubicación indicada por dataIndex, en el búfer, a partir de la ubicación indicada por bufferIndex.</summary>
      <returns>Número real de caracteres que se leen.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
      <param name="dataOffset">Índice de la fila desde la que se va a iniciar la operación de lectura.</param>
      <param name="buffer">Búfer en el que se van a copiar los datos.</param>
      <param name="bufferOffset">Índice del búfer en el que se van a copiar los datos.</param>
      <param name="length">Número máximo de caracteres que se pueden leer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Devuelve lectores anidados como objetos <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Lectores anidados como objetos <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Devuelve un <see cref="T:System.Data.Common.DbDataRecord" /> anidado.</summary>
      <returns>El registro de datos anidados.</returns>
      <param name="i">Número de DbDataRecord que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Obtiene el nombre del tipo de datos de la columna especificada.</summary>
      <returns>Nombre del tipo de datos.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un objeto <see cref="T:System.DateTime" />.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Common.DbDataReader" /> para el índice de columna solicitado que puede ser invalidado con una implementación específica del proveedor.</summary>
      <returns>Lector de datos.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un objeto <see cref="T:System.Decimal" />.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un número de punto flotante de precisión doble.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración las filas en el lector de datos.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración en las filas en el lector de datos.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Obtiene el tipo de datos de la columna especificada.</summary>
      <returns>El tipo de datos de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un número de punto flotante de precisión sencilla.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un identificador global único (GUID).</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un entero de 16 bits con signo.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un entero de 32 bits con signo.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como un entero de 64 bits con signo.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Obtiene el nombre de la columna, dado el índice de columna de base cero.</summary>
      <returns>El nombre de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Obtiene el índice de columna dado el nombre de la misma.</summary>
      <returns>Índice de la columna de base cero.</returns>
      <param name="name">Nombre de la columna.</param>
      <exception cref="T:System.IndexOutOfRangeException">El nombre especificado no es un nombre de columna válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Devuelve el tipo de campo específico del proveedor de la columna especificada.</summary>
      <returns>El objeto <see cref="T:System.Type" /> que describe el tipo de datos de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como una instancia de <see cref="T:System.Object" />.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Obtiene todas las columnas de atributos específicos del proveedor en la colección para la fila actual.</summary>
      <returns>El número de instancias de <see cref="T:System.Object" /> en la matriz.</returns>
      <param name="values">Matriz de <see cref="T:System.Object" /> en la que se copian las columnas de atributos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Devuelve un objeto <see cref="T:System.Data.DataTable" /> que describe los metadatos de columna del <see cref="T:System.Data.Common.DbDataReader" /> .</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> que describe los metadatos de columna.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como una instancia de <see cref="T:System.String" />.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como una instancia de <see cref="T:System.Object" />.</summary>
      <returns>El valor de la columna especificada.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Rellena una matriz de objetos con los valores de columna de la fila actual.</summary>
      <returns>El número de instancias de <see cref="T:System.Object" /> en la matriz.</returns>
      <param name="values">Matriz de <see cref="T:System.Object" /> en la que se copian las columnas de atributos.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>Obtiene un valor que indica si este <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contiene una o varias filas.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> contiene una o varias filas; en caso contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> está cerrado.</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> está cerrado; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Obtiene un valor que indica si la columna contiene valores que no existen o ausentes.</summary>
      <returns>true si el valor de la columna especificada equivale a <see cref="T:System.DBNull" />; de lo contrario, false.</returns>
      <param name="ordinal">Índice de la columna de base cero.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Obtiene el valor de la columna especificada como una instancia de <see cref="T:System.Object" />.</summary>
      <returns>El valor de la columna especificada.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Obtiene el valor de la columna especificada como una instancia de <see cref="T:System.Object" />.</summary>
      <returns>El valor de la columna especificada.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>Hace avanzar el lector hasta el resultado siguiente cuando se leen los resultados de un lote de instrucciones.</summary>
      <returns>Es true si hay más conjuntos de resultados; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>Mueve de forma asincrónica el lector hasta el conjunto de resultados siguiente cuando se lee un lote de instrucciones</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si hay más conjuntos de resultados; de lo contrario, false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>Hace avanzar el lector hasta el siguiente registro de un conjunto de resultados.</summary>
      <returns>Es true si hay más filas; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>Mueve de forma asincrónica el lector hasta la siguiente fila del conjunto de resultados actual</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si hay más filas; de lo contrario, false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Obtiene el número de filas cambiadas, insertadas o eliminadas mediante la ejecución de la instrucción SQL.</summary>
      <returns>El número de filas cambiadas, insertadas o eliminadas.Devuelve -1 para instrucciones SELECT; 0 si no hay filas afectadas o se produce un error en la instrucción.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Obtiene el número de campos de <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> que no están ocultos.</summary>
      <returns>El número de campos que no están ocultos.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>Clase que representa un parámetro usado en EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> utilizando los valores predeterminados.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que usa el nombre de parámetro y el tipo de datos especificados.</summary>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que usa el nombre de parámetro, el tipo de datos y el tamaño especificados.</summary>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Tamaño del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> utilizando las propiedades especificadas.</summary>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Tamaño del parámetro.</param>
      <param name="direction">Uno de los valores de <see cref="T:System.Data.ParameterDirection" />.</param>
      <param name="isNullable">Es true para indicar que el parámetro admite valores NULL; de lo contrario, es false.</param>
      <param name="precision">Número de dígitos que se utiliza para representar el valor.</param>
      <param name="scale">El número de posiciones decimales con que se resuelve el valor.</param>
      <param name="sourceColumn">Nombre de la columna de origen.</param>
      <param name="sourceVersion">Uno de los valores de <see cref="T:System.Data.DataRowVersion" />.</param>
      <param name="value">Valor del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> utilizando las propiedades especificadas.</summary>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Tamaño del parámetro.</param>
      <param name="sourceColumn">Nombre de la columna de origen.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>Obtiene o establece el <see cref="T:System.Data.DbType" /> del parámetro.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.DbType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>Obtiene o define la dirección del parámetro.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.ParameterDirection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>Obtiene o define el tipo del parámetro, expresado como un EdmType.</summary>
      <returns>Tipo del parámetro, expresado como un EdmType.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>Obtiene o establece un valor que indica si el parámetro acepta valores null.</summary>
      <returns>Es true si se aceptan valores null; en caso contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>Obtiene o define el nombre del parámetro de la entidad.</summary>
      <returns>Nombre del parámetro de la entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>Obtiene o define el número de dígitos que se usan para representar la propiedad <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Número de dígitos que se utiliza para representar el valor.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>Restablece el tipo asociado al <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>Obtiene o establece el número de posiciones decimales con que se resuelve <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>El número de posiciones decimales con que se resuelve el valor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>Obtiene o define el tamaño máximo de los datos de la columna.</summary>
      <returns>Tamaño máximo de los datos de la columna.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>Obtiene o define el nombre de la columna de origen asignada a <see cref="T:System.Data.DataSet" /> y utilizada para cargar o devolver la propiedad <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> .</summary>
      <returns>El nombre de la columna de origen asignada al conjunto de datos y utilizada para cargar o devolver el valor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Obtiene o define un valor que indica si la columna de origen acepta o no valores NULL.</summary>
      <returns>Es true si la columna de origen admite valores NULL; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>Obtiene o define el <see cref="T:System.Data.DataRowVersion" /> a utilizar al cargar el valor.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.DataRowVersion" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>Devuelve una representación de cadena del parámetro.</summary>
      <returns>Una representación en forma de cadena del parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>Obtiene o establece el valor del parámetro.</summary>
      <returns>Valor del parámetro.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>Clase que representa una colección de parámetros usada en EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Agrega el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>Un nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">La clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a agregar a la colección.</param>
      <exception cref="T:System.ArgumentException">El objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado en el parámetro value ya se ha agregado a esta colección o a otra. <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</exception>
      <exception cref="T:System.InvalidCastException">El parámetro pasado no era <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro value es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Agrega el objeto especificado a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>El índice del nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">Interfaz <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Agrega un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> a la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> dados el nombre del parámetro y el tipo de datos.</summary>
      <returns>Un nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Agrega un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> a la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> con el nombre de parámetro, el tipo de datos y la longitud de columna.</summary>
      <returns>Un nuevo objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="dbType">Uno de los valores de <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Longitud de columna.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Agrega una matriz de valores al final de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <param name="values">Valores de <see cref="T:System.Array" /> que se van a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>Agrega una matriz de valores <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> al final de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <param name="values">Valores de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se van a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Agrega un valor al final de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
      <param name="value">Valor que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>Quita todos los objetos <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado está en esta colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contiene el valor; de lo contrario, false.</returns>
      <param name="value">Valor de <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado está en esta colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> contiene el valor; de lo contrario, false.</returns>
      <param name="parameterName">Valor de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actual en el objeto <see cref="T:System.Array" /> unidimensional especificado, empezando en el índice del objeto <see cref="T:System.Array" /> de destino especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que es el destino de los elementos copiados desde la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actual .</param>
      <param name="index">Entero de 32 bits que representa el índice de <see cref="T:System.Array" /> en el que comienza la copia.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>Copia todos los elementos de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actual en la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> especificada, empezando en el índice de destino indicado.</summary>
      <param name="array">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> que es el destino de los elementos copiados desde la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> actual.</param>
      <param name="index">Entero de 32 bits que representa el índice de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> en el que comienza la copia.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>Obtiene un valor de tipo Integer que contiene el número de elementos de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>El número de elementos de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> como valor Integer.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> para la instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Obtiene la ubicación del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado en la colección.</summary>
      <returns>Ubicación de base cero del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado, que es un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de la colección.Devuelve -1 cuando el objeto no existe en <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</returns>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a buscar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Obtiene la ubicación del objeto <see cref="T:System.Object" /> especificado en la colección.</summary>
      <returns>Ubicación de base cero del objeto <see cref="T:System.Object" /> especificado, que es un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de la colección.Devuelve -1 cuando el objeto no existe en <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</returns>
      <param name="value">
        <see cref="T:System.Object" /> que se va a buscar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Obtiene la ubicación del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado con el nombre indicado.</summary>
      <returns>Ubicación de base cero del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado con el nombre que distingue entre mayúsculas y minúsculas indicado.Devuelve -1 cuando el objeto no existe en <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</returns>
      <param name="parameterName">Nombre que distingue entre mayúsculas y minúsculas del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a buscar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Inserta un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> en la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, en el índice especificado.</summary>
      <param name="index">Índice de base cero en el que se debe insertar el valor.</param>
      <param name="value">Objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a insertar en la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Inserta un objeto <see cref="T:System.Object" /> en <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> en el índice especificado.</summary>
      <param name="index">Índice de base cero en el que se debe insertar el valor.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a insertar en la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> tiene o no un tamaño fijo.</summary>
      <returns>Devuelve true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> tiene un tamaño fijo; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> es de solo lectura.</summary>
      <returns>Devuelve si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> es de solo lectura; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> está sincronizado.</summary>
      <returns>Devuelve true si <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> está sincronizado; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Obtiene el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> en el índice especificado.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> en el índice especificado.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Obtiene el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> con el nombre especificado.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> con el nombre especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Quita el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se quita de la colección.</param>
      <exception cref="T:System.InvalidCastException">El parámetro no es un objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.SystemException">El parámetro no existe en la colección.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Quita el parámetro especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se quita de la colección.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Quita el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, en el índice especificado.</summary>
      <param name="index">Índice de base cero del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Quita el objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> de la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, en el nombre de parámetro especificado </summary>
      <param name="parameterName">Nombre del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a la colección <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</summary>
      <returns>Objeto que puede usarse para sincronizar el acceso a <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>Clase que representa un generador de proveedores para el proveedor del cliente de entidades.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Devuelve una nueva instancia de la clase del proveedor que implementa la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Inicia una excepción <see cref="T:System.NotSupportedException" />.Este método no se admite actualmente.</summary>
      <returns>Este método no se admite actualmente.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Devuelve una nueva instancia de la clase del proveedor que implementa la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Devuelve una nueva instancia de la clase del proveedor que implementa la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Inicia una excepción <see cref="T:System.NotSupportedException" />.Este método no se admite actualmente.</summary>
      <returns>Este método no se admite actualmente.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Devuelve una nueva instancia de la clase del proveedor que implementa la clase <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Inicia una excepción <see cref="T:System.NotSupportedException" />.Este método no se admite actualmente.</summary>
      <returns>Este método no se admite actualmente.</returns>
      <param name="state">Este método no se admite actualmente.</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>Un objeto singleton para el objeto del proveedor del cliente de entidades.Esto sigue siendo un campo público (no privado) porque DbProviderFactory espera un campo.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Devuelve la clase <see cref="T:System.IServiceProvider" /> solicitada.</summary>
      <returns>Nueva instancia de <see cref="T:System.IServiceProvider" />.Los tipos admitidos son <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> y <see cref="T:System.Data.IEntityAdapter" /> .Devuelve null (o Nothing en Visual Basic) para cualquier otro tipo.</returns>
      <param name="serviceType">
        <see cref="T:System.Type" /> que se va a devolver.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>Clase que representa una transacción para la capa conceptual</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>Confirma la transacción subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>Obtiene <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> para esta <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> .</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> al origen de datos subyacente.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>Objeto de conexión que posee este objeto de transacción</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>Limpia este objeto de transacción</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Obtiene el nivel de aislamiento de esta <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.</summary>
      <returns>El valor de una enumeración <see cref="T:System.Data.IsolationLevel" /> que representa el nivel de aislamiento de la transacción subyacente.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>Revierte la transacción subyacente.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>Representa los metadatos de asignación para un AssociationSet en el espacio CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Inicializa una nueva instancia de AssociationSetMapping.</summary>
      <param name="associationSet">Conjunto de asociaciones que se va a asignar.</param>
      <param name="storeEntitySet">Conjunto de entidades de almacenamiento que se va a asignar.</param>
      <param name="containerMapping">Asignación del contenedor principal.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Agrega una condición de asignación de propiedad.</summary>
      <param name="condition">Condición que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>Obtiene el conjunto de asociaciones que se asigna.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>Obtiene la asignación de tipo de asociación contenida.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>Obtiene las condiciones de asignación de propiedades.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>Obtiene o establece la asignación de función correspondiente.Puede ser NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Quita una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>Obtiene o establece la asignación de propiedad del extremo de origen.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>Obtiene el conjunto de entidades de almacenamiento que se asigna.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>Obtiene o establece la asignación de propiedad del extremo de destino.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>Describe las asignaciones de funciones de modificación para un conjunto de asociaciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Initalizes una nueva instancia de AssociationSetModificationFunctionMapping.</summary>
      <param name="associationSet">Conjunto de asociaciones.</param>
      <param name="deleteFunctionMapping">Asignación de función de eliminación.</param>
      <param name="insertFunctionMapping">Asignación de función de inserción.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>Obtiene el conjunto de asociaciones.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Obtiene la asignación de función de eliminación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>Obtiene la asignación de función de inserción.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>Representa los metadatos de asignación para una asignación de tipo de asociación en el espacio CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Crea una instancia de AssociationTypeMapping.</summary>
      <param name="associationSetMapping">AssociationSetMapping que contiene esta AssociationTypeMapping.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>Obtiene la AssociationSetMapping que contiene esta AssociationTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>Obtiene el tipo de asociación que se va a asignar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>Obtiene el fragmento de asignación único.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>Metadatos de asignación para propiedades complejas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Crea un nuevo objeto de asignación de propiedad compleja</summary>
      <param name="property">Objeto MemberMetadata que representa este miembro complejo</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Agrega una asignación de tipo correspondiente a un tipo complejo anidado.</summary>
      <param name="typeMapping">Asignación de tipo complejo que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Quita una asignación de tipo correspondiente a un tipo complejo anidado.</summary>
      <param name="typeMapping">Asignación de tipo complejo que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>Obtiene una colección de solo lectura de las asignaciones de tipo correspondientes a los tipos complejos anidados.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>Metadatos de asignación para tipos complejos.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Crea una instancia de ComplexTypeMapping.</summary>
      <param name="complexType">ComplexType que se va a asignar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Agrega una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Agrega una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>Obtiene el ComplexType que se va a asignar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>Obtiene una colección de solo lectura de condiciones de asignación de propiedad.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>Obtiene una colección de solo lectura de asignaciones de propiedad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Quita una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Quita una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>Metadatos de asignación para la asignación de propiedad condicional en un tipo.La asignación de propiedad condicional especifica una condición en la propiedad del lado C o en la propiedad del lado S.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>Obtiene una EdmProperty que especifica la columna asignada.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>Obtiene una EdmProperty que especifica la propiedad asignada.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>Metadatos de asignación para la propiedad End de una asociación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>Crea una asignación de propiedad de extremo de la asociación.</summary>
      <param name="associationEnd">AssociationEndMember que especifica el extremo de asociación que se va a asignar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Agrega una asignación secundaria entre columnas y propiedades.</summary>
      <param name="propertyMapping">ScalarPropertyMapping que especifica la asignación entre columnas y propiedades que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>Obtiene un AssociationEndMember que especifica el extremo de asociación asignado.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>Obtiene una ReadOnlyCollection de ScalarPropertyMapping que especifica los elementos secundarios de esta asignación de propiedad del extremo de asociación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Quita una asignación secundaria entre columnas y propiedades.</summary>
      <param name="propertyMapping">ScalarPropertyMapping que especifica la asignación entre columnas y propiedades que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>Representa los metadatos de asignación para la asignación de EntityContainer en el espacio CS.Solo se permite un elemento EntityContainerMapping en el archivo de MSL para la asignación CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>Inicializa una nueva instancia de EntityContainerMapping.</summary>
      <param name="conceptualEntityContainer">Contenedor de entidades conceptual que se va a asignar.</param>
      <param name="storeEntityContainer">Contenedor de entidades de almacenamiento que se va a asignar.</param>
      <param name="mappingItemCollection">Colección de elementos primarios de asignación.</param>
      <param name="generateUpdateViews">Marca que indica si se van a generar vistas de actualización.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Agrega una asignación de importación de función.</summary>
      <param name="functionImportMapping">Asignación de importación de función que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Agrega una asignación de conjunto de asociaciones.</summary>
      <param name="setMapping">Asignación de conjunto de asociaciones que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Agrega una asignación de conjunto de entidades.</summary>
      <param name="setMapping">Asignación de conjunto de entidades que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>Obtiene las asignaciones de conjunto de asociaciones.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>Obtiene la clase de tipo para este elemento</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>Obtiene el contenedor de entidades conceptual.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>Obtiene las asignaciones de conjunto de entidades.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>Obtiene las asignaciones de importación de función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>Obtiene una marca que indica si se van a generar vistas de actualización o no.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>Obtiene la colección de elementos primarios de asignación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Quita una asignación de importación de función.</summary>
      <param name="functionImportMapping">Asignación de importación de función que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Quita una asignación de conjunto de asociaciones.</summary>
      <param name="setMapping">Asignación de conjunto de asociaciones que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Quita una asignación de conjunto de asociaciones.</summary>
      <param name="setMapping">Asignación de conjunto de asociaciones que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>Obtiene el contenedor de entidades de almacenamiento.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>Representa los metadatos de asignación para una extensión en el espacio CS.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>Obtiene la asignación del contenedor principal.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>Obtiene o establece la vista de consulta asociada a esta asignación.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>Representa los metadatos de asignación para un EnitytSet en el espacio CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Inicializa una nueva instancia de EntitySetMapping.</summary>
      <param name="entitySet">Conjunto de entidades que se va a asignar.</param>
      <param name="containerMapping">Asignación del contenedor principal.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Agrega una asignación de función.</summary>
      <param name="modificationFunctionMapping">Asignación de función que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Agrega una asignación de tipo.</summary>
      <param name="typeMapping">La asignación del tipo que va a agregarse.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>Obtiene el conjunto de entidades que se asigna.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>Obtiene las asignaciones de tipos de entidad contenidas.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>Obtiene las asignaciones de función correspondientes.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Quita una asignación de función.</summary>
      <param name="modificationFunctionMapping">Asignación de función que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Quita una asignación de tipo.</summary>
      <param name="typeMapping">Asignación de tipo que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>Metadatos de asignación para el tipo de entidad.Si un EntitySet representa entidades de más de un tipo, habrá más de una EntityTypeMapping para un EntitySet (por ejemplo, si la extensión de la entidad PersonSet representa entidades de los tipos Person y Customer, tendremos dos asignaciones de EntityType en la asignación para PersonSet).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Crea una instancia de EntityTypeMapping.</summary>
      <param name="entitySetMapping">EntitySetMapping que contiene esta EntityTypeMapping.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Agrega un fragmento de asignación.</summary>
      <param name="fragment">Fragmento de asignación que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Agrega una jerarquía de tipos de entidad a la asignación.La jerarquía se representa mediante el tipo de entidad raíz especificado.</summary>
      <param name="type">EntityType raíz de la jerarquía que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Agrega un tipo de entidad a la asignación.</summary>
      <param name="type">EntityType que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>Obtiene la EntitySetMapping que contiene esta EntityTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>Obtiene el EntityType único que se va a asignar.Produce una excepción en caso de asignación del tipo de jerarquía.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>Obtiene los tipos de entidad asignados.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>Obtiene una colección de solo lectura de fragmentos de asignación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>Obtiene una marca que indica si se trata de una asignación de jerarquía de tipos.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>Obtiene los tipos base asignados para una asignación de jerarquía.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Quita un fragmento de asignación.</summary>
      <param name="fragment">Fragmento de asignación que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Quita una jerarquía de tipos de entidad de la asignación.La jerarquía se representa mediante el tipo de entidad raíz especificado.</summary>
      <param name="type">EntityType raíz de la jerarquía que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Quita un tipo de entidad de la asignación.</summary>
      <param name="type">EntityType que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>Describe las asignaciones de función de modificación para un tipo de entidad de un conjunto de entidades.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Inicializa una nueva instancia de EntityTypeModificationFunctionMapping.</summary>
      <param name="entityType">Tipo de entidad.</param>
      <param name="deleteFunctionMapping">Asignación de función de eliminación.</param>
      <param name="insertFunctionMapping">Asignación de función de inserción.</param>
      <param name="updateFunctionMapping">Asignación de función de actualización.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Obtiene la asignación de función de eliminación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>Obtiene el tipo de entidad.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>Obtiene la asignación de función de inserción.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString"></member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>Obtiene la asignación de función de actualización.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>Clase base para el tipo creado en tiempo de diseño para almacenar las vistas generadas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Obtiene o establece el nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nombre del contenedor.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Devuelve el par clave-valor situado en el índice especificado, que contiene la vista y su clave.</summary>
      <returns>El par clave-valor situado en el índice especificado, que contiene la vista y su clave.</returns>
      <param name="index">Índice de la vista.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Valor hash de vistas.</summary>
      <returns>Valor hash.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Valor hash.</summary>
      <returns>Valor hash.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Obtiene o establece <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> en el esquema de almacenamiento.</summary>
      <returns>El nombre del contenedor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>Obtiene o establece el recuento de vistas.</summary>
      <returns>El recuento de vistas.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>Atributo para marcar los ensamblados que contienen el tipo de vistas generado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" />.</summary>
      <param name="viewGenerationType">Tipo de vista.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Obtiene el T:System.Type de la vista.</summary>
      <returns>T:System.Type de la vista.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>Representa una asignación de tipo complejo para un resultado de importación de función.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>Inicializa una nueva instancia de FunctionImportComplexTypeMapping.</summary>
      <param name="returnType">Tipo de valor devuelto.</param>
      <param name="properties">Asignaciones de propiedad para el tipo de resultado de una importación de función.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>Obtiene el tipo de valor devuelto.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>Representa una asignación de tipo de entidad de una importación de función.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>Inicializa una nueva instancia de FunctionImportEntityTypeMapping.</summary>
      <param name="isOfTypeEntityTypes">Tipos de entidad en la base de las jerarquías de tipos que se van a asignar.</param>
      <param name="entityTypes">Tipos de entidad que se van a asignar.</param>
      <param name="properties">Asignaciones de propiedad para los tipos de resultado de una importación de función.</param>
      <param name="conditions">Condiciones de asignación.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>Obtiene las condiciones de asignación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>Obtiene los tipos de entidad que se van a asignar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>Obtiene los tipos de entidad en la base de las jerarquías que se van a asignar.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>Representa una condición de asignación para un resultado de importación de función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>Obtiene el nombre de la columna usada para evaluar la condición.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>Representa una condición de asignación para el resultado de una importación de función que se evalúa mediante la comprobación de valores NULL o distintos de NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de FunctionImportEntityTypeMappingConditionIsNull.</summary>
      <param name="columnName">Nombre de la columna usada para evaluar la condición.</param>
      <param name="isNull">Marca que indica si se realiza una comprobación de valores NULL o distintos de NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>Obtiene una marca que indica si se realiza una comprobación de valores NULL o distintos de NULL.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>Representa una condición de asignación para el resultado de una importación de función, que se evalúa mediante la comparación con un valor especificado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de FunctionImportEntityTypeMappingConditionValue.</summary>
      <param name="columnName">Nombre de la columna usada para evaluar la condición.</param>
      <param name="value">Valor con el que se va comparar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>Obtiene el valor usado para la comparación.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>Representa una asignación de una importación de función del modelo a una función de almacenamiento que admite composición o que no admite composición.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>Obtiene la función del modelo (o el origen de la asignación)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>Obtiene la función de almacenamiento (o el destino de la asignación)</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>Representa una asignación de una importación de función del modelo a una función de almacenamiento que admite composición.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Inicializa una nueva instancia de FunctionImportMappingComposable.</summary>
      <param name="functionImport">Importación de función del modelo.</param>
      <param name="targetFunction">Función de almacenamiento que admite composición.</param>
      <param name="resultMapping">Asignación del resultado para la importación de función.</param>
      <param name="containerMapping">Asignación del contenedor principal.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>Obtiene la asignación del resultado para la importación de función.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>Representa una asignación de una importación de función del modelo a una función de almacenamiento que no admite composición.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Inicializa una nueva instancia de FunctionImportMappingNonComposable.</summary>
      <param name="functionImport">Importación de función del modelo.</param>
      <param name="targetFunction">Función de almacenamiento que no admite composición.</param>
      <param name="resultMappings">Asignaciones del resultado para la importación de función.</param>
      <param name="containerMapping">Asignación del contenedor principal.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>Obtiene las asignaciones del resultado para la importación de función.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>Representa una asignación de resultado de una importación de función.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor"></member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Agrega una asignación de tipo.</summary>
      <param name="typeMapping">La asignación del tipo que va a agregarse.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Quita una asignación de tipo.</summary>
      <param name="typeMapping">Asignación de tipo que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>Obtiene las asignaciones de tipo.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>Clase base para asignar una propiedad de un tipo de valor devuelto de importación de función.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>Asigna una propiedad de tipo de valor devuelto de importación de función a una columna de tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de FunctionImportReturnTypeScalarPropertyMapping.</summary>
      <param name="propertyName">Nombre de la propiedad asignada.</param>
      <param name="columnName">Nombre de la columna asignada.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>Obtiene el nombre de la columna asignada.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>Obtiene el nombre de la propiedad asignada.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>Especifica una asignación de tipo estructural de una importación de función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>Obtiene las asignaciones de propiedad para el tipo de resultado de una importación de función.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>Especifica una condición de asignación que se evalúa comprobando si el valor de una propiedad o una columna es NULL o no.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>Crea una instancia de IsNullConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty que especifica una propiedad o una columna.</param>
      <param name="isNull">Valor booleano que indica si se va a realizar una comprobación de valores NULL o distintos de NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>Obtiene un valor booleano que especifica si la condición se evalúa realizando una comprobación de valores NULL o distintos de NULL.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>Representa la clase base de elemento para todos los metadatos de asignación</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>Representa los metadatos para el fragmento de asignación.Un conjunto de fragmentos de asignación compone las asignaciones de conjuntos (EntitySet, AssociationSet o CompositionSet) Cada MappingFragment proporciona la asignación de esas propiedades de un tipo que se asignan a una sola tabla.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>Crea una instancia de MappingFragment.</summary>
      <param name="storeEntitySet">EntitySet correspondiente a la tabla de la vista que se va a asignar.</param>
      <param name="typeMapping">TypeMapping que contiene este MappingFragment.</param>
      <param name="makeColumnsDistinct">Marca que indica si se debe incluir 'DISTINCT' al generar consultas.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Agrega una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Agrega una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>Obtiene una colección de solo lectura de condiciones de asignación de propiedad.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>Obtiene una marca que indica si se debe incluir 'DISTINCT' al generar consultas.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>Obtiene una colección de solo lectura de asignaciones de propiedad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Quita una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Quita una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>Obtiene el EntitySet correspondiente a la tabla o la vista que se va a asignar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>Obtiene el TypeMapping que contiene este MappingFragment.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>Clase base para los elementos del espacio de asignación (DataSpace.CSSpace)</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor"></member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Clase para representar una colección de elementos de asignación en el espacio de Edm.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>Describe el enlace de la función de modificación para el procesamiento de cambios de entidades o asociaciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>Inicializa una nueva instancia de ModificationFunctionMapping.</summary>
      <param name="entitySet">Conjunto de entidades o asociaciones.</param>
      <param name="entityType">Tipo de entidad o asociación.</param>
      <param name="function">Metadatos de la función a la que se debe enlazar.</param>
      <param name="parameterBindings">Enlaces para parámetros de función.</param>
      <param name="rowsAffectedParameter">Parámetro de salida que produce el número de filas afectadas.</param>
      <param name="resultBindings">Enlaces para los resultados de la evaluación de función</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>Obtiene metadatos de la función a la que se debe enlazar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>Obtiene enlaces para parámetros de función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>Obtiene enlaces para los resultados de la evaluación de función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>Obtiene el parámetro de salida que produce el número de filas afectadas.Puede ser NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>Describe la ubicación de un miembro dentro de una estructura de tipo de entidad o de asociación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>Inicializa una nueva instancia de ModificationFunctionMemberPath.</summary>
      <param name="members">Obtiene los miembros de la ruta de acceso desde la hoja (el miembro que se enlaza) hasta la raíz de la estructura.</param>
      <param name="associationSet">Obtiene el conjunto de asociaciones al que se va a navegar a través de este miembro.Si el valor es NULL, no es una ruta de acceso de miembro de navegación.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>Obtiene el conjunto de asociaciones al que se va a navegar a través de este miembro.Si el valor es NULL, no es una ruta de acceso de miembro de navegación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>Obtiene los miembros de la ruta de acceso desde la hoja (el miembro que se enlaza) hasta la raíz de la estructura.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>Enlaza un parámetro de función de modificación a un miembro de la entidad o la asociación que se va a modificar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>Inicializa una nueva instancia de ModificationFunctionParameterBinding.</summary>
      <param name="parameter">Parámetro que toma el valor.</param>
      <param name="memberPath">Ruta de acceso al miembro de entidad o de asociación que define el valor.</param>
      <param name="isCurrent">Marca que indica si el valor del miembro actual u original se va a enlazar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>Obtiene una marca que indica si el valor del miembro actual u original se va a enlazar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>Obtiene la ruta de acceso al miembro de entidad o de asociación que define el valor.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>Obtiene el parámetro que toma el valor.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>Define un enlace de una columna de conjunto de resultados con nombre a un miembro que toma el valor.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Inicializa una nueva instancia de ModificationFunctionResultBinding.</summary>
      <param name="columnName">Nombre de la columna que se va a enlazar desde el conjunto de resultados de la función.</param>
      <param name="property">Propiedad que se va a establecer en la entidad.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>Obtiene el nombre de la columna que se va a enlazar desde el conjunto de resultados de la función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>Obtiene la propiedad que se va a establecer en la entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString"></member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>Metadatos de asignación para todos los tipos de asignaciones de propiedad.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>Obtiene una EdmProperty que especifica la propiedad asignada.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>Metadatos de asignación para propiedades escalares.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Crea una asignación entre una propiedad simple y una columna.</summary>
      <param name="property">Propiedad que se va a asignar.</param>
      <param name="column">Columna que se va a asignar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>Obtiene una EdmProperty que especifica la columna asignada.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>Representa una colección de elementos en el espacio de asignación de almacenamiento (asignación CS).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> utilizando los objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> y los lectores XML especificados.</summary>
      <param name="edmCollection">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> que esta asignación va a usar.</param>
      <param name="storeCollection">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> que esta asignación va a usar.</param>
      <param name="xmlReaders">Lectores XML que esta asignación va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> utilizando los objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> especificados y una colección de cadenas que indica las rutas de archivos de metadatos.</summary>
      <param name="edmCollection">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> que esta asignación va a usar.</param>
      <param name="storeCollection">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> que esta asignación va a usar.</param>
      <param name="filePaths">Rutas de acceso a archivos que esta asignación va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>Calcula un valor hash de la asignación del contenedor único de la colección.</summary>
      <returns>Una cadena que especifica el valor hash calculado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>Calcula un valor hash de la asignación del contenedor especificado por los nombres de los contenedores asignados.</summary>
      <returns>Una cadena que especifica el valor hash calculado.</returns>
      <param name="conceptualModelContainerName">El nombre del contenedor del modelo conceptual.</param>
      <param name="storeModelContainerName">El nombre del contenedor del modelo de almacenamiento.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Método de generador que crea una clase <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Instancia de <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> si no se encontraron errores.De lo contrario, es null.</returns>
      <param name="edmItemCollection">Colección de metadatos de EDM que se van a asignar.No debe ser null.</param>
      <param name="storeItemCollection">Colección de metadatos de almacenamiento que se van a asignar.No debe ser null.</param>
      <param name="xmlReaders">Artefactos de MSL que se van a cargar.No debe ser null.</param>
      <param name="filePaths">Rutas de acceso a los artefactos de MSL.Se usa en los mensajes de error.Puede ser null, en cuyo caso se usará el URI base del XmlReader como ruta de acceso.</param>
      <param name="errors">Recopilación de errores encontrados durante la carga.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Crea un diccionario de (extensión, vista generada) de la asignación del contenedor único de la colección.</summary>
      <returns>Un diccionario de ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> ) que especifica las vistas generadas.</returns>
      <param name="errors">Una lista que acumula potenciales errores.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Crea un diccionario de (extensión, vista generada) de una asignación de contenedor especificada por los nombres de los contenedores asignados.</summary>
      <returns>Un diccionario de ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> ) que especifica las vistas generadas.</returns>
      <param name="conceptualModelContainerName">El nombre del contenedor del modelo conceptual.</param>
      <param name="storeModelContainerName">El nombre del contenedor del modelo de almacenamiento.</param>
      <param name="errors">Una lista que acumula potenciales errores.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>Obtiene la versión que representa este <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>La versión que representa este <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>Obtiene o define un <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> para crear instancias <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> que se utilizan para recuperar vistas de asignación pregeneradas.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>Especifica una asignación de tipo estructural.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Agrega una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Agrega una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>Obtiene una colección de solo lectura de condiciones de asignación de propiedad.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>Obtiene una colección de solo lectura de asignaciones de propiedad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Quita una condición de asignación de propiedad.</summary>
      <param name="condition">Condición de asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Quita una asignación de propiedad.</summary>
      <param name="propertyMapping">Asignación de propiedad que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>Representa los metadatos de asignación para una asignación de tipo en el espacio CS.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>Especifica una condición de asignación que se evalúa comparando el valor de una propiedad o una columna con un valor especificado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>Crea una instancia de ValueConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty que especifica una propiedad o una columna.</param>
      <param name="value">Objeto que especifica el valor con el que se va a comparar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>Obtiene un objeto que especifica el valor con el que se va a comparar.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>Representa un extremo de un tipo de asociación</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de AssociationEndMember.</summary>
      <returns>Instancia de AssociationEndMember recién creada.</returns>
      <param name="name">Nombre del miembro extremo de asociación.</param>
      <param name="endRefType">Tipo de referencia del extremo.</param>
      <param name="multiplicity">Multiplicidad del extremo.</param>
      <param name="deleteAction">Marca que indica el comportamiento de eliminación del extremo.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentException">El nombre especificado es NULL o está vacío.</exception>
      <exception cref="T:System.ArgumentNullException">El tipo de referencia especificado es NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>Clase para representar un conjunto de asociaciones</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Obtiene los extremos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene los extremos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la modalidad del tipo integrado de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de AssociationSet de solo lectura a partir de los parámetros especificados.</summary>
      <returns>Instancia de AssociationSet recién creada.</returns>
      <param name="name">Nombre del conjunto de asociaciones.</param>
      <param name="type">Tipo de asociación de los elementos del conjunto de asociaciones.</param>
      <param name="sourceSet">Conjunto de entidades para el extremo del conjunto de asociaciones de origen.</param>
      <param name="targetSet">Conjunto de entidades para el extremo del conjunto de asociaciones de destino.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentException">El nombre especificado es NULL o está vacío.</exception>
      <exception cref="T:System.ArgumentNullException">El tipo de asociación especificado es NULL.</exception>
      <exception cref="T:System.ArgumentException">El tipo de entidad de uno de los extremos del tipo de asociación especificado no coincide con el tipo de entidad del extremo del conjunto de entidades correspondiente.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>Obtiene la asociación relacionada con <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> que representa la asociación relacionada con <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>Clase que representa un extremo de AssociationSet</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Obtiene el miembro del extremo al que corresponde este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> que representa el miembro del extremo al que corresponde este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Obtiene el conjunto de entidades al que hace referencia este rol de extremo.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> que representa el conjunto de entidades al que hace referencia este rol de extremo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Obtiene el nombre del extremo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nombre del extremo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Obtiene el conjunto de asociaciones primario de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> que representa el conjunto de asociaciones primario de <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Obtiene el nombre del rol del extremo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nombre del rol del extremo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Devuelve el nombre del rol del extremo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Nombre del rol del extremo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>Describe una asociación o relación entre dos entidades del modelo conceptual o una relación de clave externa entre dos tablas en el modelo de almacenamiento.En el modelo conceptual la clase dependiente puede o no definir una propiedad de clave externa.Si se define una clave externa la propiedad <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> será true y la propiedad <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> contendrá detalles de las claves externas</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Obtiene la lista de extremos para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de extremos para <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>Obtiene o define la restricción referencial.</summary>
      <returns>La restricción referencial.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de AssociationType de solo lectura a partir de los parámetros especificados.</summary>
      <returns>Instancia de AssociationType recién creada.</returns>
      <param name="name">Nombre del tipo de asociación.</param>
      <param name="namespaceName">Espacio de nombres del tipo de asociación.</param>
      <param name="foreignKey">Marca que indica una relación de clave externa (FK).</param>
      <param name="dataSpace">Espacio de datos para el tipo de asociación.</param>
      <param name="sourceEnd">Miembro del extremo de asociación de origen.</param>
      <param name="targetEnd">Miembro del extremo de asociación de destino.</param>
      <param name="constraint">Restricción referencial.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentException">El nombre especificado es NULL o está vacío.</exception>
      <exception cref="T:System.ArgumentException">El espacio de nombres especificado es NULL o está vacío.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Obtiene un valor de propiedad booleano que especifica si la columna es una clave externa.</summary>
      <returns>Valor booleano que especifica si la columna es una clave externa.Si es true, la columna es una clave externa.Si es false (valor predeterminado), la columna no es una clave externa.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Obtiene la lista de restricciones de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de restricciones para <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>Lista de todos los tipos integrados</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Clase de tipo de asociación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Clase AssociationSet</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Clase AssociationSetEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Clase de tipo de asociación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Clase de colección</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Clase de tipo de colección</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Clase de tipo complejo</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Clase de documentación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Clase de EdmFunction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Clase de tipo EdmMember</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Clase de tipo EdmProperty</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Clase de tipo Edm</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Clase de contenedor de entidades</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Clase de conjunto de entidades</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Clase EntitySetBase</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Clase de tipo de entidad</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Clase base de tipo de entidad</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Clase de miembro de enumeración</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Clase de tipo de enumeración</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Clase de faceta</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Clase de parámetro de función</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Clase de tipo de elemento global</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Clase de tipo de elemento de metadatos</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Clase de propiedad de metadatos</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Clase de propiedad de navegación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Clase de tipo DeleteAction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Clase de modo de parámetro</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Clase de tipo primitivo</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Clase de tipo primitivo</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Clase de tipo ProviderManifest</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Clase de tipo de restricción referencial</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Clase de tipo de referencia</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Clase de tipo RelationshipEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Clase de tipo de multiplicidad de relación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Clase de tipo de conjunto de relaciones</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Tipo de relación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Clase de tipo de fila</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Clase de tipo simple</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Clase de tipo estructural</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Clase de información de tipos</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>Clase de colección (aplicada a las propiedades)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>La colección tiene semántica para contenedores (puede estar sin ordenar y tener duplicados)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>La colección tiene semántica de lista (el orden es determinista y se aceptan duplicados)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>La propiedad no es una colección</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Representa el tipo de colección de Edm</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Obtiene la instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene el tipo del elemento que incluye este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> actual y las facetas de ese tipo.</summary>
      <returns>Instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene el tipo del elemento que incluye este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> actual y las facetas de ese tipo.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Representa el tipo complejo de Edm.Se puede utilizar para configurar tipos completos desde una convención basada en modelos de espacio conceptual.No se admiten tipos complejos en el modelo de almacenamiento.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una nueva instancia del tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Nueva instancia del tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
      <param name="name">El nombre del tipo complejo.</param>
      <param name="namespaceName">Espacio de nombres del tipo complejo.</param>
      <param name="dataSpace">Espacio de datos al que pertenece el tipo complejo.</param>
      <param name="members">Miembros del tipo complejo.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentNullException">Se produce si el argumento name, namespace o members es NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>Obtiene la lista de propiedades de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades para <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>Modo de simultaneidad de las propiedades.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Modo de simultaneidad fijo: la propiedad siempre se valida en tiempo de escritura</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>Modo de simultaneidad predeterminado: la propiedad nunca se valida en tiempo de escritura</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>Serializa un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> que cumple las restricciones de un único archivo de esquema CSDL en un sistema de escritura XML.El modelo que se va a serializar debe contener un solo <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor"></member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>Se produce cuando se produce un error al serializar el modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>Serializa <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> en el XmlWriter.</summary>
      <returns>Es true si el modelo es válido; de lo contrario, es false.</returns>
      <param name="model">EdmModel que se va a serializar.</param>
      <param name="xmlWriter">XmlWriter en el que se va a serializar.</param>
      <param name="modelNamespace">Espacio de nombres del modelo serializado.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Información acerca de un error que se produjo procesando un modelo de Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor"></member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>Obtiene un mensaje descriptivo opcional que describe el error que se va a provocar.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>Obtiene un valor que indica la <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> que produjo el evento.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>Obtiene un valor opcional que indica qué propiedad del elemento de origen produjo el evento.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace indica el elemento en el CSpace - tipos primitivos de edm + tipos definidos en csdl</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>Asignación entre CSpace y SSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>Asignación entre OSpace y CSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace indica el elemento en el espacio de CLR</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace indica el elemento en el espacio S</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>Métodos de extensión para <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Obtiene el modelo conceptual del DbModel especificado.</summary>
      <returns>Instancia de EdmModel que representa el modelo conceptual.</returns>
      <param name="model">Instancia de una clase que implementa IEdmModelAdapter (por ejemplo,DbModel).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Obtiene el modelo de almacenamiento del DbModel especificado.</summary>
      <returns>Instancia de EdmModel que representa el modelo de almacenamiento.</returns>
      <param name="model">Instancia de una clase que implementa IEdmModelAdapter (por ejemplo,DbModel).</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>Clase que representa la documentación asociada a un elemento</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de Documentation.</summary>
      <param name="summary">Cadena de resumen.</param>
      <param name="longDescription">Cadena de descripción larga.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>Obtiene un valor que indica si este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> contiene solamente un valor null o un valor vacío para <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> y <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" /> .</summary>
      <returns>Es true si este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> contiene solamente un valor null o un <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> vacío y un <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" /> ; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>Obtiene la descripción larga de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>La descripción larga de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>Obtiene el resumen de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>El resumen de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>Devuelve el resumen de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>El resumen de este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>Esta clase encapsula la información de error para un error genérico de EDM.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>Obtiene el mensaje de error.</summary>
      <returns>Mensaje de error.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>Clase para representar una función</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>Agrega un parámetro a esta función.</summary>
      <param name="functionParameter">Parámetro que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>Obtiene el atributo agregado de esta función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>Obtiene un valor que indica si el atributo integrado está o no presente en esta función.</summary>
      <returns>Es true si el atributo está presente; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Uno de los valores de enumeración de la enumeración de <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Obtiene una consulta en el lenguaje utilizado por el sistema de administración de bases de datos o el modelo de almacenamiento.</summary>
      <returns>Una valor de cadena en la sintaxis utilizada por el sistema de administración de bases de datos o el modelo de almacenamiento que contiene la consulta o instrucción de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Método de generador para construir el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Nueva instancia de solo lectura del tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Nombre de la función.</param>
      <param name="namespaceName">Espacio de nombres de la función.</param>
      <param name="dataSpace">Espacio de nombres al que pertenece la función.</param>
      <param name="payload">Atributos y propiedades de función adicionales.</param>
      <param name="metadataProperties">Propiedades de metadatos que se agregarán a la función.Puede ser NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>Devuelve el nombre completo (el espacio de nombres más el nombre) de este tipo.</summary>
      <returns>Nombre completo del tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>Obtiene si esta instancia está asignada a una función o a un procedimiento almacenado.</summary>
      <returns>Es true si esta instancia está asignada a una función; es false si la instancia está asignada a un procedimiento almacenado.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>Obtiene un valor que indica si esta instancia procede o no del manifiesto del proveedor.</summary>
      <returns>Es true si esta instancia procede del manifiesto del proveedor; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>Obtiene un valor que indica si es o no una función niládica (una función que no acepta argumentos).</summary>
      <returns>Es true si la función es niládica; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>Obtiene los parámetros de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene los parámetros de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>Obtiene el atributo semántico del tipo parámetro es esta función.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Obtiene el parámetro devuelto de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> que representa el parámetro devuelto de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>Obtiene los parámetros devueltos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que representa los parámetros devueltos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>Obtiene o define el esquema asociado a la función.</summary>
      <returns>El esquema asociado a la función.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>Obtiene el atributo del nombre de la función de almacenamiento de esta función.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>Contiene atributos y propiedades adicionales de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /></summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor"></member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>Obtiene o define el texto de comando asociado a la función.</summary>
      <returns>El texto de comando asociado a la función.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>Obtiene o define los conjuntos de entidades de la función.</summary>
      <returns>Los conjuntos de entidades de la función.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>Obtiene o define un valor que indica si es o no una función de agregado.</summary>
      <returns>Es true si es una función de agregado; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>Obtiene o define si esta función es una función integrada.</summary>
      <returns>Es true si esta función es una función integrada; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>Obtiene o define si esta función es una función de almacenamiento en caché.</summary>
      <returns>Es true si esta función es una función de almacenamiento en caché; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>Obtiene o define si esta función puede ser o no compuesta.</summary>
      <returns>Es true si es una función que puede ser compuesta; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>Obtiene o define si esta función procede o no de un manifiesto de proveedor.</summary>
      <returns>Es true si esta función procede de un manifiesto de proveedor; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>Obtiene o define si esta función es una importación de función.</summary>
      <returns>Es true si esta función es una importación de función; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>Obtiene o define si la función no contiene ningún argumento.</summary>
      <returns>Es true si la función no contiene ningún argumento; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>Obtiene o define los parámetros de la función.</summary>
      <returns>Los parámetros de la función.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>Obtiene o define la semántica del tipo del parámetro.</summary>
      <returns>La semántica del tipo del parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>Obtiene o define los parámetros de devolución.</summary>
      <returns>Los parámetros de devolución.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>Obtiene o define el esquema de la función.</summary>
      <returns>El esquema de la función.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>Obtiene o define el nombre de la función de almacenamiento.</summary>
      <returns>El nombre de la función de almacenamiento.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Clase para representar una colección de elementos en el espacio de Edm.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> utilizando la colección de objetos del lector XMLReader en los que existen archivos de lenguaje de definición de esquema conceptual (CSDL).</summary>
      <param name="xmlReaders">Colección de objetos del lector XMLReader en los que existen archivos de lenguaje de definición de esquema conceptual (CSDL)</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <param name="model">Modelo de datos de entidad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> mediante el uso de las rutas en las que existen los archivos del CSDL.</summary>
      <param name="filePaths">Las rutas en las que existen los archivos del CSDL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Método de generador que crea una clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> si no se encontraron errores.De lo contrario, es null.</returns>
      <param name="xmlReaders">Artefactos de CSDL que se van a cargar.No debe ser null.</param>
      <param name="filePaths">Rutas de acceso a los artefactos de CSDL.Se usa en los mensajes de error.Puede ser null, en cuyo caso se usará el URI base del XmlReader como ruta de acceso.</param>
      <param name="errors">Recopilación de errores encontrados durante la carga.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Obtiene la versión del modelo conceptual de esta colección.</summary>
      <returns>La versión del modelo conceptual de esta colección.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Devuelve una colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Un objeto ReadOnlyCollection que representa una colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>Devuelve una colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> con la versión del modelo conceptual especificado.</summary>
      <returns>Un objeto ReadOnlyCollection que representa una colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="edmVersion">La versión del modelo conceptual.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>Representa la clase de miembro de edm</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Obtiene el tipo con el que se declara este miembro </summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo con el que se declara este miembro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>Indica si este miembro está marcado como un miembro calculado en la definición de EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>Indica si el modelo generado de almacenamiento de este miembro está marcado como Identity en la definición de EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>Obtiene o establece el nombre de la propiedad.Establecerlo desde una convención modelo del espacio de almacenamiento cambiará el nombre de la columna de la base de datos para esta propiedad.En el modelo conceptual, esto estaría alineado con la propiedad correspondiente de la clase de entidad y no se debería cambiar.</summary>
      <returns>Nombre de este miembro.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>Devuelve el nombre de este miembro.</summary>
      <returns>Nombre de este miembro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Obtiene la instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo del miembro como las facetas del tipo.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo del miembro como las facetas del tipo.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>Agrega un modelo conceptual o de almacenamiento.Esta clase se puede utilizar para tener acceso a la información sobre la forma del modelo y cómo se ha configurado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Agrega un tipo de asociación al modelo.</summary>
      <param name="item">Instancia de AssociationType que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Agrega un tipo complejo al modelo.</summary>
      <param name="item">Instancia de ComplexType que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Agrega una función al modelo.</summary>
      <param name="item">Instancia de EdmFunction que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Agrega un tipo de entidad al modelo.</summary>
      <param name="item">Instancia de EntityType que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Agrega un tipo de enumeración al modelo.</summary>
      <param name="item">Instancia de EnumType que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>Obtiene los tipos de asociación del modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado para este tipo.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado para este tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>Obtiene los tipos complejos del modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>Obtiene el contenedor que almacena los conjuntos de entidades y asociaciones, así como las importaciones de funciones.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>Obtiene el espacio de datos asociados con el modelo, que indica si se trata de un modelo conceptual (DataSpace.CSpace) o un modelo de almacenamiento (DataSpace.SSpace).</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>Obtiene los tipos de entidad del modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>Obtiene los tipos de enumeración del modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>Obtiene las funciones del modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>Obtiene los elementos globales asociados al modelo.</summary>
      <returns>Los elementos globales asociados al modelo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Quita un tipo de asociación del modelo.</summary>
      <param name="item">Instancia de AssociationType que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Quita un tipo complejo del modelo.</summary>
      <param name="item">Instancia de ComplexType que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Quita una función del modelo.</summary>
      <param name="item">Instancia de EdmFunction que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Quita un tipo de entidad del modelo.</summary>
      <param name="item">Instancia de EntityType que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Quita un tipo de enumeración del modelo.</summary>
      <param name="item">Instancia de EnumType que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>En el espacio conceptual, EdmProperty representa una propiedad en una entidad.En el espacio de almacenamiento, EdmProperty representa una columna en una tabla.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>Obtiene o define la clase de colección de este modelo.</summary>
      <returns>La clase de colección de este modelo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>Obtiene la información de tipo complejo de esta propiedad.</summary>
      <returns>La información de tipo complejo de esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>Obtiene o define el modo de simultaneidad de la propiedad.</summary>
      <returns>El modo de simultaneidad de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Crea una nueva instancia de un tipo EdmProperty.</summary>
      <returns>Nueva instancia de un tipo EdmProperty</returns>
      <param name="name">Nombre de la propiedad.</param>
      <param name="typeUsage">Propiedad <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Crea una nueva propiedad compleja.</summary>
      <returns>Propiedad recién creada.</returns>
      <param name="name">Nombre de la propiedad.</param>
      <param name="complexType">Tipo de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Crea una nueva propiedad de enumeración.</summary>
      <returns>Propiedad recién creada.</returns>
      <param name="name">Nombre de la propiedad.</param>
      <param name="enumType">Tipo de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Crea una nueva propiedad primitiva.</summary>
      <returns>Propiedad recién creada.</returns>
      <param name="name">Nombre de la propiedad.</param>
      <param name="primitiveType">Tipo de la propiedad.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Obtiene el valor predeterminado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Valor predeterminado para esta <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>Obtiene la información de tipo enumeración de esta propiedad.</summary>
      <returns>La información de tipo enumeración de esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>Obtiene si la propiedad es una propiedad de tipo colección.</summary>
      <returns>Estrue si es una propiedad de tipo colección; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>Obtiene si esta propiedad es una propiedad de tipo complejo.</summary>
      <returns>Estrue si es una propiedad de tipo complejo; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>Obtiene si esta propiedad es una propiedad de tipo enumeración.</summary>
      <returns>Estrue si es una propiedad de tipo enumeración; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>Obtiene o define si la longitud de esta propiedad es o no fija.</summary>
      <returns>Es true si la longitud de esta propiedad es fija; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>Obtiene si la faceta de longitud fija es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>Obtiene o define si esta propiedad utiliza o no la longitud máxima admitida por el proveedor.</summary>
      <returns>Es true si esta propiedad utiliza la longitud máxima admitida por el proveedor; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>Obtiene si la faceta de longitud máxima es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>Obtiene si la faceta de precisión es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>Obtiene si esta propiedad es una propiedad de tipo primitivo.</summary>
      <returns>Estrue si es una propiedad de tipo primitivo; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>Obtiene si la faceta de escala es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>Obtiene si esta propiedad es una propiedad de tipo primitivo subyacente.</summary>
      <returns>Estrue si es una propiedad de tipo primitivo subyacente; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>Obtiene o define si esta propiedad es o no una propiedad de Unicode.</summary>
      <returns>Estrue si es una propiedad de Unicode; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>Obtiene si la faceta de Unicode es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>Obtiene o establece la longitud máxima de la propiedad.</summary>
      <returns>Longitud máxima de la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> puede tener un valor Null.</summary>
      <returns>Es true si <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> puede tener un valor Null; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>Obtiene o define la precisión de esta propiedad.</summary>
      <returns>Precisión de esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>Obtiene la información de tipo primitiva de esta propiedad.</summary>
      <returns>La información de tipo primitiva de esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>Obtiene o establece la escala de esta propiedad.</summary>
      <returns>Escala de esta propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Define las propiedades de metadatos.</summary>
      <param name="metadataProperties">Las propiedades de metadatos que van a definirse.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>Obtiene o define el método de generación de la base de datos para la columna de la base de datos asociada a esta propiedad</summary>
      <returns>Patrón generado por el almacén para la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>Obtiene el nombre del tipo de la propiedad.</summary>
      <returns>El nombre del tipo de la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>Obtiene la información de tipo primitiva subyacente de esta propiedad.</summary>
      <returns>La información de tipo primitiva subyacente de esta propiedad.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>Esta clase encapsula la información de error para un error de esquema que se encontró.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>Crea un objeto EdmSchemaError.</summary>
      <param name="message">Explicación del error.</param>
      <param name="errorCode">Código asociado a este error.</param>
      <param name="severity">Gravedad del error.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>Obtiene la columna donde se produjo el error.</summary>
      <returns>Columna donde se produjo el error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Obtiene el código de error.</summary>
      <returns>Código de error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>Obtiene el número de línea donde se produjo el error.</summary>
      <returns>Número de línea donde se produjo el error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Obtiene la ubicación del esquema que contiene el error.La cadena también incluye el nombre del esquema al final.</summary>
      <returns>Ubicación del esquema que contiene el error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Obtiene el nombre del esquema que contiene el error.</summary>
      <returns>Nombre del esquema que contiene el error.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Obtiene la gravedad del error.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" />.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Obtiene una representación de cadena del seguimiento de la pila cuando se produjo el error.</summary>
      <returns>Representación de cadena del seguimiento de la pila cuando se produjo el error.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Devuelve el mensaje de error.</summary>
      <returns>Mensaje de error.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Define los diferentes grados de severidad de los errores que se producen al validad un modelo de Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Un error que impide que el modelo sea utilizado.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Una advertencia que no impide que el modelo sea utilizado.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>Clase base de EdmType para todos los tipos de modelos</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>Obtiene un valor que indica si el este tipo es abstracto o no.</summary>
      <returns>true si este tipo es abstracto; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>Obtiene el tipo base de este tipo.</summary>
      <returns>Tipo base de este tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>Obtiene el nombre completo de este tipo.</summary>
      <returns>Nombre completo de este tipo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Devuelve una instancia del <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> cuyo tipo de elementos es este.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> cuyo tipo de elementos es este.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>Obtiene el nombre de este tipo.</summary>
      <returns>Nombre de este tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>Obtiene el espacio de nombres de este tipo.</summary>
      <returns>Espacio de nombres de este tipo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>Devuelve el nombre completo de este tipo.</summary>
      <returns>Nombre completo de este tipo.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>Clase para representar un contenedor de entidades</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Agrega una importación de función al contenedor.</summary>
      <param name="function">Importación de función que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>Obtiene los conjuntos asociados a este contenedor de entidades.</summary>
      <returns>Los conjuntos asociados a este contenedor de entidades.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Obtiene una lista de los conjuntos de entidades y los conjuntos de asociaciones que este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> incluye.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene una lista de los conjuntos de entidades y los conjuntos de asociaciones que este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> incluye.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Método de generador para construir el objeto EntityContainer.</summary>
      <returns>Objeto EntityContainer.</returns>
      <param name="name">El nombre del contenedor de entidades que va a crearse.</param>
      <param name="dataSpace">El DataSpace de datos al cual pertenece este contenedor de entidades.</param>
      <param name="entitySets">Los conjuntos de entidades que van a incluirse en el nuevo contenedor.Puede ser NULL.</param>
      <param name="functionImports">Las funciones que van a incluirse en el nuevo contenedor.Puede ser NULL.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentException">Se produce si el argumento name es NULL o una cadena vacía.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>Obtiene los conjuntos de entidades de este contenedor de entidades.</summary>
      <returns>Los conjuntos de entidades de este contenedor de entidades.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Especifica una colección de elementos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.Cada función contiene los detalles de un procedimiento almacenado que existe en la base de datos o la propiedad CommandText equivalente asignada a una entidad y sus propiedades.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene elementos <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> mediante el uso del nombre especificado para el conjunto de entidades.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> que representa el conjunto de entidades que tiene el nombre especificado.</returns>
      <param name="name">Nombre del conjunto de entidades que se busca.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> mediante el uso del nombre especificado para el conjunto de relaciones.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> que representa el conjunto de relaciones que tiene el nombre especificado.</returns>
      <param name="name">Nombre del conjunto de relaciones que se busca.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>Obtiene el nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Quita un conjunto de entidades específico del contenedor.</summary>
      <param name="entitySetBase">Conjunto de entidades que se va a quitar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>Devuelve el nombre de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> mediante el uso del nombre especificado para el conjunto de entidades.</summary>
      <returns>true si hay un conjunto de entidades que coincide con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del conjunto de entidades que se busca.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="entitySet">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.Si no hay conjuntos de entidades, este parámetro de salida contiene null.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> mediante el uso del nombre especificado para el conjunto de relaciones.</summary>
      <returns>true si hay un conjunto de relaciones que coincide con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del conjunto de relaciones que se busca.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="relationshipSet">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>Representa un uso especial de una estructura definida en EntityType.En el modelo conceptual representa un conjunto que puede consultar y conservar entidades.En el modelo de almacenamiento representa una tabla.Desde una convención modelo del espacio de almacenamiento se puede utilizar para configurar el nombre de tabla con la propiedad <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> y el esquema de tabla con la propiedad <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Método de generador para construir el objeto EntitySet.</summary>
      <returns>Objeto EntitySet.</returns>
      <param name="name">Nombre del EntitySet.</param>
      <param name="schema">Esquema de la base de datos.Puede ser NULL.</param>
      <param name="table">Tabla de la base de datos.Puede ser NULL.</param>
      <param name="definingQuery">Consulta específica del proveedor que se debe usar para recuperar datos para este EntitySet.Puede ser NULL.</param>
      <param name="entityType">Tipo de entidad de las entidades que este tipo de conjunto de entidades contiene.</param>
      <param name="metadataProperties">Propiedades de metadatos que se agregarán al EntitySet recién creado.Puede ser NULL.</param>
      <exception cref="T:System.ArgumentException">Se produce si el argumento name es NULL o una cadena vacía.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>Obtiene el tipo de entidad de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> que representa el tipo de entidad de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>Clase para representar un conjunto de entidades</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>Obtiene SQL con escape específico del proveedor que describe este conjunto de entidades.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Obtiene el tipo de entidad de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> que representa el tipo de entidad de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Obtiene el contenedor de entidades del conjunto de relaciones o entidades actual.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> que representa el contenedor de entidades del conjunto de relaciones o entidades actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>Obtiene o establece el nombre del conjunto de relaciones o entidades actual.Si la propiedad se cambia desde el espacio de almacenamento, también se deberá actualizar el nivel de asignación para reflejar el nombre nuevo.Para cambiar el nombre de tabla de un espacio de almacenamiento <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> use la propiedad de tabla.</summary>
      <returns>Nombre del conjunto de relaciones o entidades actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>Obtiene o establece el esquema de la base de datos para este conjunto de entidades.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>Obtiene o establece el nombre de la tabla de la base de datos para este conjunto de entidades.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>Devuelve el nombre del conjunto de relaciones o entidades actual.</summary>
      <returns>Nombre del conjunto de relaciones o entidades actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>Representa la estructura de un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.En el modelo conceptual representa la forma y estructura de una entidad.En el modelo de almacenamiento representa la estructura de una tabla.Para cambiar el esquema y el nombre de tabla, use EntitySet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Agrega la propiedad de navegación especificada a los miembros de este tipo.La propiedad de navegación se agrega independientemente de la marca de solo lectura.</summary>
      <param name="property">Propiedad de navegación que se va a agregar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Método de generador para construir el objeto EntityType.</summary>
      <returns>Objeto EntityType.</returns>
      <param name="name">Nombre del tipo de entidad.</param>
      <param name="namespaceName">Espacio de nombres del tipo de entidad.</param>
      <param name="dataSpace">Espacio de datos al que pertenece el EntityType.</param>
      <param name="keyMemberNames">Nombre de los miembros clave para el tipo.</param>
      <param name="members">Miembros del tipo de entidad (propiedades primitivas y de navegación).</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar a la instancia.</param>
      <exception cref="T:System.ArgumentException">Se produce si cualquier name o namespace es NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>Obtiene la colección de miembros declarados del tipo de entidad.</summary>
      <returns>La colección de miembros declarados del tipo de entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>Obtiene las propiedades de navegación declaradas asociadas al tipo de entidad.</summary>
      <returns>Las propiedades de navegación declaradas asociadas al tipo de entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>Obtiene la lista de propiedades declaradas del tipo de entidad.</summary>
      <returns>Las propiedades declaradas del tipo de entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> que hace referencia a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> .</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> que hace referencia a <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Obtiene las propiedades de navegación de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades de navegación para <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>Obtiene la lista de propiedades de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades para <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>Representa el tipo de entidad</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Agrega la propiedad especificada a la lista de claves para la entidad actual.</summary>
      <param name="member">Propiedad que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">si el argumento member es NULL</exception>
      <exception cref="T:System.InvalidOperationException">Se produce si el EntityType tiene un tipo base de otro EntityTypeBase.En este caso, KeyMembers debe agregarse al tipo base</exception>
      <exception cref="T:System.InvalidOperationException">Si la instancia de EntityType está en estado ReadOnly (solo lectura)</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Obtiene la lista de todos los miembros clave del tipo de relación o entidad actual.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que representa la lista de miembros clave para el tipo de relación o entidad actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>Obtiene la lista de todas las propiedades de clave para este tipo de entidad.</summary>
      <returns>La lista de todas las propiedades de clave para este tipo de entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Quita el miembro de clave especificado de la colección.</summary>
      <param name="member">El miembro de clave que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>Representa un miembro de enumeración.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>Obtiene la clase de este tipo.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumMember.</summary>
      <returns>Instancia de EnumMember recién creada.</returns>
      <param name="name">Nombre del miembro de enumeración.</param>
      <param name="value">Valor del miembro de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al miembro de enumeración.</param>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumMember.</summary>
      <returns>Instancia de EnumMember recién creada.</returns>
      <param name="name">Nombre del miembro de enumeración.</param>
      <param name="value">Valor del miembro de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al miembro de enumeración.</param>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumMember.</summary>
      <returns>Instancia de EnumMember recién creada.</returns>
      <param name="name">Nombre del miembro de enumeración.</param>
      <param name="value">Valor del miembro de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al miembro de enumeración.</param>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumMember.</summary>
      <returns>Instancia de EnumMember recién creada.</returns>
      <param name="name">Nombre del miembro de enumeración.</param>
      <param name="value">Valor del miembro de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al miembro de enumeración.</param>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumMember.</summary>
      <returns>Instancia de EnumMember recién creada.</returns>
      <param name="name">Nombre del miembro de enumeración.</param>
      <param name="value">Valor del miembro de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al miembro de enumeración.</param>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>Obtiene el nombre de este miembro de enumeración.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>Reemplaza System.Object.ToString para proporcionar una representación de cadena mejor para este tipo.</summary>
      <returns>Nombre de este miembro de enumeración.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>Obtiene el valor de este miembro de enumeración.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>Representa un tipo de enumeración.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>Devuelve la clase del tipo</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de solo lectura de EnumType.</summary>
      <returns>Instancia de EnumType recién creada.</returns>
      <param name="name">Nombre del tipo de enumeración.</param>
      <param name="namespaceName">Espacio de nombres del tipo de enumeración.</param>
      <param name="underlyingType">Tipo subyacente del tipo de enumeración.</param>
      <param name="isFlags">Indica si el tipo de enumeración puede tratarse como campo de bits; es decir, como conjunto de marcas.</param>
      <param name="members">Miembros del tipo de enumeración.</param>
      <param name="metadataProperties">Propiedades de metadatos que se van a asociar al tipo de enumeración.</param>
      <exception cref="T:System.ArgumentNullException">underlyingType es NULL.</exception>
      <exception cref="T:System.ArgumentException">name es NULL o está vacío.-o- namespaceName es NULL o está vacío.-o- underlyingType no es un tipo subyacente admitido.-o- Los miembros especificados no tienen nombres únicos.-o- El valor de un miembro especificado no está en el intervalo del tipo subyacente.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>Obtiene un valor que indica si están definidos como marcas de seguimiento los tipos de enumeración (es decir,que puede ser tratado como un campo de bits)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>Obtiene una colección de miembros de enumeración para este tipo de enumeración.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>Obtiene el tipo subyacente de este tipo de enumeración.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>Clase para representar un objeto Facet Este objeto es inmutable (no solo está establecido en solo lectura) y algunas partes del sistema dependen de ese comportamiento</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>Obtiene la descripción de esta <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> que representa la descripción de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>Obtiene el tipo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>Obtiene un valor que indica si el valor de la faceta es ilimitado.</summary>
      <returns>Es true si el valor de la faceta es ilimitado; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>Obtiene el nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>Devuelve el nombre de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>Obtiene el valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>Clase para representar un objeto FacetDescription</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Obtiene el valor predeterminado de una faceta con esta descripción.</summary>
      <returns>Valor predeterminado de una faceta con esta descripción.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>Obtiene el nombre de esta faceta.</summary>
      <returns>Nombre de esta faceta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>Obtiene el tipo de esta faceta.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo de esta faceta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Obtiene un valor que indica si el valor de esta faceta es una constante.</summary>
      <returns>true si esta faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Obtiene un valor que indica si esta faceta es obligatoria.</summary>
      <returns>true si esta faceta es obligatoria; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Obtiene el valor máximo de esta faceta.</summary>
      <returns>Valor máximo de esta faceta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>Obtiene el valor mínimo de esta faceta.</summary>
      <returns>Valor mínimo de esta faceta.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>Devuelve el nombre de esta faceta.</summary>
      <returns>Nombre de esta faceta.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>Clase que representa un parámetro de función</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>Método de generador para construir el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nueva instancia de solo lectura del tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
      <param name="name">Nombre del parámetro.</param>
      <param name="edmType">EdmType del parámetro.</param>
      <param name="parameterMode">Clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> del parámetro.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Obtiene la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> en la que se declara este parámetro.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> que representa la función en la que se declara este parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>Obtiene si el parámetro utiliza o no la longitud máxima admitida por el proveedor de base de datos.</summary>
      <returns>Es true si el parámetro utiliza la longitud máxima admitida por el proveedor de base de datos; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>Obtiene si la faceta de longitud máxima es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>Obtiene si la faceta de precisión es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>Obtiene si la faceta de escala es una constante para el proveedor de base de datos.</summary>
      <returns>Es true si la faceta es una constante; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>Obtiene la longitud máxima del parámetro.</summary>
      <returns>Longitud máxima permitida del parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>Obtiene el modo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>Obtiene el nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>Obtiene el valor de precisión del parámetro.</summary>
      <returns>El valor de precisión del parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>Obtiene el valor de escala del parámetro.</summary>
      <returns>El valor de escala del parámetro.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>Devuelve el nombre de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>Obtiene el nombre del tipo de este parámetro.</summary>
      <returns>El nombre del tipo de este parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Obtiene la instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo del parámetro como las facetas del tipo.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo del parámetro como las facetas del tipo.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>Representa la clase base de elementos para todos los metadatos</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>Interfaz para obtener el modelo de almacenamiento y conceptual subyacente para un <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>Obtiene el modelo conceptual.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>Obtiene el modelo de almacenamiento.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>Clase para representar una colección de elementos.MetadataCollection realiza la mayoría de la implementación para el mantenimiento real de la colección</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Obtiene el modelo de datos asociado a esta colección de elementos.</summary>
      <returns>El modelo de datos asociado a esta colección de elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades especificado.</summary>
      <returns>Si no hay contenedores de entidades, este método devuelve null; de lo contrario, devuelve el primer contenedor de entidades.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades especificado.</summary>
      <returns>Si no hay contenedores de entidades, este método devuelve null; de lo contrario, devuelve el primer contenedor de entidades.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Devuelve todas las sobrecargas de las funciones mediante el uso del nombre especificado de esta colección de elementos.</summary>
      <returns>Una colección de tipo ReadOnlyCollection que contiene todas las funciones que tienen el nombre especificado.</returns>
      <param name="functionCollection">Diccionario de funciones.</param>
      <param name="functionName">Nombre completo de la función.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Devuelve todas las sobrecargas de las funciones mediante el uso del nombre especificado de esta colección de elementos.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todas las funciones que poseen el nombre especificado.</returns>
      <param name="functionName">Nombre completo de la función.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Devuelve todas las sobrecargas de las funciones mediante el uso del nombre especificado de esta colección de elementos.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todas las funciones que poseen el nombre especificado.</returns>
      <param name="functionName">Nombre completo de la función.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fuertemente tipado mediante el uso de la identidad especificada.</summary>
      <returns>El elemento especificado por la identidad.</returns>
      <param name="identity">Identidad del elemento.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fuertemente tipado mediante el uso de la identidad especificada con una búsqueda que distinga mayúsculas de minúsculas o que no las distinga.</summary>
      <returns>El elemento especificado por la identidad.</returns>
      <param name="identity">Identidad del elemento.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Devuelve todos los elementos del tipo especificado de esta colección.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todos los elementos del tipo especificado.</returns>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> mediante el uso del nombre de tipo y el nombre de espacio de nombres especificados en esta colección de elementos.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo que coincide con el nombre de tipo y el nombre de espacio de nombres especificados en esta colección de elementos.Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> mediante el uso del nombre de tipo y el nombre de espacio de nombres especificados de esta colección de elementos.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo que coincide con el nombre de tipo y el nombre de espacio de nombres especificados en esta colección de elementos.Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades especificado.Si no hay contenedores de entidades, este parámetro de salida contiene null; de lo contrario, contiene el primer contenedor de entidades.</summary>
      <returns>true si hay un contenedor de entidades que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="entityContainer">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Si no hay contenedores de entidades, este parámetro de salida contiene null; de lo contrario, contiene el primer contenedor de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades especificado.Si no hay contenedores de entidades, el parámetro de salida contiene null; de lo contrario, contiene el primer contenedor de entidades.</summary>
      <returns>true si hay un contenedor de entidades que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="entityContainer">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Si no hay contenedores de entidades, este parámetro de salida contiene null; de lo contrario, contiene el primer contenedor de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fuertemente tipado mediante el uso de la identidad especificada de esta colección de elementos.</summary>
      <returns>true si hay un elemento que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="identity">Identidad del elemento.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="item">Cuando este método devuelve un resultado, el parámetro de salida contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.Si no hay elementos globales con la identidad especificada en la colección de elementos, este parámetro de salida contiene null.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> fuertemente tipado mediante el uso de la identidad especificada de esta colección de elementos.</summary>
      <returns>true si hay un elemento que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="identity">Identidad del elemento.</param>
      <param name="item">Cuando este método devuelve un resultado, el parámetro de salida contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.Si no hay elementos globales con la identidad especificada en la colección de elementos, este parámetro de salida contiene null.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> mediante el uso del nombre de tipo y el nombre de espacio de nombres especificados de esta colección de elementos.</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="type">Cuando este método devuelve un resultado, el parámetro de salida contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Si no hay un tipo con el nombre y el nombre de espacio de nombres especificados en esta colección de elementos, este parámetro de salida contiene null.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> mediante el uso del nombre de tipo y el nombre de espacio de nombres especificados de esta colección de elementos.</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="type">Cuando este método devuelve un resultado, el parámetro de salida contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Si no hay un tipo con el nombre y el nombre de espacio de nombres especificados en esta colección de elementos, este parámetro de salida contiene null.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>Representa la clase base de elementos para todos los metadatos</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>Agrega o actualiza una anotación con el nombre y el valor especificados.</summary>
      <param name="name">Nombre de la propiedad de anotación.</param>
      <param name="value">Valor de la propiedad de anotación.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado para este tipo.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado para este tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>Obtiene o establece la documentación asociada a este tipo.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> que representa la documentación de este tipo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>Devuelve el tipo integrado de un modelo conceptual que coincide con uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo integrado en el EDM.</returns>
      <param name="builtInTypeKind">Uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Devuelve la lista de las descripciones de facetas generales para un tipo especificado.</summary>
      <returns>Un objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que representa la lista de las descripciones de facetas generales para un tipo especificado.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Obtiene la lista de propiedades del tipo actual.</summary>
      <returns>Una colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades del tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>Quita una anotación con el nombre especificado.</summary>
      <returns>true si una anotación se ha quitado; en caso contrario, false.</returns>
      <param name="name">Nombre de la propiedad de anotación.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>Clase que representa un atributo de metadatos para un elemento</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Método de generador para construir el objeto MetadataProperty.</summary>
      <returns>Objeto MetadataProperty.</returns>
      <param name="name">Nombre de la propiedad de los metadatos.</param>
      <param name="typeUsage">Uso de tipo de la propiedad de metadatos.</param>
      <param name="value">Valor de la propiedad de metadatos.</param>
      <exception cref="T:System.NullReferenceException">Se produce cuando <paramref name="typeUsage" /> es null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>Obtiene un valor booleano que indica si la propiedad de metadatos es una anotación.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>Obtiene el nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Nombre de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Obtiene el valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</summary>
      <returns>Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Obtiene la instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> como las facetas del tipo.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene tanto el tipo de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> como las facetas del tipo.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>Obtiene el valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>Área de trabajo de metadatos de tiempo de ejecución</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> utilizando las rutas de acceso y los ensamblados especificados.</summary>
      <param name="paths">Las rutas de acceso a metadatos del área de trabajo.</param>
      <param name="assembliesToConsider">Los nombres de los ensamblados usados para crear el área de trabajo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>Construye un <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> con cargadores para todas las colecciones de elementos ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" /> ) que proceden de la asignación de EDMX tradicional.Se utilizarán el espacio O y las colecciones de asignaciones O-C predeterminados.Los delegados de la colección de elementos se ejecutan en diferido cuando determinada colección se utiliza por primera vez.Se admite pasar un delegado que devuelve null si la colección nunca va a utilizarse, aunque esto sucede rara vez. Todo intento de EF de utilizar la colección en tales casos dará como resultado una excepción.</summary>
      <param name="cSpaceLoader">Delegado para devolver la colección de elementos del espacio C (CSDL).</param>
      <param name="sSpaceLoader">Delegado para devolver la colección de elementos del espacio S (SSDL).</param>
      <param name="csMappingLoader">Delegado para devolver la colección de elementos de asignación de C/S (MSL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>Construye un <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> con cargadores para todas las colecciones de elementos ( <see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" /> ) que EF necesita, con excepción de la asignación O-C, que se creará automáticamente en función de los cargadores de los espacios O y C concretos.Los delegados de la colección de elementos se ejecutan en diferido cuando determinada colección se utiliza por primera vez.Se admite pasar un delegado que devuelve null si la colección nunca va a utilizarse, aunque esto sucede rara vez. Todo intento de EF de utilizar la colección en tales casos dará como resultado una excepción.</summary>
      <param name="cSpaceLoader">Delegado para devolver la colección de elementos del espacio C (CSDL).</param>
      <param name="sSpaceLoader">Delegado para devolver la colección de elementos del espacio S (SSDL).</param>
      <param name="csMappingLoader">Delegado para devolver la colección de elementos de asignación de C/S (MSL).</param>
      <param name="oSpaceLoader">Delegado para devolver la colección de elementos del espacio O.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Borra todas las entradas de caché de metadatos.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>Crea un <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" /> configurado para utilizar el espacio de datos <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" />.</summary>
      <returns>Objeto analizador que se ha creado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> enlazado al área de trabajo de metadatos, en función de la expresión de consulta especificada.</summary>
      <returns>Nueva <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> con la expresión especificada como su propiedad <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" />.</returns>
      <param name="query">Una <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> que define la consulta.</param>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="query" /> es null</exception>
      <exception cref="T:System.ArgumentException">Si <paramref name="query" /> contiene metadatos que no pueden ser resueltos en esta área de trabajo de metadatos</exception>
      <exception cref="T:System.ArgumentException">Si <paramref name="query" /> no es estructuralmente válido porque contiene referencias de variables irresolubles</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que coincide con el tipo suministrado por el parámetro objectSpaceType .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Metadata.Edm.EnumlType" /> que proporciona el tipo del espacio de objeto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que coincide con el tipo suministrado por el parámetro objectSpaceType .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que proporciona el tipo del espacio de objeto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades y el modelo de datos especificados.</summary>
      <returns>Si no hay contenedores de entidades, este método devuelve null; de lo contrario, devuelve el primer contenedor de entidades.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el contenedor de entidades.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades y el modelo de datos especificados.</summary>
      <returns>Si no hay contenedores de entidades, este método devuelve null; de lo contrario, devuelve el primer contenedor de entidades.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el contenedor de entidades.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve todas las sobrecargas de las funciones mediante el uso del nombre, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todas las funciones que coinciden con el nombre especificado en un espacio de nombres y un modelo de datos determinados.</returns>
      <param name="name">Nombre de la función.</param>
      <param name="namespaceName">Espacio de nombres de la función.</param>
      <param name="dataSpace">Modelo conceptual en el que se buscan las funciones.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Devuelve todas las sobrecargas de las funciones mediante el uso del nombre, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todas las funciones que coinciden con el nombre especificado en un espacio de nombres y un modelo de datos determinados.</returns>
      <param name="name">Nombre de la función.</param>
      <param name="namespaceName">Espacio de nombres de la función.</param>
      <param name="dataSpace">Modelo conceptual en el que se buscan las funciones.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un elemento mediante el uso de la identidad y el modelo de datos especificados.</summary>
      <returns>El elemento que coincide con la identidad dada en el modelo de datos especificado.</returns>
      <param name="identity">Identidad del elemento.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el elemento.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un elemento mediante el uso de la identidad y el modelo de datos especificados.</summary>
      <returns>El elemento que coincide con la identidad dada en el modelo de datos especificado.</returns>
      <param name="identity">Identidad del elemento.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el elemento.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtiene elementos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Los elementos <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</returns>
      <param name="dataSpace">La clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> de la que se van a recuperar elementos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtiene todos los elementos del modelo de datos especificado.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todos los elementos del modelo de datos especificado.</returns>
      <param name="dataSpace">Modelo conceptual para el cual se necesita la lista de elementos.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Obtiene todos los elementos del modelo de datos especificado.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todos los elementos del modelo de datos especificado.</returns>
      <param name="dataSpace">Modelo conceptual para el cual se necesita la lista de elementos.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo del espacio de objeto que coincide con el tipo proporcionado por el parámetro edmSpaceType .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo del espacio de objeto.Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="edmSpaceType">Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo del espacio de objeto que coincide con el tipo proporcionado por el parámetro edmSpaceType .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo del espacio de objeto.Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="edmSpaceType">Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve la lista de tipos primitivos en el modelo de datos especificado.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todos los tipos primitivos en el modelo de datos especificado.</returns>
      <param name="dataSpace">Modelo de datos para el que se necesita la lista de tipos primitivos.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>Devuelve los miembros de determinado <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> / <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> cuyos valores originales son necesarios al modificar una entidad.</summary>
      <returns>Los <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> para los cuales se requiere el valor original.</returns>
      <param name="entitySet">Una <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> perteneciente al espacio C.</param>
      <param name="entityType">Un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> que participa en la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> determinada.</param>
      <param name="partialUpdateSupported">Es true si las entidades pueden actualizarse parcialmente; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>Obtiene miembros de valores originales de un tipo de entidad y un conjunto de entidades.</summary>
      <returns>Los miembros de valores originales de un tipo de entidad y de un conjunto de entidades.</returns>
      <param name="entitySet">Conjunto de entidades del que se recuperan valores originales.</param>
      <param name="entityType">Tipo de entidad del que se recuperan valores originales.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> con el nombre del tipo, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el tipo.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> con el nombre del tipo, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa el tipo que coincide con el nombre de tipo dado y el nombre de espacio de nombres en el modelo de datos especificado.Si no hay un tipo que coincida, este método devuelve null.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el tipo.</param>
      <exception cref="T:System.ArgumentException">Se produce si el espacio no es un valor válido.El espacio válido es C, O, CS o OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Carga metadatos desde el ensamblado especificado.</summary>
      <param name="assembly">Ensamblado desde el que se cargarán los metadatos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Carga metadatos desde el ensamblado especificado.</summary>
      <param name="assembly">Ensamblado desde el que se cargarán los metadatos.</param>
      <param name="logLoadMessage">Delegado para registrar los mensajes de carga.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>La versión de Max EDM que va a ser compatible con el tiempo de ejecución.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>Registra la colección de elementos con cada modelo de datos asociado.</summary>
      <param name="collection">Colección de parámetros de salida que hay que llenar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> a través del parámetro de salida edmSpaceType, que representa al <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que coincide con el tipo proporcionado por el parámetro objectSpaceType .</summary>
      <returns>Es true si la operación se realiza correctamente; de lo contrario, devuelve false.</returns>
      <param name="objectSpaceType">Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> que representa el tipo del espacio de objeto.</param>
      <param name="edmSpaceType">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> que representa a la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> a través del parámetro de salida edmSpaceType, que representa a la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que coincide con el tipo proporcionado por el parámetro objectSpaceType .</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="objectSpaceType">Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo del espacio de objeto.</param>
      <param name="edmSpaceType">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa a la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades y el modelo de datos especificados.</summary>
      <returns>true si hay un contenedor de entidades que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el contenedor de entidades.</param>
      <param name="entityContainer">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Si no hay contenedores de entidades, este parámetro de salida contiene null; de lo contrario, devuelve el primer contenedor de entidades.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> mediante el uso del nombre del contenedor de entidades y el modelo de datos especificados.</summary>
      <returns>true si hay un contenedor de entidades que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del contenedor de entidades.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el contenedor de entidades.</param>
      <param name="entityContainer">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Si no hay contenedores de entidades, este parámetro de salida contiene null; de lo contrario, devuelve el primer contenedor de entidades.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Devuelve un elemento mediante el uso de la identidad y el modelo de datos especificados.</summary>
      <returns>true si hay un elemento que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="identity">Modelo conceptual en el que se busca el elemento.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el elemento.</param>
      <param name="item">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Este parámetro se pasa sin inicializar.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Devuelve un elemento mediante el uso de la identidad y el modelo de datos especificados.</summary>
      <returns>true si hay un elemento que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="identity">Modelo conceptual en el que se busca el elemento.</param>
      <param name="space">Modelo conceptual en el que se busca el elemento.</param>
      <param name="item">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Este parámetro se pasa sin inicializar.</param>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>Prueba la recuperación de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Es true si la recuperación se realizó correctamente; de lo contrario, false.</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" /> desde el que se intenta la recuperación de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> .</param>
      <param name="collection">Cuando este método devuelve un resultado, contiene la colección de elementos.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> a través del parámetro de salida objectSpaceType que representa al tipo que coincide con la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> proporcionada por el parámetro edmSpaceType .</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="edmSpaceType">Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .</param>
      <param name="objectSpaceType">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> que representa al tipo de espacio Objeto.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> a través del parámetro de salida objectSpaceType, que representa al tipo que coincide con la <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> proporcionada por el parámetro edmSpaceType .</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="edmSpaceType">Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa al objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> .</param>
      <param name="objectSpaceType">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa al tipo de espacio Objeto.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> con el nombre del tipo, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el tipo.</param>
      <param name="type">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Devuelve un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> con el nombre del tipo, el nombre de espacio de nombres y el modelo de datos especificados.</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="name">Nombre del tipo.</param>
      <param name="namespaceName">Espacio de nombres del tipo.</param>
      <param name="dataSpace">Modelo conceptual en el que se busca el tipo.</param>
      <param name="type">Cuando este método devuelve un resultado, contiene un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>Representa la clase de propiedad de navegación de edm</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Crea una instancia de NavigationProperty a partir de los parámetros especificados.</summary>
      <returns>Instancia de NavigationProperty recién creada.</returns>
      <param name="name">Nombre de la propiedad de navegación.</param>
      <param name="typeUsage">Especifica el tipo de propiedad de navegación y sus facetas.</param>
      <param name="relationshipType">Tipo de relación para navegación.</param>
      <param name="from">Miembro extremo de origen de la navegación.</param>
      <param name="to">Miembro extremo de destino de la navegación.</param>
      <param name="metadataProperties">Propiedad de metadatos de la propiedad de navegación.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Obtiene el miembro del extremo de la relación "desde" en esta navegación.</summary>
      <returns>Miembro del extremo de la relación "desde" en esta navegación.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Cuando la propiedad de navegación especificada está en el extremo dependiente de una restricción referencial, devuelve las propiedades de clave externa.De lo contrario, devuelve un conjunto vacío.Devolveremos los miembros en el orden de las propiedades de clave de extremo principal.</summary>
      <returns>Colección de propiedades de clave externa.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Obtiene el tipo de relación en la que opera esta propiedad de navegación.</summary>
      <returns>Tipo de relación en la que opera esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Obtiene el miembro del extremo de la relación "a" en esta navegación.</summary>
      <returns>Miembro del extremo de la relación "a" en esta navegación.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>Clase para representar una colección de elementos para la capa de objetos.ItemCollection realiza la mayoría de la implementación para el mantenimiento real de la colección</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>El método devuelve el tipo CLR subyacente para el argumento de tipo OSpace especificado.Si el espacio de datos del parámetro no es OSpace, se produce una ArgumentException.</summary>
      <returns>Tipo CLR del argumento OSpace.</returns>
      <param name="objectSpaceType">Tipo OSpace que se va a buscar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Devuelve el tipo de CLR que corresponde al <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> suministrado por el parámetro objectSpaceType.</summary>
      <returns>Tipo CLR del argumento OSpace.</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo de espacio del objeto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Devuelve todos los elementos del tipo especificado de esta colección.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene todos los elementos del tipo especificado.</returns>
      <typeparam name="T">Tipo devuelto por el método.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Devuelve una colección de objetos de tipo primitivo.</summary>
      <returns>Una colección de objetos de tipo primitivo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Carga metadatos desde el ensamblado especificado.</summary>
      <param name="assembly">Ensamblado desde el que se cargarán los metadatos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>Carga metadatos del ensamblado especificado.</summary>
      <param name="assembly">Ensamblado desde el que se cargarán los metadatos.</param>
      <param name="edmItemCollection">Origen de los metadatos del EDM para los metadatos de espacio O.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Carga metadatos desde el ensamblado especificado.</summary>
      <param name="assembly">Ensamblado desde el que se cargarán los metadatos.</param>
      <param name="edmItemCollection">Origen de los metadatos del EDM para los metadatos de espacio O.</param>
      <param name="logLoadMessage">Delegado al cual se envían los mensajes de registro.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>Devuelve el tipo CLR subyacente para el argumento de tipo de enumeración de OSpace especificado.Si el espacio de datos del parámetro no es OSpace, el método devuelve false y establece el parámetro de salida en NULL.</summary>
      <returns>Es true si la operación se realiza correctamente; de lo contrario, false</returns>
      <param name="objectSpaceType">Tipo de enumeración de OSpace que se va a buscar</param>
      <param name="clrType">Tipo de enumeración CLR del argumento OSpace</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Devuelve el tipo de CLR correspondiente al <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> suministrado por el parámetro objectSpaceType.</summary>
      <returns>true si hay un tipo que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="objectSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> que representa el tipo de espacio del objeto.</param>
      <param name="clrType">Tipo CLR.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>Representa la lista de acciones posibles para la operación de eliminación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>Cascada a otros extremos</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>no se realiza ninguna acción</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>Enumeración que define el modo de un parámetro</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>Parámetro de entrada</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>Parámetro de entrada y de salida</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Parámetro de salida</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Parámetro de devolución</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>Enumeración que define la semántica de tipos que se emplea para resolver sobrecargas de función.Estas marcas se definen en el manifiesto del proveedor por cada definición de función.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Permite la conversión implícita entre los tipos de argumento especificados y formales (valor predeterminado).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Permite la promoción de tipos entre los tipos de argumento especificados y formales.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Usa equivalencia estricta solamente.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>Clase que representa un tipo primitivo</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Devuelve un tipo de Common Language Runtime (CLR) equivalente de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .Téngase en cuenta que la propiedad <see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> siempre devuelve un valor de un tipo que no acepta valores NULL.</summary>
      <returns>Un objeto <see cref="T:System.Type" /> que representa un tipo de Common Language Runtime (CLR) equivalente de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Obtiene la lista de descripciones de facetas para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene la lista de descripciones de facetas para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> equivalente de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que es equivalente de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> equivalente a un <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que es equivalente a un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> especificado .</returns>
      <param name="primitiveTypeKind">Un valor de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Devuelve la lista de tipos primitivos.</summary>
      <returns>Una colección de tipo <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que contiene la lista de tipos primitivos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Obtiene un valor de la enumeración <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> que indica un tipo primitivo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</summary>
      <returns>Un valor de la enumeración <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> que indica un tipo primitivo de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>Tipos primitivos definidos por EDM</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Clase de tipo Binary</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Clase de tipo Boolean</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Clase de tipo Byte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Clase de tipo DateTime</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Clase de tipo DateTimeOffset</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Clase de tipo Decimal</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Clase de tipo Double</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Clase de tipo Geography</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Clase de tipo collection geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Clase de tipo linestring geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Clase de tipo multi-linestring geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Clase de tipo multipoint geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Clase de tipo multi-polygon geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Clase de tipo point geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Clase de tipo polygon geográfico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Clase de tipo Geometry</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Clase de tipo collection geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Clase de tipo linestring geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Clase de tipo multi-linestring geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Clase de tipo multipoint geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Clase de tipo multi-polygon geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Clase de tipo point geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Clase de tipo polygon geométrico</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Clase de tipo Guid</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Clase de tipo Int16</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Clase de tipo Int32</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Clase de tipo Int64</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Clase de tipo SByte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Clase de tipo Single</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Clase de tipo String</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Clase de tipo Time</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>Especifica las modalidades de atributos de elementos del modelo conceptual.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>Miembro de una enumeración que indica que un atributo del elemento es Extendido.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>Miembro de una enumeración que indica que un atributo del elemento es Sistema.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Clase que representa un contenedor de solo lectura alrededor de MetadataCollection</summary>
      <typeparam name="T">Tipo de elementos de esta colección</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Determina si la colección contiene un elemento con la identidad especificada.</summary>
      <returns>true si la colección contiene el elemento que se va a buscar; de lo contrario, false.El valor predeterminado es false.</returns>
      <param name="identity">Identidad del elemento.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Devuelve un enumerador que puede recorrer en iteración esta colección.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> que se puede usar para recorrer en iteración esta colección <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Recupera un elemento de esta colección mediante el uso de la identidad especificada.</summary>
      <returns>Un elemento de esta colección.</returns>
      <param name="identity">Identidad del elemento que se va a buscar.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Devuelve el índice del valor especificado en esta colección.</summary>
      <returns>El índice del valor especificado en esta colección.</returns>
      <param name="value">Valor que se va a buscar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Obtiene un valor que indica si esta colección es de solo lectura.</summary>
      <returns>true si esta colección es de solo lectura; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Obtiene un elemento de esta colección mediante el uso de la identidad especificada.</summary>
      <returns>Un elemento de esta colección.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Recupera un elemento de esta colección mediante el uso de la identidad especificada.</summary>
      <returns>true si hay un elemento que coincida con los criterios de búsqueda; de lo contrario, false.</returns>
      <param name="identity">Identidad del elemento que se va a buscar.</param>
      <param name="ignoreCase">Es true para realizar una búsqueda que no distinga mayúsculas de minúsculas; de lo contrario, false.</param>
      <param name="item">Cuando este método devuelve un resultado, este parámetro de salida contiene un elemento de la colección.Si no hay elementos que coincidan, este parámetro de salida contiene null.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Enumerador para MetadataCollection</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Obtiene el miembro de la posición actual.</summary>
      <returns>Miembro de la posición actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Elimina este enumerador.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Se mueve al siguiente miembro de la colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> .</summary>
      <returns>Es true si el enumerador se mueve en la colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Coloca el enumerador antes de la primera posición en la colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> .</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el miembro de la posición actual</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>Esta clase representa una restricción referencia entre dos entidades que especifican los extremos "to" y "from" de la relación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Crea una nueva restricción en la relación</summary>
      <param name="fromRole">rol desde el que se origina la relación</param>
      <param name="toRole">rol al que se vincula/destina la relación</param>
      <param name="fromProperties">propiedades de tipo de entidad del rol de destino que participan en la restricción</param>
      <param name="toProperties">propiedades de tipo de entidad del rol de origen que participan en la restricción</param>
      <exception cref="T:System.ArgumentNullException">Excepción de argumento NULL si alguno de los argumentos es NULL</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Obtiene la lista de propiedades para la "función desde" en la que está definido este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Una colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades para la "función desde" en la que está definido este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Obtiene la "función desde" que toma parte en este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> .</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> que representa la "función desde" que toma parte en este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Obtiene la lista de propiedades para la "función hasta" en la que está definido este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Una colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades para la "función hasta" en la que está definido este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Obtiene la "función hasta" que toma parte en este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> que representa la "función hasta" que toma parte en este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Devuelve la combinación de los nombres de <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> y <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> .</summary>
      <returns>La combinación de los nombres de <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> y <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>Clase que representa un tipo de referencia</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>Obtiene el tipo de entidad al que hace referencia <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> que representa el tipo de entidad al que hace referencia <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode"></member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>Inicializa una nueva instancia de la clase RelationshipEndMember</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Obtiene el comportamiento operativo del miembro del extremo de la relación.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" />.El valor predeterminado es <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Tiene acceso al objeto EntityType de EndMember en una asociación.</summary>
      <returns>Objeto EntityType de EndMember en una asociación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Obtiene la multiplicidad del miembro del extremo de esta relación.</summary>
      <returns>Uno de los valores de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>Representa la información de multiplicidad acerca del extremo de un tipo de relación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>El límite inferior es cero y el superior es NULL</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Tanto el límite inferior como el límite superior es uno</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>El límite inferior es cero y el límite superior es uno</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>Clase para representar un conjunto de relaciones</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Obtiene el tipo de relación de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> que representa el tipo de relación de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>Representa el tipo de relación</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Obtiene la lista de extremos de este tipo de relación.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de extremos de este tipo de relación.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Representa el tipo de fila de Edm</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado de este <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Método de generador para construir el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Nueva instancia de solo lectura del objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
      <param name="properties">Propiedades del objeto de tipo de fila.</param>
      <param name="metadataProperties">Propiedades de metadatos que se agregarán a la función.Puede ser NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>Obtiene una colección de las propiedades definidas por el tipo actual.</summary>
      <returns>Una colección de las propiedades definidas por el tipo actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>Obtiene la lista de propiedades de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de propiedades de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> .</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>Clase que representa un tipo simple</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>Serializa la sección de almacenamiento (base de datos) de un <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> como XML.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor"></member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>Se produce cuando se produce un error al serializar el modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Serializa <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> en el <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>es true si se puede serializar el modelo; de lo contrario, es false</returns>
      <param name="dbDatabase">EdmModel que se va a serializar</param>
      <param name="namespaceName">Nombre del espacio de nombres del elemento Schema</param>
      <param name="provider">Información de proveedor en el elemento Schema</param>
      <param name="providerManifestToken">Información de ProviderManifestToken en el elemento Schema</param>
      <param name="xmlWriter">XmlWriter en el que se va a serializar</param>
      <param name="serializeDefaultNullability">Valor que indica si se serializarán los atributos que aceptan valores NULL cuando se establezcan en el valor predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Serializa <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> en el <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>es true si se puede serializar el modelo; de lo contrario, es false</returns>
      <param name="dbDatabase">EdmModel que se va a serializar</param>
      <param name="provider">Información de proveedor en el elemento Schema</param>
      <param name="providerManifestToken">Información de ProviderManifestToken en el elemento Schema</param>
      <param name="xmlWriter">XmlWriter en el que se va a serializar</param>
      <param name="serializeDefaultNullability">Valor que indica si se serializarán los atributos que aceptan valores NULL cuando se establezcan en el valor predeterminado.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>Modelo para las propiedades generadas por el servidor.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Se genera un valor tanto al insertar (INSERT) como al actualizar (UPDATE).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Se genera un valor al insertar (con INSERT) y permanece invariable al actualizar.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>No es una propiedad generada por el servidor.Éste es el valor predeterminado.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>Clase para representar una colección de elementos en el espacio de almacenamiento.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> utilizando el lector XMLReader especificado.</summary>
      <param name="xmlReaders">Lector XMLReader usado para crear metadatos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="model">El modelo de la <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> utilizando las rutas de acceso a archivos especificadas.</summary>
      <param name="filePaths">Las rutas de acceso a archivos utilizadas para crear metadatos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Método de generador que crea una clase <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> si no se encontraron errores.De lo contrario, es null.</returns>
      <param name="xmlReaders">Artefactos de SSDL que se van a cargar.No debe ser null.</param>
      <param name="filePaths">Rutas de acceso a los artefactos de SSDL.Se usa en los mensajes de error.Puede ser null, en cuyo caso se usará el URI base del XmlReader como ruta de acceso.</param>
      <param name="resolver">Resolución personalizada.Se usa actualmente para resolver la implementación de DbProviderServices.Si es null, se usará la resolución predeterminada.</param>
      <param name="errors">Recopilación de errores encontrados durante la carga.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Devuelve una colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Un objeto <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> que representa la colección de objetos <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>Obtiene el generador de proveedor de la StoreItemCollection.</summary>
      <returns>El generador de proveedor de la StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>Obtiene el nombre invariable de la StoreItemCollection.</summary>
      <returns>El nombre invariable de la StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>Obtiene el manifiesto del proveedor de la StoreItemCollection.</summary>
      <returns>El manifiesto del proveedor de la StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>Obtiene el token del manifiesto de la StoreItemCollection.</summary>
      <returns>El token del manifiesto de la StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>Obtiene la versión del esquema de almacenamiento de esta colección.</summary>
      <returns>La versión del esquema de almacenamiento de esta colección.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>Representa el tipo estructural</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Agrega un miembro a este tipo</summary>
      <param name="member">Miembro que se va a agregar</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>Obtiene la lista de miembros de este tipo.</summary>
      <returns>Colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene un conjunto de miembros de este tipo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Quita un miembro de este tipo.</summary>
      <param name="member">El miembro que se va a quitar.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>Clase que representa una información de tipo de un elemento</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Obtiene la categoría del tipo integrado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> que representa la categoría del tipo integrado para este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>Método de generador para crear un TypeUsage con el EdmType y las facetas especificados</summary>
      <returns>nueva instancia de TypeUsage</returns>
      <param name="edmType">EdmType para el que se va a crear un uso de tipo</param>
      <param name="facets">facetas que se van a copiar al nuevo TypeUsage</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo binario mediante el uso de los valores de facetas especificados.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo binario mediante el uso de los valores de facetas especificados.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">true para establecer la longitud del tipo binario en fijo; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo binario mediante el uso de los valores de facetas especificados.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo binario mediante el uso de los valores de facetas especificados.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">true para establecer la longitud del tipo binario en fijo; de lo contrario, false.</param>
      <param name="maxLength">Longitud máxima del tipo binario.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crea un objeto <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> del tipo descrito por los parámetros.</summary>
      <returns>Objeto <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />.</returns>
      <param name="primitiveType">Tipo simple que define las unidades de medida del desplazamiento.</param>
      <param name="precision">Nivel de granularidad de <see cref="T:System." /> DateTimeOffset en fracciones de segundo, basado en el número de posiciones decimales admitidas.Por ejemplo, una precisión de 3 significa que la granularidad admitida es milisegundos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crea un objeto <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> del tipo descrito por los parámetros.</summary>
      <returns>Objeto <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />.</returns>
      <param name="primitiveType">Tipo simple que define las unidades de medida del objeto <see cref="T:System." /> DateTime.</param>
      <param name="precision">Nivel de granularidad de <see cref="T:System." /> DateTimeOffset en fracciones de segundo, basado en el número de posiciones decimales admitidas.Por ejemplo, una precisión de 3 significa que la granularidad admitida es milisegundos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo decimal con valores de facetas de escala y precisión sin enlazar.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo decimal con valores de facetas de escala y precisión sin enlazar.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo decimal mediante el uso de los valores de facetas especificados.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo decimal mediante el uso de los valores de facetas especificados.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="precision">Precisión del tipo decimal como tipo <see cref="T:System.Byte" />.</param>
      <param name="scale">Escala del tipo decimal como tipo <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> con el tipo de modelo conceptual especificado.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> con los valores de facetas predeterminados para el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> especificado.</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo cadena mediante el uso de los valores de facetas especificados y un valor MaxLength sin enlazar.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo cadena mediante el uso de los valores de facetas especificados y un valor MaxLength sin enlazar.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">true para establecer el estándar de codificación de caracteres del tipo cadena en Unicode; de lo contrario, false.</param>
      <param name="isFixedLength">true para establecer la longitud del tipo cadena en fijo; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo cadena mediante el uso de los valores de facetas especificados.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que describe un tipo cadena mediante el uso de los valores de facetas especificados.</returns>
      <param name="primitiveType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> para el que se crea el objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">true para establecer el estándar de codificación de caracteres del tipo cadena en Unicode; de lo contrario, false.</param>
      <param name="isFixedLength">true para establecer el estándar de codificación de caracteres del tipo cadena en Unicode; de lo contrario, false.</param>
      <param name="maxLength">true para establecer la longitud del tipo cadena en fijo; de lo contrario, false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Crea un objeto <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> del tipo descrito por los parámetros.</summary>
      <returns>Objeto <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />.</returns>
      <param name="primitiveType">Tipo simple que define las unidades de medida del objeto <see cref="T:System." /> DateTime.</param>
      <param name="precision">Nivel de granularidad de <see cref="T:System." /> DateTimeOffset en fracciones de segundo, basado en el número de posiciones decimales admitidas.Por ejemplo, una precisión de 3 significa que la granularidad admitida es milisegundos.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>Obtiene la información de tipos descrita por este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> que representa la información de tipos descrita por este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>Obtiene la lista de facetas del tipo descrito por este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> .</summary>
      <returns>Una colección de tipo <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> que contiene la lista de facetas del tipo descrito por este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Comprueba si este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> es un subtipo del objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> especificado.</summary>
      <returns>Es true si este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> es un subtipo del objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> especificado; de lo contrario, false.</returns>
      <param name="typeUsage">Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que se va a comprobar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>Devuelve un uso de tipo Modelo para un tipo de proveedor</summary>
      <returns>Uso de tipo de modelo (CSpace)</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>Devuelve el nombre completo del tipo descrito por este <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Nombre completo del tipo descrito por este objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> como cadena.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>Almacena en memoria caché una consulta ELinq</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`10" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`11" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`12" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`13" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg11">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg11 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`14" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg11">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg11 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg12">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg12 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`15" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg11">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg11 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg12">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg12 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg13">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg13 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`16" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg11">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg11 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg12">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg12 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg13">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg13 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg14">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg14 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`17" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg8">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg8 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg9">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg9 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg10">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg10 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg11">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg11 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg12">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg12 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg13">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg13 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg14">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg14 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg15">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg15 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`2" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`3" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`4" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`5" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado que es devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`6" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`7" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`8" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Crea un nuevo delegado que representa la consulta compilada de LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`9" />, delegado genérico que representa la consulta compilada de LINQ to Entities.</returns>
      <param name="query">Expresión lambda que se va a compilar.</param>
      <typeparam name="TArg0">Tipo derivado de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg1 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg2">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg2 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg3">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg3 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg4">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg4 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg5">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg5 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg6">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg6 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TArg7">Representa el tipo del parámetro que se debe pasar al ejecutar el delegado devuelto por este método .TArg7 debe ser un tipo primitivo.</typeparam>
      <typeparam name="TResult">El tipo T de los resultados de la consulta que se devuelven al ejecutar el delegado devuelto por el método <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>Los valores actualmente asignados a las propiedades de una entidad.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>Permite acceso a los valores originales de los datos de un objeto.DbUpdatableDataRecord implementa métodos que permiten actualizar los valores originales de un objeto.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Obtiene información de un registro de datos.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Obtiene el número de campos del registro.</summary>
      <returns>Valor entero que corresponde al recuento de campos.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Boolean.</summary>
      <returns>Valor del campo como valor de tipo Boolean.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Byte.</summary>
      <returns>Valor del campo como valor de tipo Byte.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Recupera el valor del campo como una matriz de bytes.</summary>
      <returns>Número de bytes que se han copiado.</returns>
      <param name="i">Ordinal del campo.</param>
      <param name="dataIndex">Índice en el que se iniciará la copia de datos.</param>
      <param name="buffer">Búfer de destino donde se copian los datos.</param>
      <param name="bufferIndex">Índice del búfer de destino en el que se iniciará la copia.</param>
      <param name="length">Número de bytes que se van a copiar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Char.</summary>
      <returns>Valor del campo como valor de tipo Char.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Recupera el valor del campo como una matriz de caracteres.</summary>
      <returns>Número de caracteres que se han copiado.</returns>
      <param name="i">Ordinal del campo.</param>
      <param name="dataIndex">Índice en el que se iniciará la copia de datos.</param>
      <param name="buffer">Búfer de destino donde se copian los datos.</param>
      <param name="bufferIndex">Índice del búfer de destino en el que se iniciará la copia.</param>
      <param name="length">Número de caracteres que se van a copiar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Recupera el valor de un campo como <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Recupera el nombre del tipo de datos del campo.</summary>
      <returns>Nombre del tipo de datos del campo.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.DateTime" />.</summary>
      <returns>Valor del campo como <see cref="T:System.DateTime" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Common.DbDataReader" /> .</summary>
      <returns>Valor del campo como <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Decimal.</summary>
      <returns>Valor del campo como valor de tipo Decimal.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Double.</summary>
      <returns>Valor del campo como valor de tipo Double.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Recupera el tipo de datos de un campo.</summary>
      <returns>Tipo de campo.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo Float.</summary>
      <returns>Valor del campo como valor de tipo Float.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Guid" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Guid" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Int16" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Int16" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Int32" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Int32" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Int64" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Int64" />.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Recupera el nombre de un campo.</summary>
      <returns>Nombre del campo.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Recupera el ordinal de un campo utilizando el nombre del campo.</summary>
      <returns>Ordinal del campo.</returns>
      <param name="name">Nombre del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Recupera el valor de un campo.</summary>
      <returns>Valor del campo.</returns>
      <param name="ordinal">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Recupera el valor del campo como un valor de tipo String.</summary>
      <returns>Valor del campo.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Recupera el valor de un campo.</summary>
      <returns>Valor del campo.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Rellena una matriz de objetos con los valores de campo del registro actual.</summary>
      <returns>Número de valores de campo devueltos.</returns>
      <param name="values">Matriz de objetos donde se almacenarán los valores de los campos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Indica si el campo especificado está o no definido como <see cref="T:System.DBNull" />.</summary>
      <returns>Es true si el campo está definido como <see cref="T:System.DBNull" /> ; de lo contrario, es false.</returns>
      <param name="i">Ordinal del campo.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Devuelve un valor que tiene el ordinal del campo especificado.</summary>
      <returns>Valor que tiene ordinal del campo especificado.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Obtiene el valor que tiene el nombre de campo especificado.</summary>
      <returns>Valor del campo.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Establece un campo en el valor <see cref="T:System.DBNull" />.</summary>
      <param name="ordinal">Ordinal del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Establece el valor de un campo de un registro.</summary>
      <param name="ordinal">Ordinal del campo.</param>
      <param name="value">Valor del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Establece los valores de los campos de un registro.</summary>
      <returns>Número de campos que se definieron.</returns>
      <param name="values">Valores del campo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Recupera el valor del campo como <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>Valor del campo como <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">Ordinal del campo.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>Proporciona métodos de Common Language Runtime (CLR) que exponen funciones canónicas de EDM para su uso en consultas LINQ to Entities <see cref="T:System.Data.Entity.DbContext" /> o <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddDays de EDM para sumar el número especificado de días a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de días que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddDays de EDM para sumar el número especificado de días a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de días que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddHours de EDM para sumar el número especificado de horas a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de horas que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMicroseconds de EDM para sumar el número especificado de microsegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de microsegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMilliseconds de EDM para sumar el número especificado de milisegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de milisegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMinutes de EDM para sumar el número especificado de minutos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de minutos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMonths de EDM para sumar el número especificado de meses a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de meses que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddMonths de EDM para sumar el número especificado de meses a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de meses que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddNanoseconds de EDM para sumar el número especificado de nanosegundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de nanosegundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddSeconds de EDM para sumar el número especificado de segundos a un intervalo de tiempo.</summary>
      <returns>Intervalo de tiempo resultante.</returns>
      <param name="timeValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de segundos que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddYears de EDM para sumar el número especificado de años a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de años que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica AddYears de EDM para sumar el número especificado de años a una fecha o una hora.</summary>
      <returns>Fecha y hora resultantes.</returns>
      <param name="dateValue">Fecha y hora de entrada.</param>
      <param name="addValue">Número de años que se van a sumar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método funciona como un operador que se asegura de que la entrada se trata como una cadena no Unicode.</summary>
      <returns>Cadena de entrada tratada como una cadena no Unicode.</returns>
      <param name="value">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método funciona como un operador que se asegura de que la entrada se trata como una cadena Unicode.</summary>
      <returns>Cadena de entrada tratada como una cadena Unicode.</returns>
      <param name="value">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateDateTime de EDM para crear un nuevo objeto <see cref="T:System.DateTime" />.</summary>
      <returns>Nueva Fecha y hora.</returns>
      <param name="year">Año.</param>
      <param name="month">Mes (basado en uno).</param>
      <param name="day">Día (basado en uno).</param>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateDateTimeOffset de EDM para crear un nuevo objeto <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Nueva Fecha y hora.</returns>
      <param name="year">Año.</param>
      <param name="month">Mes (basado en uno).</param>
      <param name="day">Día (basado en uno).</param>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
      <param name="timeZoneOffset">Elemento de desfase de zona horaria de la nueva fecha.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica CreateTime de EDM para crear un nuevo objeto <see cref="T:System.TimeSpan" />.</summary>
      <returns>Nuevo intervalo de tiempo.</returns>
      <param name="hour">Horas.</param>
      <param name="minute">Minutos.</param>
      <param name="second">Segundos, incluidas las partes fraccionarias de los segundos si se desea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffDays de EDM para calcular el número de días que hay entre dos fechas u horas.</summary>
      <returns>Número de días que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffDays de EDM para calcular el número de días que hay entre dos fechas u horas.</summary>
      <returns>Número de días que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos fechas u horas.</summary>
      <returns>Número de horas que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos fechas u horas.</summary>
      <returns>Número de horas que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffHours de EDM para calcular el número de horas que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de horas que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de microsegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de microsegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMicroseconds de EDM para calcular el número de microsegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de microsegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de milisegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de milisegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMilliseconds de EDM para calcular el número de milisegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de milisegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos fechas u horas.</summary>
      <returns>Número de minutos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos fechas u horas.</summary>
      <returns>Número de minutos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMinutes de EDM para calcular el número de minutos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de minutos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMonths de EDM para calcular el número de meses que hay entre dos fechas u horas.</summary>
      <returns>Número de meses que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffMonths de EDM para calcular el número de meses que hay entre dos fechas u horas.</summary>
      <returns>Número de meses que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de nanosegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos fechas u horas.</summary>
      <returns>Número de nanosegundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffNanoseconds de EDM para calcular el número de nanosegundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de nanosegundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos fechas u horas.</summary>
      <returns>Número de segundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos fechas u horas.</summary>
      <returns>Número de segundos que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="timeValue1">Primera fecha y hora.</param>
      <param name="timeValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffSeconds de EDM para calcular el número de segundos que hay entre dos intervalos de tiempo.</summary>
      <returns>Número de segundos que hay entre el primer y el segundo intervalo de tiempo.</returns>
      <param name="timeValue1">Primer intervalo de tiempo.</param>
      <param name="timeValue2">Segundo intervalo de tiempo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffYears de EDM para calcular el número de años que hay entre dos fechas u horas.</summary>
      <returns>Número de años que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica DiffYears de EDM para calcular el número de años que hay entre dos fechas u horas.</summary>
      <returns>Número de años que hay entre la primera y la segunda fecha y hora.</returns>
      <param name="dateValue1">Primera fecha y hora.</param>
      <param name="dateValue2">Segunda fecha y hora.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica GetTotalOffsetMinutes de EDM para devolver el número de minutos de desfase entre la fecha/hora especificada y UTC.Este valor está comprendido generalmente entre +780 y -780 (+ o - 13 horas).</summary>
      <returns>Desfase de la entrada con respecto a UTC.</returns>
      <param name="dateTimeOffsetArgument">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Left de EDM para devolver un número especificado de los caracteres situados más a la izquierda de una cadena.</summary>
      <returns>Cadena que contiene el número de caracteres especificado desde el lado izquierdo de la cadena de entrada.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
      <param name="length">Número de caracteres que se van a devolver</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Reverse de EDM para devolver una cadena especificada con el orden de los caracteres invertido.</summary>
      <returns>Cadena de entrada con el orden de los caracteres invertido.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Right de EDM para devolver un número especificado de los caracteres situados más a la derecha de una cadena.</summary>
      <returns>Cadena que contiene el número de caracteres especificado desde el lado derecho de la cadena de entrada.</returns>
      <param name="stringArgument">Cadena de entrada.</param>
      <param name="length">Número de caracteres que se van a devolver</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDev de EDM para calcular la desviación estándar de la colección.</summary>
      <returns>Desviación estándar.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica StDevP de EDM para calcular la desviación estándar de la población.</summary>
      <returns>Desviación estándar de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Truncate de EDM para truncar el valor indicado al número de dígitos especificado.</summary>
      <returns>Valor truncado.</returns>
      <param name="value">Valor que se va a truncar.</param>
      <param name="digits">Número de dígitos que se van a conservar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Truncate de EDM para truncar el valor indicado al número de dígitos especificado.</summary>
      <returns>Valor truncado.</returns>
      <param name="value">Valor que se va a truncar.</param>
      <param name="digits">Número de dígitos que se van a conservar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica TruncateTime de EDM para devolver la fecha especificada sin la parte de hora.</summary>
      <returns>Fecha de entrada con la parte de hora borrada.</returns>
      <param name="dateValue">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica TruncateTime de EDM para devolver la fecha especificada sin la parte de hora.</summary>
      <returns>Fecha de entrada con la parte de hora borrada.</returns>
      <param name="dateValue">Valor de fecha y hora que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica Var de EDM para calcular la varianza de la colección.</summary>
      <returns>Varianza.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Cuando se usa como parte de una consulta LINQ to Entities, este método invoca la función canónica VarP de EDM para calcular la varianza de la población.</summary>
      <returns>Varianza de la población.</returns>
      <param name="collection">Colección en la que se va a realizar el cálculo.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>Opciones de ejecución de consultas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Opción de combinación que se va a usar para los resultados de la entidad.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Opción de combinación que se va a usar para los resultados de la entidad.</param>
      <param name="streaming">Si la consulta se transmite por secuencias o se almacena en búfer.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>Opción de combinación que se va a usar para los resultados de la entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Determina si los objetos especificados son iguales.</summary>
      <returns>True si los dos objetos son iguales; en caso contrario, false.</returns>
      <param name="left">Objeto a la izquierda que se va a comparar.</param>
      <param name="right">Objeto a la derecha que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Determina si los objetos especificados no son iguales.</summary>
      <returns>Es true si los dos objetos no son iguales; en caso contrario, es false.</returns>
      <param name="left">Objeto a la izquierda que se va a comparar.</param>
      <param name="right">Objeto a la derecha que se va a comparar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>Si la consulta se transmite por secuencias o se almacena en búfer.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>Define el comportamiento de las implementaciones de IQueryable que permiten modificaciones en la pertenencia del conjunto resultante.</summary>
      <typeparam name="TEntity">Tipo de entidades que devuelve la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Notifica al conjunto que se debe agregar al conjunto un objeto que representa una nueva entidad.</summary>
      <param name="entity">Nuevo objeto que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>Notifica al conjunto que se debe agregar al conjunto un objeto que representa una entidad existente.</summary>
      <param name="entity">Objeto existente que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Notifica al conjunto que se debe eliminar del conjunto un objeto que representa una entidad existente.</summary>
      <param name="entity">Objeto existente que se va a eliminar del conjunto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>Notifica al conjunto que se debe disociar del conjunto un objeto que representa una entidad existente.</summary>
      <param name="entity">Objeto que se va a disociar del conjunto.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>Las diferentes maneras en que los nuevos objetos cargados desde la base de datos pueden combinarse con objetos ya existentes en la memoria.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>Solo se anexarán filas nuevas (únicas de nivel superior).Éste es el comportamiento predeterminado.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>No modificará la memoria caché.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>El mismo comportamiento que LoadOption.OverwriteChanges.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>El mismo comportamiento que LoadOption.PreserveChanges.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext es el objeto de nivel superior que encapsula una conexión entre CLR y la base de datos, que actúa como puerta de enlace para las operaciones de creación, lectura, actualización y eliminación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> con la conexión especificada.Durante la construcción, el área de trabajo de metadatos se extrae del objeto <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> que contiene referencias al modelo y a la conexión del origen de datos.</param>
      <exception cref="T:System.ArgumentNullException">connection es NULL.</exception>
      <exception cref="T:System.ArgumentException">La conexión no es válida, o bien el área de trabajo de metadatos no es válida.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>Crea un ObjectContext con la conexión y el área de trabajo de metadatos especificados.</summary>
      <param name="connection">conexión con el almacenamiento</param>
      <param name="contextOwnsConnection">Si se define como true, la conexión se eliminará cuando se elimine el contexto; de lo contrario, el autor de la llamada debe eliminar la conexión.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> con la conexión y el nombre de contenedor de entidades especificados.</summary>
      <param name="connection">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> que contiene referencias al modelo y a la conexión del origen de datos.</param>
      <param name="defaultContainerName">Nombre del contenedor de entidades predeterminado.Cuando defaultContainerName se establece con este método, la propiedad se vuelve de solo lectura.</param>
      <exception cref="T:System.ArgumentNullException">connection es NULL.</exception>
      <exception cref="T:System.ArgumentException">La conexión, defaultContainerName o el área de trabajo de metadatos no son válidos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> con la cadena de conexión y el nombre de contenedor de entidades predeterminado especificados.</summary>
      <param name="connectionString">Cadena de conexión, que también proporciona acceso a la información de metadatos.</param>
      <exception cref="T:System.ArgumentNullException">connectionString es NULL.</exception>
      <exception cref="T:System.ArgumentException">connectionString no es válida, o bien el área de trabajo de metadatos no es válida.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> con la cadena de conexión y el nombre de contenedor de entidades especificados.</summary>
      <param name="connectionString">Cadena de conexión, que también proporciona acceso a la información de metadatos.</param>
      <param name="defaultContainerName">Nombre del contenedor de entidades predeterminado.Cuando defaultContainerName se establece con este método, la propiedad se vuelve de solo lectura.</param>
      <exception cref="T:System.ArgumentNullException">connectionString es NULL.</exception>
      <exception cref="T:System.ArgumentException">connectionString, defaultContainerName o el área de trabajo de metadatos no son válidos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>Acepta todos los cambios realizados en los objetos del contexto del objeto.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Agrega un objeto al contexto del objeto.</summary>
      <param name="entitySetName">Representa el nombre del conjunto de entidades, que puede estar calificado por el nombre del contenedor de entidades.</param>
      <param name="entity">
        <see cref="T:System.Object" /> que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro de la entidad es NULL, o bien entitySetName no está calificado.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Copia los valores escalares del objeto proporcionado al objeto de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> que tiene la misma clave.</summary>
      <returns>El objeto actualizado.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades al que pertenece el objeto.</param>
      <param name="currentEntity">Objeto desasociado que tiene actualizaciones de propiedades que deben aplicarse al objeto original.La clave de entidad de currentEntity debe coincidir con la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> de una entrada en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
      <typeparam name="TEntity">Tipo de entidad del objeto.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName o actual es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> de entitySetName no coincide con el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> del objeto <see cref="T:System.Data.Entity.Core.EntityKey" />, el objeto no es el <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" />, o bien la clave de entidad del objeto proporcionado no es válida.</exception>
      <exception cref="T:System.ArgumentException">entitySetName es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Toma los valores escalares del objeto proporcionado y los copia en el conjunto de valores originales para el objeto del <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> que tiene la misma clave.</summary>
      <returns>El objeto actualizado.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades al que pertenece el objeto.</param>
      <param name="originalEntity">Objeto disociado que tiene valores originales que deben aplicarse al objeto.La clave de entidad de originalmente debe coincidir con la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> de una entrada en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
      <typeparam name="TEntity">El tipo del objeto entidad.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName u original es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> de entitySetName no coincide con el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> del objeto <see cref="T:System.Data.Entity.Core.EntityKey" />, un <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> del objeto no se ha encontrado en el <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, el objeto se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Added" /> o <see cref="F:System.Data.Entity.EntityState.Detached" />, o bien la clave de entidad del objeto suministrado no es válida o tiene cambios de propiedad.</exception>
      <exception cref="T:System.ArgumentException">entitySetName es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Aplica los cambios de propiedades de un objeto desasociado a un objeto ya asociado al contexto del objeto.</summary>
      <param name="entitySetName">Nombre del conjunto de entidades al que pertenece el objeto.</param>
      <param name="changed">Objeto desasociado que tiene actualizaciones de propiedades que deben aplicarse al objeto original.</param>
      <exception cref="T:System.ArgumentNullException">Cuando entitySetName es NULL o una cadena vacía, o bien cuando el cambio es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Si <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> de entitySetName no coincide con el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> del objeto <see cref="T:System.Data.Entity.Core.EntityKey" />, si el estado de la entidad es distinto de <see cref="F:System.Data.Entity.EntityState.Modified" /> o de <see cref="F:System.Data.Entity.EntityState.Unchanged" />, o bien si el objeto original no está asociado al contexto.</exception>
      <exception cref="T:System.ArgumentException">Cuando el tipo del objeto changed no es el mismo tipo que el objeto original.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>Asocia un objeto o un gráfico de objetos al contexto del objeto cuando el objeto tiene una clave de entidad.</summary>
      <param name="entity">Objeto que se va a asociar.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Clave de entidad no válida.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Asocia un objeto o un gráfico de objetos al contexto del objeto de un conjunto de entidades determinado.</summary>
      <param name="entitySetName">Representa el nombre del conjunto de entidades, que puede estar calificado por el nombre del contenedor de entidades.</param>
      <param name="entity">
        <see cref="T:System.Object" /> que se va a asociar.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Conjunto de entidades no válido, o bien el objeto tiene una clave temporal o un <see cref="T:System.Data.Entity.Core.EntityKey" /> y el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> no coincide con el conjunto de entidades pasado como argumento del método, o bien el objeto no tiene un <see cref="T:System.Data.Entity.Core.EntityKey" /> y no se ha proporcionado un conjunto de entidades, o bien algún objeto del gráfico de objetos tiene un <see cref="T:System.Data.Entity.Core.EntityKey" />, o bien algún objeto del gráfico de objetos tiene un <see cref="T:System.Data.Entity.Core.EntityKey" /> no válido (por ejemplo, los valores de la clave no coinciden con los valores del objeto), o bien no se pudo encontrar el conjunto de entidades a partir de un determinado nombre de entitySetName y contenedor de entidades, o bien algún objeto del gráfico de objetos ya existe en otro administrador de estado.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>Obtiene o establece el valor de tiempo de espera, en segundos, para todas las operaciones del contexto del objeto.Un valor NULL indica que se usará el valor predeterminado del proveedor subyacente.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que es el valor de tiempo de espera, en segundos.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>Obtiene la conexión usada por el contexto del objeto.</summary>
      <returns>Objeto <see cref="T:System.Data.Common.DbConnection" /> que es la conexión.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>Obtiene la instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> que contiene opciones que afectan al comportamiento del <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</summary>
      <returns>La instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> que contiene opciones que afectan al comportamiento del <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>Crea la base de datos usando la conexión del origen de datos actual y los metadatos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> .</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Genera un script del lenguaje de definición de datos (DDL) que crea objetos de esquema (tablas, claves principales, claves externas) para los metadatos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> .<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> carga los metadatos de los archivos del lenguaje de definición de esquemas de almacenamiento (SSDL, Store Schema Definition Language).</summary>
      <returns>Un script DDL que crea objetos de esquema para los metadatos de <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Crea la clave de entidad para un objeto determinado o devuelve la clave de entidad si ya existe.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> del objeto.</returns>
      <param name="entitySetName">El nombre completo del conjunto de entidades al que pertenece el objeto entidad.</param>
      <param name="entity">Objeto cuya clave de entidad se recupera.</param>
      <exception cref="T:System.ArgumentNullException">Cuando cualquiera de los parámetros es NULL.</exception>
      <exception cref="T:System.ArgumentException">Si entitySetName está vacío o si el tipo del objeto de entidad no existe en el conjunto de entidades, o bien si entitySetName no está totalmente calificado.</exception>
      <exception cref="T:System.InvalidOperationException">Cuando la clave de entidad no se puede construir correctamente basándose en los parámetros proporcionados.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>Crea y devuelve una instancia del tipo solicitado.</summary>
      <returns>Instancia del tipo T solicitado, o bien una instancia de un tipo derivado que permite usar T con Entity Framework.El objeto devuelto es una instancia del tipo solicitado o una instancia de un tipo derivado que permite que el tipo solicitado se use con Entity Framework.</returns>
      <typeparam name="T">Tipo de objeto que se va a devolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> que se usa para consultar, agregar, modificar y eliminar objetos del tipo de entidad especificado.</summary>
      <returns>La nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <typeparam name="TEntity">Tipo de entidad del objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> solicitado.</typeparam>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> no está definida en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien el tipo especificado pertenece a más de un conjunto de entidades.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> que se usa para consultar, agregar, modificar y eliminar objetos del tipo especificado y con el nombre del conjunto de entidades indicado.</summary>
      <returns>La nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades para el <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> devuelto.El nombre del contenedor predeterminado debe calificar la cadena si la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> no está establecida en <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
      <typeparam name="TEntity">Tipo de entidad del objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> solicitado.</typeparam>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> de entitySetName no coincide con el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> del objeto <see cref="T:System.Data.Entity.Core.EntityKey" />, la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> no está definida en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> y el nombre no está calificado como parte del parámetro entitySetName, o bien el tipo especificado pertenece a más de un conjunto de entidades.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Genera un tipo equivalente que se puede usar con Entity Framework para cada tipo de la enumeración proporcionada.</summary>
      <param name="types">Enumeración de objetos <see cref="T:System.Type" /> que representan clases de datos personalizadas que se asignan al modelo conceptual.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Crea una <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> en el contexto del objeto actual usando la cadena de consulta especificada.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> del tipo especificado.</returns>
      <param name="queryString">Cadena de consulta que se va a ejecutar.</param>
      <param name="parameters">Parámetros que hay que pasar a la consulta.</param>
      <typeparam name="T">Tipo de entidad del objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> devuelto.</typeparam>
      <exception cref="T:System.ArgumentNullException">El parámetro queryString o parameters es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>Comprueba si la base de datos que se especifica como la base de datos en la conexión de almacenamiento actual existe en el almacenamiento.La mayor parte del trabajo real la hace la implementación de DbProviderServices para la conexión de almacenamiento actual.</summary>
      <returns>true si la base de datos existe; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>Obtiene o establece el nombre del contenedor predeterminado.</summary>
      <returns>
        <see cref="T:System.String" /> que es el nombre predeterminado del contenedor.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>Elimina la base de datos que se especifica como base de datos en la conexión del origen de datos actual.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Marca un objeto para su eliminación.</summary>
      <param name="entity">Objeto que especifica la entidad que hay que eliminar.El objeto puede encontrarse en cualquier estado, excepto <see cref="F:System.Data.Entity.EntityState.Detached" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>Quita el objeto del contexto del objeto.</summary>
      <param name="entity">Objeto que se va a desasociar.Solo se quita la entidad; si hay objetos relacionados cuyo seguimiento esté realizando el mismo <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, no serán disociados automáticamente.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">La entidad no está asociada con este <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> (por ejemplo, fue creada recientemente y todavía no asociada con ningún contexto, o bien fue obtenida a través de algún otro contexto, o bien ya fue disociada).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>Garantiza que los cambios de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> se sincronicen con los cambios en todos los objetos de los que <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> realiza un seguimiento.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>Libera los recursos usados por el contexto del objeto.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Libera los recursos usados por el contexto del objeto.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ejecuta la función especificada en el contenedor predeterminado.</summary>
      <returns>Objeto que representa el resultado de ejecutar esta función.</returns>
      <param name="functionName">Nombre de función.Puede incluir contenedor (por ejemplo,ContainerName.FunctionName) o solo el nombre de función cuando se conoce DefaultContainerName.</param>
      <param name="executionOptions">Opciones para ejecutar esta función.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la función.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento para los resultados de la función.</typeparam>
      <exception cref="T:System.ArgumentException">Si la función es NULL o está vacía</exception>
      <exception cref="T:System.InvalidOperationException">Si la función no es válida (sintaxis, no existe, hace referencia a una función con un tipo de valor devuelto incompatible con T)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ejecuta la función o el procedimiento almacenado especificado que se define en el origen de datos y se expresa en el modelo conceptual, con los parámetros y la opción de combinación especificados.Devuelve un objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> con tipo.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> para los datos devueltos por el procedimiento almacenado.</returns>
      <param name="functionName">Nombre del procedimiento almacenado o de la función.El nombre puede incluir el nombre del contenedor, como &amp;lt;Nombre contenedor&amp;gt;.&amp;lt;Nombre función&amp;gt;.Cuando se conoce el nombre del contenedor predeterminado, solo se requiere el nombre de la función.</param>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.</param>
      <param name="parameters">Una matriz de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de entidad del valor <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> devuelto cuando la función se ejecuta en el origen de datos.Este tipo debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> .</typeparam>
      <exception cref="T:System.ArgumentException">La función es NULL o está vacía, o bien no se ha encontrado.</exception>
      <exception cref="T:System.InvalidOperationException">El lector de entidades no admite esta función, o existe alguna discrepancia de tipos en el lector y la función.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ejecuta un procedimiento almacenado o una función que se define en el origen de datos y se asigna en el modelo conceptual, con los parámetros especificados.Devuelve un objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> con tipo.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> para los datos devueltos por el procedimiento almacenado.</returns>
      <param name="functionName">Nombre del procedimiento almacenado o de la función.El nombre puede incluir el nombre del contenedor, como &amp;lt;Nombre contenedor&amp;gt;.&amp;lt;Nombre función&amp;gt;.Cuando se conoce el nombre del contenedor predeterminado, solo se requiere el nombre de la función.</param>
      <param name="parameters">Una matriz de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de entidad del valor <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> devuelto cuando la función se ejecuta en el origen de datos.Este tipo debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> .</typeparam>
      <exception cref="T:System.ArgumentException">La función es NULL o está vacía, o bien no se ha encontrado.</exception>
      <exception cref="T:System.InvalidOperationException">El lector de entidades no admite esta función, o existe alguna discrepancia de tipos en el lector y la función.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ejecuta un procedimiento almacenado o una función que se define en el origen de datos y se expresa en el modelo conceptual, descarta cualquier resultado devuelto de la función y devuelve el número de filas afectadas por la ejecución.</summary>
      <returns>El número de filas afectadas.</returns>
      <param name="functionName">Nombre del procedimiento almacenado o de la función.El nombre puede incluir el nombre del contenedor, como &amp;lt;Nombre contenedor&amp;gt;.&amp;lt;Nombre función&amp;gt;.Cuando se conoce el nombre del contenedor predeterminado, solo se requiere el nombre de la función.</param>
      <param name="parameters">Una matriz de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <exception cref="T:System.ArgumentException">La función es NULL o está vacía, o bien no se ha encontrado.</exception>
      <exception cref="T:System.InvalidOperationException">El lector de entidades no admite esta función, o existe alguna discrepancia de tipos en el lector y la función.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Ejecuta un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>El número de filas afectadas.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Ejecuta un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>El número de filas afectadas.</returns>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Ejecuta de manera asíncrona un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de filas afectadas.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de manera asíncrona un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de filas afectadas.</returns>
      <param name="transactionalBehavior">Controla la creación de una transacción para este comando.</param>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>Ejecuta de manera asíncrona un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de filas afectadas.</returns>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de manera asíncrona un comando arbitrario directamente en el origen de datos usando la conexión existente.El comando se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de filas afectadas.</returns>
      <param name="commandText">El comando se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Ejecuta una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Ejecuta una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Ejecuta una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Si se especifica el nombre de un conjunto de entidades, los resultados serán objeto de seguimiento por el contexto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="entitySetName">Conjunto de entidades del tipo TResult.Si no se proporciona un nombre del conjunto de entidades no se realizará un seguimiento de los resultados.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>Ejecuta una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Si se especifica el nombre de un conjunto de entidades, los resultados serán objeto de seguimiento por el contexto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="entitySetName">Conjunto de entidades del tipo TResult.Si no se proporciona un nombre del conjunto de entidades no se realizará un seguimiento de los resultados.</param>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Si se especifica el nombre de un conjunto de entidades, los resultados serán objeto de seguimiento por el contexto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="entitySetName">Conjunto de entidades del tipo TResult.Si no se proporciona un nombre del conjunto de entidades no se realizará un seguimiento de los resultados.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Si se especifica el nombre de un conjunto de entidades, los resultados serán objeto de seguimiento por el contexto.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="entitySetName">Conjunto de entidades del tipo TResult.Si no se proporciona un nombre del conjunto de entidades no se realizará un seguimiento de los resultados.</param>
      <param name="executionOptions">Opciones para ejecutar esta consulta.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Ejecuta de manera asíncrona una consulta directamente contra el origen de datos y devuelve una secuencia de resultados con tipo.La consulta se especifica usando el lenguaje de consulta nativo del servidor, como SQL.Los resultados no son seguidos por el contexto. Utilice la sobrecarga que especifica que un nombre de conjunto de entidades haga un seguimiento de los resultados.Como con cualquier API que acepte SQL, es importante parametrizar cualquier dato proporcionado por el usuario para protegerse de un ataque de inyección de SQL.Se pueden incluir marcadores de posición de parámetros en la consulta de SQL y, a continuación, proporcionar valores del parámetro como argumentos adicionales.Cualquier valor de parámetro que se proporcione se convertirá automáticamente en un DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); Alternativamente, también se puede construir un DbParameter y proporcionárselo a SqlQuery.Esto permite usar parámetros nombrados en la cadena de consulta de SQL.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una enumeración de objetos de tipo <paramref name="TElement" />.</returns>
      <param name="commandText">La consulta se especifica en el lenguaje de consulta nativo del servidor.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <param name="parameters">Valores de parámetro que se van a usar para la consulta.Si se usan parámetros de salida, sus valores no estarán disponibles hasta que los resultados se hayan leído por completo.Esto se debe al comportamiento subyacente de DbDataReader; vea http://go.microsoft.com/fwlink/?LinkID=398589 para obtener más detalles.</param>
      <typeparam name="TElement">Tipo de elemento de la secuencia de resultados.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>Finaliza una instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Devuelve todos los tipos de proxy existentes.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de todos los tipos de proxy existentes.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>Devuelve un objeto que tiene la clave de entidad especificada.</summary>
      <returns>Un <see cref="T:System.Object" /> que es una instancia de un tipo de entidad.</returns>
      <param name="key">Clave del objeto que se desea encontrar.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro key es NULL.</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">El objeto no se encuentra en <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> ni en el origen de datos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Devuelve el tipo de la entidad POCO asociada a un objeto proxy de un tipo especificado.</summary>
      <returns>
        <see cref="T:System.Type" /> de la entidad POCO asociada.</returns>
      <param name="type">
        <see cref="T:System.Type" /> del objeto proxy.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Carga explícitamente un objeto relacionado con el objeto proporcionado por la propiedad de navegación especificada y usando la opción de combinación predeterminada.</summary>
      <param name="entity">Entidad para la que se van a cargar objetos relacionados.</param>
      <param name="navigationProperty">Nombre de la propiedad de navegación que devuelve los objetos relacionados que se van a cargar.</param>
      <exception cref="T:System.InvalidOperationException">La entidad se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien está asociada a otra instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga explícitamente un objeto relacionado con el objeto proporcionado por la propiedad de navegación especificada y usando la opción de combinación indicada.</summary>
      <param name="entity">Entidad para la que se van a cargar objetos relacionados.</param>
      <param name="navigationProperty">Nombre de la propiedad de navegación que devuelve los objetos relacionados que se van a cargar.</param>
      <param name="mergeOption">Valor de <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se va a usar al cargar los objetos relacionados.</param>
      <exception cref="T:System.InvalidOperationException">La entidad se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien está asociada a otra instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Carga explícitamente un objeto relacionado con el objeto proporcionado por la consulta LINQ especificada y usando la opción de combinación predeterminada.</summary>
      <param name="entity">Objeto de origen para el que se van a cargar objetos relacionados.</param>
      <param name="selector">Expresión LINQ que define los objetos relacionados que se van a cargar.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
      <exception cref="T:System.ArgumentException">El selector no proporciona un parámetro de entrada válido.</exception>
      <exception cref="T:System.ArgumentNullException">El selector es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">La entidad se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien está asociada a otra instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga explícitamente un objeto relacionado con el objeto proporcionado por la consulta LINQ especificada y usando la opción de combinación especificada.</summary>
      <param name="entity">Objeto de origen para el que se van a cargar objetos relacionados.</param>
      <param name="selector">Expresión LINQ que define los objetos relacionados que se van a cargar.</param>
      <param name="mergeOption">Valor de <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se va a usar al cargar los objetos relacionados.</param>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
      <exception cref="T:System.ArgumentException">El selector no proporciona un parámetro de entrada válido.</exception>
      <exception cref="T:System.ArgumentNullException">El selector es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">La entidad se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien está asociada a otra instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>Obtiene el área de trabajo de metadatos usada por el contexto del objeto.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> que está asociado con este <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>Se produce cuando se crea un nuevo objeto entidad a partir de datos del origen de datos como parte de una operación de consulta o de carga.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>Obtiene el administrador de estados de objetos usado por el contexto del objeto para realizar el seguimiento de los cambios en los objetos.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> usado por este <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>Obtiene el proveedor de consultas LINQ asociado a este contexto del objeto.</summary>
      <returns>Instancia de <see cref="T:System.Linq.IQueryProvider" /> usada por este contexto de objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Actualiza una colección de objetos en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="collection">Colección <see cref="T:System.Collections.IEnumerable" /> de objetos que hay que actualizar.</param>
      <exception cref="T:System.ArgumentNullException">collection es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La colección está vacía o un objeto no está asociado al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Actualiza un objeto en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="entity">Objeto que se va a actualizar.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La entidad no está asociada al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Actualiza de manera asíncrona una colección de objetos en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="collection">Colección <see cref="T:System.Collections.IEnumerable" /> de objetos que hay que actualizar.</param>
      <exception cref="T:System.ArgumentNullException">collection es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La colección está vacía o un objeto no está asociado al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>Actualiza de manera asíncrona una colección de objetos en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="collection">Colección <see cref="T:System.Collections.IEnumerable" /> de objetos que hay que actualizar.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">collection es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La colección está vacía o un objeto no está asociado al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Actualiza de manera asíncrona un objeto en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="entity">Objeto que se va a actualizar.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La entidad no está asociada al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>Actualiza de manera asíncrona un objeto en el contexto del objeto con datos procedentes de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="refreshMode">Valor de <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> que indica si los cambios de las propiedades en el contexto del objeto se sobrescriben con los valores de las propiedades procedentes de la base de datos.</param>
      <param name="entity">Objeto que se va a actualizar.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode no es válido.</exception>
      <exception cref="T:System.ArgumentException">La entidad no está asociada al contexto.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>Conserva todas las actualizaciones de la base de datos y restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Número de objetos que tenían el estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Conserva todas las actualizaciones en la base de datos y, opcionalmente, restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Número de objetos que tenían el estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="acceptChangesDuringSave">Este parámetro es necesario para la compatibilidad con transacciones en el cliente.Si es true, el seguimiento de cambios en todos los objetos se restablecerá después de que finalice <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.Si es false, debe invocar al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> después de <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Conserva todas las actualizaciones en la base de datos y, opcionalmente, restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Número de objetos que tenían el estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Valor de <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> que determina el comportamiento de la operación.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>Conserva de manera asíncrona todas las actualizaciones en la base de datos y restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de objetos que se encontraban en estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Conserva de manera asíncrona todas las actualizaciones en la base de datos y, opcionalmente. restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de objetos que se encontraban en estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Valor de <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> que determina el comportamiento de la operación.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>Conserva de manera asíncrona todas las actualizaciones en la base de datos y, opcionalmente. restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de objetos que se encontraban en estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Valor de <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> que determina el comportamiento de la operación.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Conserva de manera asíncrona todas las actualizaciones en la base de datos y restablece el seguimiento de cambios en el contexto del objeto.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de objetos que se encontraban en estado <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" /> cuando se invocó al método <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Se ha producido una infracción de la simultaneidad optimista mientras se guardaban los cambios.</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>Se produce cuando se guardan cambios en el origen de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Se devuelve a sí mismo.ObjectContext implementa <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" /> para proporcionar una interfaz común para <see cref="T:System.Data.Entity.DbContext" /> y ObjectContext; ambos devolverán el ObjectContext subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>Obtiene el controlador de transacciones que usa este contexto.Puede ser NULL si no se ha iniciado ninguna transacción.</summary>
      <returns>Controlador de transacciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Convierte un objeto <see cref="T:System.Data.Common.DbDataReader" /> que contiene filas de datos de entidad en objetos del tipo de entidad solicitado.</summary>
      <returns>Enumeración de objetos de tipo TResult.</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" /> que contiene los datos de entidad que se van a convertir en objetos entidad.</param>
      <typeparam name="TElement">Tipo de entidad.</typeparam>
      <exception cref="T:System.ArgumentNullException">Si el lector es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Convierte un <see cref="T:System.Data.Common.DbDataReader" /> que contiene filas de datos de entidad en objetos del tipo de entidad solicitado, en un conjunto de entidades concreto, y con la opción de combinación especificada.</summary>
      <returns>Enumeración de objetos de tipo TResult.</returns>
      <param name="reader">
        <see cref="T:System.Data.Common.DbDataReader" /> que contiene los datos de entidad que se van a convertir en objetos entidad.</param>
      <param name="entitySetName">Conjunto de entidades del tipo TResult.</param>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se va a usar cuando se agreguen objetos convertidos al contexto del objeto.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity">Tipo de entidad.</typeparam>
      <exception cref="T:System.ArgumentNullException">Si el lector es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si la mergeOption proporcionada no es un valor <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> válido.</exception>
      <exception cref="T:System.InvalidOperationException">Si el entitySetName proporcionado no es un conjunto de entidades válido para el resultado del tipo TResult.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>Devuelve un objeto que tiene la clave de entidad especificada.</summary>
      <returns>Es true si el objeto se recuperó correctamente.Es false si la clave es temporal, o bien si la conexión o el valor son NULL.</returns>
      <param name="key">Clave del objeto que se desea encontrar.</param>
      <param name="value">Cuando vuelve este método, contiene el objeto.</param>
      <exception cref="T:System.ArgumentException">Metadatos incompatibles con la clave .</exception>
      <exception cref="T:System.ArgumentNullException">key es NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>Define opciones que afectan al comportamiento del ObjectContext.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Obtiene o define un valor booleano que determina si los objetos relacionados se cargan o no automáticamente cuando se tiene acceso a una propiedad de navegación.</summary>
      <returns>true si la carga diferida está habilitada; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Obtiene o define un valor booleano que determina si se crean o no instancias del proxy para las clases de datos personalizadas que ignoran la persistencia.</summary>
      <returns>Es true si se crean proxies; de lo contrario, es falseEl valor predeterminado es true.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>Obtiene o define un valor booleano que determina si utilizar o no el comportamiento NullReference homogéneo.</summary>
      <returns>Es true si debería utilizarse el comportamiento NullReference homogéneo; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>Obtiene o define un valor booleano que determina si utilizar o no el comportamiento C# NullComparison.</summary>
      <returns>Es true si debería utilizarse el comportamiento C# NullComparison; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Obtiene o define un valor booleano que determina si utilizar o no el comportamiento PreserveChanges heredado.</summary>
      <returns>Es true si se debe usar el comportamiento PreserveChanges heredado; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>EventArgs para el evento ObjectMaterialized.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Obtiene el objeto entidad que se creó.</summary>
      <returns>Objeto entidad que se creó.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>Delegado para el evento ObjectMaterialized.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>Esta clase representa un parámetro de consulta en el nivel de objeto, que consta de un nombre, un tipo y un valor.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> con el nombre y el valor especificados.</summary>
      <param name="name">Nombre del parámetro.Este nombre no debe incluir el marcador de parámetro "@" que se usa en las instrucciones de Entity SQL; solo debe incluir el nombre real.El primer carácter de la expresión debe ser una letra.Los demás caracteres de la expresión deben ser letras, números o caracteres de subrayado (_).</param>
      <param name="value">Valor inicial (e intrínsecamente, tipo) del parámetro.</param>
      <exception cref="T:System.ArgumentNullException">Si el valor de cualquier argumento es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si el valor del argumento Name no es válido.Los nombres de los parámetros deben comenzar por una letra y solo pueden contener letras, números y caracteres de subrayado.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> con el nombre y tipo especificados.</summary>
      <param name="name">Nombre del parámetro.Este nombre no debe incluir el marcador de parámetro "@" que se usa en las instrucciones de Entity SQL; solo debe incluir el nombre real.El primer carácter de la expresión debe ser una letra.Los demás caracteres de la expresión deben ser letras, números o caracteres de subrayado (_).</param>
      <param name="type">Tipo de Common Language Runtime (CLR) al que pertenece el parámetro.</param>
      <exception cref="T:System.ArgumentNullException">Si el valor de cualquier argumento es NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Si el valor del argumento Name no es válido.Los nombres de los parámetros deben comenzar por una letra y solo pueden contener letras, números y caracteres de subrayado.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>Obtiene el nombre del parámetro, que solo se puede establecer a través de un constructor.</summary>
      <returns>Nombre del parámetro, que solo se puede establecer a través de un constructor.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>Obtiene el tipo de parámetro.</summary>
      <returns>Clase <see cref="T:System.Type" /> del parámetro.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>Obtiene o establece el valor del parámetro.</summary>
      <returns>Valor del parámetro.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>Esta clase representa una colección de parámetros de consulta en la capa de objeto.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Agrega el <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> especificado a la colección.</summary>
      <param name="item">Parámetro que se va a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">El argumento parameter es NULL.</exception>
      <exception cref="T:System.ArgumentException">El argumento parameter ya existe en la colección.Este comportamiento es distinto del de la mayoría de las colecciones que permiten entradas duplicadas.— o bien— Si ya existe en la colección otro parámetro con el mismo nombre como argumento parámetro.Observe que la búsqueda distingue entre mayúsculas y minúsculas.Este comportamiento es distinto del de la mayoría de las colecciones y se parece más al de un <see cref="T:System.Collections.Generic.Dictionary" /> .</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El tipo al que pertenece parameter no es válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>Elimina de la colección todas las instancias de <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Comprueba si existe en la colección un <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> especificado por referencia.</summary>
      <returns>Devuelve true si el objeto de parámetro se encuentra en la colección; en caso contrario, devuelve false.</returns>
      <param name="item">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> que se va a buscar en la colección.</param>
      <exception cref="T:System.ArgumentNullException">El argumento parameter es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Determina si en la colección se encuentra un <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> con el nombre especificado.</summary>
      <returns>Devuelve true si el parámetro con el nombre especificado se encuentra en la colección; en caso contrario, devuelve false.</returns>
      <param name="name">Nombre del parámetro que se va a buscar en la colección.Este nombre no debe incluir el marcador de parámetro "@" que se usa en las instrucciones de Entity SQL; solo debe incluir el nombre real.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro name es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>Permite que los parámetros de la colección se copien en una matriz suministrada, comenzando por el objeto situado en el índice especificado.</summary>
      <param name="array">Matriz en la que se copiarán los parámetros.</param>
      <param name="arrayIndex">Índice de la matriz donde se comenzará a copiar los parámetros.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>Obtiene el número de parámetros existentes en la colección.</summary>
      <returns>Número de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> existentes en la colección.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>Estos métodos devuelven instancias de enumerador, que permiten recorrer la colección en iteración y atravesarla.</summary>
      <returns>Objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para recorrer en iteración la colección.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Proporciona un indizador que permite a los autores de las llamadas recuperar los parámetros por el nombre.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Quita de la colección una instancia de un <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> por referencia si existe en la colección.</summary>
      <returns>Devuelve true si se ha encontrado y quitado el objeto de parámetro de la colección; en caso contrario, devuelve false.</returns>
      <param name="item">Objeto que se quitará de la colección.</param>
      <exception cref="T:System.ArgumentNullException">El argumento parameter es NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> es de solo lectura.</summary>
      <returns>true si el elemento <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> es de solo lectura; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador sin tipo sobre la colección.</summary>
      <returns>Instancia de <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>Esta clase implementa consultas sin tipo en la capa de objeto.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>Devuelve el texto de comando para la consulta.</summary>
      <returns>Un valor de cadena.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>Obtiene el contexto del objeto asociado con esta consulta de objeto.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> que está asociado con esta instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Obtiene o establece un valor que indica si se debe guardar en caché el plan de consulta.</summary>
      <returns>Valor que indica si se debe guardar en caché el plan de consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Ejecuta la consulta de objeto sin tipo con la opción de combinación especificada.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Ejecuta de manera asíncrona la consulta de objeto sin tipo con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos de entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Ejecuta de manera asíncrona la consulta de objeto sin tipo con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos de entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>Devuelve información sobre el tipo de resultado de la consulta.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> que contiene información sobre el tipo de resultado de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>Obtiene o establece el modo en que los objetos devueltos por una consulta se agregan al contexto del objeto.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>Obtiene la colección de parámetros para esta consulta de objeto.</summary>
      <returns>Colección de parámetros para esta <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>Si la consulta se transmite por secuencias o se almacena en búfer</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede usar para procesar una iteración en una colección.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Obtiene un valor que indica si esta consulta contiene o no una colección de objetos de consulta.</summary>
      <returns>Es true si la consulta contiene una colección de objetos de consulta; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Devuelve la colección como una <see cref="T:System.Collections.IList" /> usada para el enlace de datos.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> de objetos entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> que, cuando se enumera, ejecuta la consulta SQL proporcionada en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Obtiene el tipo de elemento de resultado para esta instancia de consulta.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Obtiene la expresión que describe esta consulta.Para las consultas generadas mediante modelos de generador de LINQ, devuelve un árbol de expresiones LINQ completo; de lo contrario, devuelve una expresión constante que contiene esta consulta.Observe que la expresión predeterminada no se almacena en caché.Esto nos permite diferenciar entre las consultas LINQ y Entity-SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Obtiene la <see cref="T:System.Linq.IQueryProvider" /> asociada a esta instancia de consulta.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>Devuelve los comandos que hay que ejecutar en el origen de datos.</summary>
      <returns>string que representa los comandos que ejecuta la consulta en el origen de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery implementa consultas fuertemente tipadas en la capa de objeto.Las consultas se especifican mediante cadenas de Entity-SQL y se pueden crear llamando a métodos de generador de consultas basados en Entity-SQL declarados por ObjectQuery.</summary>
      <typeparam name="T">Tipo de resultado de esta ObjectQuery</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> utilizando el comando de Entity SQL especificado como consulta inicial.</summary>
      <param name="commandText">Consulta Entity SQL.</param>
      <param name="context">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> en el que se va a ejecutar la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> utilizando el comando Entity SQL especificado como consulta inicial y la opción de combinación especificada.</summary>
      <param name="commandText">Consulta Entity SQL.</param>
      <param name="context">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> en el que se va a ejecutar la consulta.</param>
      <param name="mergeOption">Especifica el modo en que las entidades que se recuperen a través de esta consulta se deberían combinar con las entidades devueltas por consultas anteriores en el mismo <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>Limita la consulta a los resultados únicos.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando SELECT DISTINCT.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Este método de generador de consulta crea una nueva consulta cuyos resultados son todos los resultados de esta consulta, excepto los que también forman parte de la otra consulta especificada.</summary>
      <returns>Nueva instancia de ObjectQuery.</returns>
      <param name="query">Consulta que representa los resultados que se van a excluir.</param>
      <exception cref="T:System.ArgumentNullException">Si el parámetro de consulta es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Ejecuta la consulta de objeto con la opción de combinación especificada.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Ejecuta de manera asíncrona la consulta de objeto con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos de entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Ejecuta de manera asíncrona la consulta de objeto con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> que contiene una colección de objetos de entidad devueltos por la consulta.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se debe usar al ejecutar la consulta.El valor predeterminado es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Agrupa los resultados de la consulta de acuerdo con los criterios especificados.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> de tipo <see cref="T:System.Data.Common.DbDataRecord" />, que es equivalente a la instancia original con GROUP BY aplicado.</returns>
      <param name="keys">Columnas de clave por las que se deben agrupar los resultados.</param>
      <param name="projection">Lista de propiedades seleccionadas que define la proyección.</param>
      <param name="parameters">Cero o más parámetros que se usan en este método.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro de consulta es NULL o una cadena vacía, o bien el parámetro de proyección es NULL o una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nueva <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> con la ruta de la consulta definida.</returns>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
      <exception cref="T:System.ArgumentNullException">path es NULL.</exception>
      <exception cref="T:System.ArgumentException">path es empty (está vacía).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Este método de generador de consulta crea una nueva consulta cuyos resultados son los que están tanto en esta consulta como en la otra consulta especificada.</summary>
      <returns>Nueva instancia de ObjectQuery.</returns>
      <param name="query">Consulta que representa los resultados con los que se va a formar una intersección.</param>
      <exception cref="T:System.ArgumentNullException">Si el parámetro de consulta es NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>Obtiene o establece el nombre de esta consulta de objeto.</summary>
      <returns>Una valor de cadena que es el nombre de este <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>Limita la consulta a los resultados de un tipo determinado.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando OFTYPE.</returns>
      <typeparam name="TResultType">Tipo del <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> devuelto cuando la consulta se ejecuta con el filtro aplicado.</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">El tipo especificado no es válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ordena los resultados de la consulta de acuerdo con los criterios especificados.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando ORDER BY.</returns>
      <param name="keys">Columnas de clave por las que se deben ordenar los resultados.</param>
      <param name="parameters">Cero o más parámetros que se usan en este método.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro keys o parameters es NULL.</exception>
      <exception cref="T:System.ArgumentException">key es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limita los resultados de la consulta a las propiedades definidas en la proyección especificada.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> de tipo <see cref="T:System.Data.Common.DbDataRecord" /> que es equivalente a la instancia original, pero aplicando SELECT.</returns>
      <param name="projection">Lista de propiedades seleccionadas que define la proyección.</param>
      <param name="parameters">Cero o más parámetros que se usan en este método.</param>
      <exception cref="T:System.ArgumentNullException">La proyección es NULL o los parámetros son NULL.</exception>
      <exception cref="T:System.ArgumentException">projection es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limita los resultados de la consulta a la propiedad especificada en la proyección.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> de un tipo compatible con la proyección especificada.La <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> devuelta es equivalente a la instancia original, pero aplicando SELECT VALUE.</returns>
      <param name="projection">Lista de proyección.</param>
      <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
      <typeparam name="TResultType">Tipo de la <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> devuelta por el método <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">La proyección es NULL o los parámetros son NULL.</exception>
      <exception cref="T:System.ArgumentException">projection es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ordena los resultados de la consulta según los criterios especificados y omite un número especificado de resultados.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando ORDER BY y SKIP.</returns>
      <param name="keys">Columnas de clave por las que se deben ordenar los resultados.</param>
      <param name="count">Número de resultados que hay que omitir.Debe ser una constante o una referencia de parámetro.</param>
      <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
      <exception cref="T:System.ArgumentNullException">Cualquier argumento es NULL.</exception>
      <exception cref="T:System.ArgumentException">Las claves son una cadena vacía, o bien recuento es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.Generic.IEnumerator`1" /> que, cuando se enumera, ejecuta la consulta SQL proporcionada en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> que, cuando se enumera, ejecuta la consulta SQL proporcionada en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limita los resultados de la consulta al número de elementos especificado.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando TOP.</returns>
      <param name="count">Número de elementos en los resultados, como un valor string.</param>
      <param name="parameters">Conjunto opcional de parámetros de consulta que deberían estar en el ámbito durante el análisis.</param>
      <exception cref="T:System.ArgumentNullException">count es NULL.</exception>
      <exception cref="T:System.ArgumentException">count es una cadena vacía.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Este método de generador de consulta crea una nueva consulta cuyos resultados son todos los resultados de esta consulta, además de todos los resultados de la otra consulta, sin duplicados (es decir, los resultados son únicos).</summary>
      <returns>Nueva instancia de ObjectQuery.</returns>
      <param name="query">Consulta que representa los resultados que se van a agregar.</param>
      <exception cref="T:System.ArgumentNullException">Si el parámetro de consulta es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Este método de generador de consulta crea una nueva consulta cuyos resultados son todos los resultados de esta consulta, además de todos los resultados de la otra consulta, incluidos los duplicados (es decir, los resultados no son únicos necesariamente).</summary>
      <returns>Nueva instancia de ObjectQuery.</returns>
      <param name="query">Consulta que representa los resultados que se van a agregar.</param>
      <exception cref="T:System.ArgumentNullException">Si el parámetro de consulta es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Limita la consulta a los resultados que coinciden con los criterios de filtrado especificados.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que es equivalente a la instancia original, pero aplicando WHERE.</returns>
      <param name="predicate">Predicado de filtro.</param>
      <param name="parameters">Cero o más parámetros que se usan en este método.</param>
      <exception cref="T:System.ArgumentNullException">El predicado es NULL o los parámetros son NULL.</exception>
      <exception cref="T:System.ArgumentException">El predicado es una cadena vacía.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>Esta clase implementa IEnumerable e IDisposable.La instancia de esta clase se devuelve desde el método ObjectQuery.Execute.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>Realiza tareas relacionadas con la liberación o el restablecimiento de recursos.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>Libera los recursos utilizados por el resultado del objeto.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo del <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> genérico.</summary>
      <returns>El tipo del <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> genérico.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>Obtiene el siguiente conjunto de resultados de un procedimiento almacenado.</summary>
      <returns>Un ObjectResult que enumera los valores del siguiente conjunto de resultados.NULL si no hay más, o bien si el ObjectResult no es el resultado de una invocación de procedimiento almacenada.</returns>
      <typeparam name="TElement">Tipo del elemento.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración los resultados de la consulta.</summary>
      <returns>Enumerador que recorre en iteración los resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Implementación de IListSource.ContainsListCollection.Siempre devuelve false.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Devuelve los resultados en un formato útil para el enlace de datos.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> de objetos entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve un enumerador asíncrono que recorre en iteración los resultados de la consulta.</summary>
      <returns>Un enumerador asíncrono que recorre en iteración los resultados de la consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>Esa clase representa el resultado del método <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" />.</summary>
      <typeparam name="T">Tipo del resultado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados usados por <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> y libera los recursos administrados de forma opcional.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>Obtiene el tipo de <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>
        <see cref="T:System.Type" /> que es el tipo de <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración los resultados de la consulta.</summary>
      <returns>Enumerador que recorre en iteración los resultados de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Obtiene de manera asíncrona un enumerador que recorre en iteración <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>El enumerador que recorre en iteración <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>Representa un conjunto de entidades con tipo que se usa para realizar operaciones de creación, lectura, actualización y eliminación.</summary>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Incluye un objeto al contexto del objeto en el conjunto de entidades actual.</summary>
      <param name="entity">Objeto que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Copia los valores escalares del objeto proporcionado al objeto de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> que tiene la misma clave.</summary>
      <returns>El objeto actualizado.</returns>
      <param name="currentEntity">Objeto desasociado que tiene actualizaciones de propiedades que deben aplicarse al objeto original.La clave de entidad de currentEntity debe coincidir con la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> de una entrada en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Define la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> de un objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> de forma que coincida con los valores de propiedad de un objeto proporcionado.</summary>
      <returns>El objeto actualizado.</returns>
      <param name="originalEntity">Objeto desasociado que tiene actualizaciones de propiedades que deben aplicarse al objeto original.La clave de entidad de originalmente debe coincidir con la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> de una entrada en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>Adjunta un objeto o un gráfico de objetos al contexto del objeto en el conjunto de entidades actual.</summary>
      <param name="entity">Objeto que se va a asociar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>Crea una instancia del tipo especificado.</summary>
      <returns>Una instancia de T del tipo solicitado, o bien una instancia de un tipo de proxy que corresponde al valor T de tipo.</returns>
      <typeparam name="T">Tipo de objeto que se va a devolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>Crea un nuevo objeto de tipo de entidad.</summary>
      <returns>Nuevo objeto de tipo de entidad o una instancia de un tipo de proxy que corresponde al tipo de entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Marca un objeto para su eliminación.</summary>
      <param name="entity">Un objeto que representa la entidad que se va a eliminar.El objeto puede encontrarse en cualquier estado, excepto <see cref="F:System.Data.Entity.EntityState.Detached" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>Quita el objeto del contexto del objeto.</summary>
      <param name="entity">Objeto que se va a desasociar.Solo se quita la entidad; si hay objetos relacionados cuyo seguimiento esté realizando el mismo <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, no serán disociados automáticamente.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>Obtiene los metadatos del conjunto de entidades representado por esta instancia de <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>Representa una entidad, código auxiliar de entidad o una relación</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Acepta los valores actuales como valores originales.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Define los valores actuales de la entrada para que coincidan con los valores de propiedad de un objeto proporcionado.</summary>
      <param name="currentEntity">Objeto disociado que tiene valores actualizados que deben aplicarse al objeto.También currentEntity puede ser la clave de entidad del objeto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Define los valores originales de la entrada para que coincidan con los valores de propiedad de un objeto proporcionado.</summary>
      <param name="originalEntity">Objeto disociado que tiene valores originales que deben aplicarse al objeto.También originalEntity puede ser la clave de entidad del objeto.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>Cambia el estado de la entrada para el valor de <see cref="T:System.Data.Entity.EntityState" /> especificado.</summary>
      <param name="state">Valor de <see cref="T:System.Data.Entity.EntityState" /> que se va a establecer para la propiedad <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> de la entrada.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>Obtiene los valores de propiedad actuales del objeto o la relación asociada a esta <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> .</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" /> que contiene los valores actuales del objeto o la relación asociada a esta <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>Marca una entidad como eliminada.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>Obtiene el objeto entidad.</summary>
      <returns>El objeto entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>Obtiene la clave de entidad.</summary>
      <returns>Clave de entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>Obtiene el <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> del objeto o de la relación.</summary>
      <returns>El <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> del objeto o de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Devuelve los nombres de las propiedades de un objeto que han cambiado desde que se invocó a <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> por última vez.</summary>
      <returns>Una colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> de nombres como cadena.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Obtiene la versión actualizable de los valores originales del objeto asociado a este objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>Valores originales actualizables de datos del objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>Usa DetectChanges para determinar si el valor actual de la propiedad con el nombre especificado es distinto de su valor original.Tenga en cuenta que puede ser distinto que el de la propiedad marcada como modificada, ya que una propiedad que no ha cambiado se puede seguir marcando como modificada.</summary>
      <returns>Es true si la propiedad ha cambiado; de lo contrario, es false.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> representa o no una relación.</summary>
      <returns>Es true si <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> representa una relación; de lo contrario, es, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Obtiene el objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> para <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> .</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> para <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>Obtiene la versión de solo lectura de los valores originales del objeto o de la relación.</summary>
      <returns>La versión de solo lectura de los valores originales de la entrada o entidad del conjunto de relaciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>Rechaza los cambios realizados en la propiedad con el nombre especificado, ya que la propiedad se cargó, asoció o guardó, o se aceptaron los cambios.Se almacena el valor original de la propiedad y esta ya no se marcará más como modificada.</summary>
      <param name="propertyName">Nombre de la propiedad que se va a cambiar.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Obtiene la instancia de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> para el objeto representado por la entrada.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>Define el estado del objeto o de la relación que se va a modificar.</summary>
      <exception cref="T:System.InvalidOperationException">Si el estado no es Modified o Unchanged</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Marca la propiedad especificada como modificada.</summary>
      <param name="propertyName">Nombre de la propiedad.</param>
      <exception cref="T:System.InvalidOperationException">Si el estado no es Modified o Unchanged</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>Obtiene el estado del objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>El estado de la <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Se usa para notificar que se ha cambiado una propiedad compleja El valor de propiedad que se almacenó en memoria caché durante EntityMemberChanging se agrega ahora a OriginalValues</summary>
      <param name="entityMemberName">Nombre de la propiedad de entidad de nivel superior que ha cambiado</param>
      <param name="complexObject">Objeto complejo que contiene la propiedad modificada</param>
      <param name="complexObjectMemberName">Nombre de la propiedad modificada en complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Se usa para notificar que una propiedad compleja está a punto de cambiar El valor actual de la propiedad especificada se almacena en memoria caché cuando se llama a este método.</summary>
      <param name="entityMemberName">Nombre de la propiedad de entidad de nivel superior que está cambiando</param>
      <param name="complexObject">Objeto complejo que contiene la propiedad que se está modificando</param>
      <param name="complexObjectMemberName">Nombre de la propiedad que está cambiando en complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Se usa para notificar que se ha cambiado una propiedad de entidad escalar El valor de propiedad que se almacenó en memoria caché durante EntityMemberChanging se agrega ahora a OriginalValues</summary>
      <param name="entityMemberName">Nombre de la propiedad de entidad que ha cambiado</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Se usa para notificar que una propiedad de entidad escalar está a punto de cambiar El valor actual de la propiedad especificada se almacena en memoria caché cuando se llama a este método.</summary>
      <param name="entityMemberName">Nombre de la propiedad de entidad que se está modificando</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Devuelve el EntityState de la ObjectStateEntry</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>Mantiene el estado de los objetos y la administración de las identidades en las instancias de tipo de entidad y en las instancias de relación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</summary>
      <param name="metadataWorkspace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, que proporciona la información de asignación y de metadatos.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>Cambia el estado de <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> de un objeto concreto por el entityState especificado.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> de la entidad proporcionada.</returns>
      <param name="entity">Objeto cuyo estado debe cambiarse.</param>
      <param name="entityState">Nuevo estado del objeto.</param>
      <exception cref="T:System.ArgumentNullException">Si la entidad es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Si el objeto no está disociado y no tiene una entrada en el administrador de estado, o bien si se intenta cambiar el estado <see cref="F:System.Data.Entity.EntityState.Detached" /> desde cualquier otro <see cref="T:System.Data.Entity.EntityState." />, o bien si es estado no es un valor <see cref="T:System.Data.Entity.EntityState" /> válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y el nombre de la propiedad de navegación.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la relación que ha cambiado.</returns>
      <param name="sourceEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
      <param name="targetEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
      <param name="navigationProperty">Nombre de la propiedad de navegación en el origen que devuelve el objetivo especificado.</param>
      <param name="relationshipState">Enumeración <see cref="T:System.Data.Entity.EntityState" /> solicitada de la relación especificada.</param>
      <exception cref="T:System.ArgumentNullException">Si el origen o el objetivo es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Deleted" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el objetivo se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien si se intenta cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Added" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el destino se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Added" />, o bien cuando el estado no es un valor <see cref="T:System.Data.Entity.EntityState" /> válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y en las propiedades de la relación.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la relación que ha cambiado.</returns>
      <param name="sourceEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
      <param name="targetEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
      <param name="relationshipName">Nombre de la relación.</param>
      <param name="targetRoleName">El nombre del rol en el extremo de destino de la relación.</param>
      <param name="relationshipState">Enumeración <see cref="T:System.Data.Entity.EntityState" /> solicitada de la relación especificada.</param>
      <exception cref="T:System.ArgumentNullException">Si el origen o el objetivo es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Deleted" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el objetivo se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien si se intenta cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Added" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el destino se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Added" />, o bien cuando el estado no es un valor <see cref="T:System.Data.Entity.EntityState" /> válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>Cambia el estado de la relación entre dos objetos entidad especificados basándose en los dos objetos relacionados y una expresión LINQ que define la propiedad de navegación.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la relación que ha cambiado.</returns>
      <param name="sourceEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de origen que se encuentra en un extremo de la relación.</param>
      <param name="targetEntity">Instancia de objeto u objeto <see cref="T:System.Data.Entity.Core.EntityKey" /> de la entidad de destino que se encuentra en el otro extremo de la relación.</param>
      <param name="navigationPropertySelector">Una expresión LINQ que selecciona la propiedad de navegación en el origen que devuelve el objetivo especificado.</param>
      <param name="relationshipState">Enumeración <see cref="T:System.Data.Entity.EntityState" /> solicitada de la relación especificada.</param>
      <typeparam name="TEntity">El tipo de entidad del objeto de origen.</typeparam>
      <exception cref="T:System.ArgumentNullException">Si el origen, el objetivo o el selector es NULL.</exception>
      <exception cref="T:System.ArgumentException">El selector es incorrecto o no puede devolver una propiedad de navegación.</exception>
      <exception cref="T:System.InvalidOperationException">Al intentar cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Deleted" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el objetivo se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien si se intenta cambiar el estado de la relación por un estado distinto de <see cref="F:System.Data.Entity.EntityState.Added" /> o de <see cref="F:System.Data.Entity.EntityState.Detached" /> cuando el origen o el destino se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Added" />, o bien cuando el estado no es un valor <see cref="T:System.Data.Entity.EntityState" /> válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>Devuelve una colección de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para los objetos o las relaciones que tienen el estado especificado.</summary>
      <returns>Colección de objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> que están en el <see cref="T:System.Data.Entity.EntityState" /> especificado.</returns>
      <param name="state">
        <see cref="T:System.Data.Entity.EntityState" /> usado para filtrar los objetos <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> devueltos.</param>
      <exception cref="T:System.ArgumentException">Si el estado es <see cref="F:System.Data.Entity.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la entrada de objeto o de relación con la clave especificada.</summary>
      <returns>La <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondiente al <see cref="T:System.Data.Entity.Core.EntityKey" /> especificado.</returns>
      <param name="key">El objeto <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Si la clave es NULL.</exception>
      <exception cref="T:System.ArgumentException">Cuando la clave especificada no se puede encontrar en el administrador de estado.</exception>
      <exception cref="T:System.InvalidOperationException">No existe ninguna entidad con la <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada en el <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para el objeto especificado.</summary>
      <returns>La <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondiente al <see cref="T:System.Object" /> especificado.</returns>
      <param name="entity">
        <see cref="T:System.Object" /> al que pertenece la <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> recuperada.</param>
      <exception cref="T:System.InvalidOperationException">No existe ninguna entidad para el <see cref="T:System.Object" /> especificado en el <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Devuelve la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> usada por el objeto especificado.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> para el objeto especificado.</returns>
      <param name="entity">Objeto para el que se va a devolver la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">La entidad no implementa IEntityWithRelationships y este ObjectStateManager no hace un seguimiento de ella</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Obtiene el <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> asociada a este administrador de estados.</summary>
      <returns>Control <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> asociado a este objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> .</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Se produce cuando las entidades se agregan o se quitan del administrador de estados.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Intenta recuperar la correspondiente <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para el objeto o la relación con la <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada.</summary>
      <returns>Valor booleano que es true si hay una <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondiente para la <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada; de lo contrario, es false.</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada.</param>
      <param name="entry">Cuando termina, este método contiene una <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">Se proporciona un valor NULL (Nothing en Visual Basic) para la clave.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Intenta recuperar la correspondiente <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para el <see cref="T:System.Object" /> especificado.</summary>
      <returns>Valor booleano que es true si hay una <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> correspondiente para el objeto especificado; de lo contrario, false.</returns>
      <param name="entity">
        <see cref="T:System.Object" /> al que pertenece la <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> recuperada.</param>
      <param name="entry">Cuando termina, este método contiene la <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> para la <see cref="T:System.Data.Entity.Core.EntityKey" /> especificada. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>Devuelve la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> usada por el objeto especificado.</summary>
      <returns>Es true si se ha devuelto una instancia <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> para la entidad proporcionada; de lo contrario, es false.</returns>
      <param name="entity">Objeto para el que se va a devolver la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">Cuando este método devuelve, contiene el <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> de la entidad .</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>Los valores originales de las propiedades de una entidad cuando fue recuperada desde la base de datos.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>DataContractResolver que sabe cómo resolver tipos de proxy creados para las clases ignorantes permanentes en sus tipos base.Se usa con el DataContractSerializer.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>Durante la deserialización, asigna toda la información de xsi:type al tipo real del objeto que ignora la persistencia.</summary>
      <returns>Devuelve el tipo al que xsi:type está asignado.Devuelve NULL si no se encontró ningún tipo conocido que coincida con xsi:type.</returns>
      <param name="typeName">La información xsi:type que se va a asignar.</param>
      <param name="typeNamespace">Nombre del espacio de nombres del xsi:type.</param>
      <param name="declaredType">Tipo declarado.</param>
      <param name="knownTypeResolver">Una instancia de <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>Durante la serialización, asigna tipos reales a la información de xsi:type.</summary>
      <returns>True si el tipo fue resuelto; de lo contrario, false.</returns>
      <param name="type">Tipo real del objeto que ignora la persistencia.</param>
      <param name="declaredType">Tipo declarado.</param>
      <param name="knownTypeResolver">Una instancia de <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">Cuando este método devuelve un valor, contiene una lista de declaraciones de xsi:type.</param>
      <param name="typeNamespace">Cuando este método devuelve un valor, contiene una lista de los espacios de nombres utilizados.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>Define las diferentes maneras de procesar propiedades modificadas al actualizar los datos de la memoria desde la base de datos.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>Para los objetos cliente sin modificar, el mismo comportamiento que StoreWins.Para los objetos cliente modificados, actualiza los valores originales con el valor de almacenamiento, conservando todos los valores del objeto cliente.La próxima vez que se realice una actualización, todas las unidades de cambio del cliente se considerarán modificadas y necesitarán actualizarse.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>Descarta todos los cambios en el cliente y actualiza los valores con valores de almacenamiento.Los valores originales del cliente se actualizan para que coincidan con el almacenamiento.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>Marcas usadas para modificar el comportamiento de ObjectContext.SaveChanges()</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>Una vez guardados los cambios, se invoca al método AcceptAllChangesAfterSave, que restablece el seguimiento de cambios en ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Antes de guardar los cambios, se invoca al método DetectChanges para sincronizar los valores de propiedad de los objetos adjuntos al contexto del objeto con los datos de ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>Se guardan los cambios sin llamar a los métodos DetectChanges o AcceptAllChangesAfterSave.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>Esta es la interfaz que representa la interfaz mínima necesaria para ser una entidad en ADO.NET.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que una propiedad de un objeto complejo ha cambiado.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
      <exception cref="T:System.ArgumentNullException">property es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que hay un cambio de propiedad pendiente en un objeto complejo.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
      <exception cref="T:System.ArgumentNullException">property es NULL.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Atributo para propiedades complejas Propiedades predeterminadas implícitas de AttributeUsage Inherited=True, AllowMultiple=False, El sistema de metadatos espera esto y solo examinará el primero de cada uno de estos atributos, incluso aunque haya más.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>atributo para tipos complejos</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Atributo que identifica la clase base de Edm</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>Atributo que indica un tipo de enumeración.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Indica que el método especificado es un proxy para una función de EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Crea una nueva instancia de DbFunctionAttribute.</summary>
      <param name="namespaceName">Nombre del espacio de nombres de la función de EDM representada por el método atribuido.</param>
      <param name="functionName">Nombre de la función de EDM representada por el método atribuido.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Atributo base para las propiedades asignadas a elementos de almacenamiento.Propiedades predeterminadas implícitas de AttributeUsage Inherited=True, AllowMultiple=False, El sistema de metadatos espera esto y solo examinará el primero de cada uno de estos atributos, incluso aunque haya más.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Define una relación entre dos tipos de entidades basada en una asociación del modelo conceptual.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Crea una instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Nombre del espacio de nombres para la asociación en la que participa esta entidad.</param>
      <param name="relationshipName">Nombre de una relación en la que participa esta entidad.</param>
      <param name="role1Name">Nombre del rol para el tipo de un extremo de la asociación.</param>
      <param name="role1Multiplicity">Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad de un extremo de la asociación; por ejemplo, uno o varios.</param>
      <param name="role1Type">Tipo de la entidad de un extremo de la asociación.</param>
      <param name="role2Name">Nombre del rol para el tipo del otro extremo de la asociación.</param>
      <param name="role2Multiplicity">Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad del otro extremo de la asociación; por ejemplo, uno o varios.</param>
      <param name="role2Type">Tipo de la entidad del otro extremo de la asociación.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Nombre del espacio de nombres para la asociación en la que participa esta entidad.</param>
      <param name="relationshipName">Nombre de una relación en la que participa esta entidad.</param>
      <param name="role1Name">Nombre del rol para el tipo de un extremo de la asociación.</param>
      <param name="role1Multiplicity">Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad de un extremo de la asociación; por ejemplo, uno o varios.</param>
      <param name="role1Type">Tipo de la entidad de un extremo de la asociación.</param>
      <param name="role2Name">Nombre del rol para el tipo del otro extremo de la asociación.</param>
      <param name="role2Multiplicity">Valor de <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad del otro extremo de la asociación; por ejemplo, uno o varios.</param>
      <param name="role2Type">Tipo de la entidad del otro extremo de la asociación.</param>
      <param name="isForeignKey">Valor que indica si la relación está o no basada en el valor de clave externa.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Obtiene un valor booleano que indica si la relación está o no basada en el valor de clave externa.</summary>
      <returns>Es true si la relación está basada en el valor de la clave externa; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Nombre de la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre de una relación definida por este <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> .</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Espacio de nombres para la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el espacio de nombres para la relación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplicidad de un extremo de la relación.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Nombre del rol de un extremo de la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre del rol.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Tipo de la entidad de un extremo de la relación.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo del objeto de este extremo de la asociación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplicidad del otro extremo de la relación.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> que indica la multiplicidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Nombre del rol del otro extremo de la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre del rol.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Tipo de la entidad del otro extremo de la relación.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo del objeto del otro extremo de la asociación.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Atributo que identifica los extremos definidos para un RelationshipSet Propiedades predeterminadas implícitas de AttributeUsage Inherited=True, AllowMultiple=False, El sistema de metadatos espera esto y solo examinará el primero de cada uno de estos atributos, incluso aunque haya más.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />.</summary>
      <param name="relationshipNamespaceName">Espacio de nombres de la propiedad de relación.</param>
      <param name="relationshipName">Nombre de la relación.El nombre de la relación no está calificado por el espacio de nombres.</param>
      <param name="targetRoleName">Nombre del rol del otro extremo de la relación.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Obtiene el nombre de la relación sin calificar.</summary>
      <returns>Nombre de la relación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Nombre del espacio de nombres de la propiedad de navegación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre del espacio de nombres.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Obtiene el nombre del rol en el otro extremo de la relación.</summary>
      <returns>El nombre del rol de destino se especifica mediante el atributo Role del otro elemento End de la asociación que define esta relación en el modelo conceptual.Consulte más información en Asociación (EDM).</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Atributo para las propiedades escalares de una IEntity.Propiedades predeterminadas implícitas de AttributeUsage Inherited=True, AllowMultiple=False, El sistema de metadatos espera esto y solo examinará el primero de cada uno de estos atributos, incluso aunque haya más.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Obtiene o establece el valor que indica si la propiedad forma parte de la clave de entidad.</summary>
      <returns>El valor que indica si la propiedad forma parte de la clave de entidad.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Obtiene o establece el valor que indica si la propiedad puede tener un valor NULL.</summary>
      <returns>Valor que indica si la propiedad puede tener un valor NULL.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Atributo para tipos estáticos</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> con un valor único para cada modelo al que hace referencia el ensamblado.</summary>
      <param name="assemblyGuid">Cadena que es un valor GUID único para el modelo en el ensamblado.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>Atributo base para los tipos esquematizados</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Nombre del tipo del esquema conceptual que se asigna a la clase a la que se aplica este atributo.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Nombre de espacio de nombres del tipo de objeto entidad o tipo complejo del esquema conceptual que se asigna a este tipo.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre del espacio de nombres.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>Colección de entidades que modelan una construcción determinada de EDM que puede ser todas las entidades de un tipo determinado o las entidades que participan en una relación determinada.</summary>
      <typeparam name="TEntity">Tipo de entidades de esta colección.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Agrega un objeto a la colección.</summary>
      <param name="item">Objeto que se va a agregar a la colección.La entidad debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> .</param>
      <exception cref="T:System.ArgumentNullException">entity es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Define las relaciones entre un objeto y una colección de objetos relacionados en un contexto del objeto.</summary>
      <param name="entities">Colección de objetos del contexto del objeto que están relacionados con el objeto de origen.</param>
      <exception cref="T:System.ArgumentNullException">La colección entities es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">El objeto de origen o un objeto de la colección de entidades es NULL, o bien no está en estado <see cref="F:System.Data.Entity.EntityState.Unchanged" /> o <see cref="F:System.Data.Entity.EntityState.Modified" />. —o bien— No es posible definir la relación en función de los metadatos de EDM.Esto puede ocurrir cuando la asociación del esquema conceptual no admite una relación entre los dos tipos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Define una relación entre dos objetos asociados del contexto del objeto.</summary>
      <param name="entity">Objeto que se va a asociar.</param>
      <exception cref="T:System.ArgumentNullException">Cuando entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Cuando entity no se puede relacionar con el objeto de origen.Esto puede ocurrir cuando la asociación del esquema conceptual no admite una relación entre los dos tipos. —o bien— Si el objeto es NULL o bien no se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Unchanged" /> o <see cref="F:System.Data.Entity.EntityState.Modified" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Quita todas las entidades de la colección.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Determina si un objeto concreto existe en la colección.</summary>
      <returns>Es true si el objeto es hallado en <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copia todo el contenido de la colección en una matriz, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="array">Matriz en la que se va a copiar.</param>
      <param name="arrayIndex">El índice de base cero de la matriz donde comienza la copia.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Obtiene el número de objetos existentes en la colección.</summary>
      <returns>Número de elementos existentes en la <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> .</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Devuelve una consulta de objeto que, cuando se ejecuta, devuelve el mismo conjunto de objetos que existe en la colección actual.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que representa la colección de entidades.</returns>
      <exception cref="T:System.InvalidOperationException">Cuando el objeto se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Added" />, o bien se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" /> con un <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> distinto de <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Devuelve un enumerador que se usa para recorrer en iteración los objetos de la colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración el conjunto de valores que <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ha almacenado en caché.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> es de solo lectura.</summary>
      <returns>Siempre devuelve false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga los objetos relacionados en la colección con la opción de combinación especificada.</summary>
      <param name="mergeOption">Especifica cómo se deben combinar los objetos de esta colección con los objetos devueltos de consultas anteriores realizadas en el mismo <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la entidad o las entidades relacionadas en el extremo relacionado con la opción de combinación predeterminada.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="mergeOption">La opción de combinación.</param>
      <param name="cancellationToken">Un CancellationToken para observar mientras se espera que concluya la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Se usa internamente para deserializar los objetos entidad.</summary>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Se usa internamente para serializar los objetos entidad.</summary>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Quita un objeto de la colección y marca la relación para eliminación.</summary>
      <returns>Es true si el elemento se ha quitado correctamente; en caso contrario, es false.</returns>
      <param name="item">Objeto que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentNullException">El objeto entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">El objeto de entidad no está asociado al mismo contexto de objeto. —o bien— El objeto de entidad no tiene un administrador de relaciones válido.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que se usa para recorrer en iteración el conjunto de valores que <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ha almacenado en caché.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración el conjunto de valores que <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ha almacenado en caché.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Implementación de IListSource.ContainsListCollection.Siempre devuelve false.Esto significa que la IList que devolvemos es la que contiene nuestros datos reales, no es una lista de colecciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Devuelve la colección como una <see cref="T:System.Collections.IList" /> usada para el enlace de datos.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> de objetos entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>Esta es la clase base para todas las clases EntityObject descritas.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Obtiene o establece la clave para este objeto.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> para este objeto.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>Obtiene el estado de entidad del objeto.</summary>
      <returns>
        <see cref="T:System.Data.Entity.EntityState" /> de este objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que una propiedad ha cambiado.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
      <exception cref="T:System.ArgumentNullException">property es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que hay un cambio pendiente en la propiedad.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
      <exception cref="T:System.ArgumentNullException">property es NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Lo usa ObjectStateManager para asociar o separar este EntityObject en la memoria caché.</summary>
      <param name="changeTracker">Referencia a la ObjectStateEntry que contiene esta entidad</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Devuelve el contenedor para los objetos, colecciones y referencias de propiedad de navegación de relación creados de forma diferida.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>Modela un extremo de relación con la multiplicidad 1.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Devuelve la clave del objeto relacionado.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> que es la clave del objeto relacionado.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>Modela un extremo de relación con la multiplicidad 1.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que se hace referencia.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Crea una relación de varios a uno o de uno a uno entre dos objetos en el contexto del objeto.</summary>
      <param name="entity">Objeto que se va a asociar.</param>
      <exception cref="T:System.ArgumentNullException">Cuando entity es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Cuando entity no se puede relacionar con el extremo relacionado actual.Esto puede ocurrir cuando la asociación del esquema conceptual no admite una relación entre los dos tipos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Crea una consulta de objeto equivalente que devuelve el objeto relacionado.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que devuelve el objeto relacionado.</returns>
      <exception cref="T:System.InvalidOperationException">Cuando el objeto se encuentra en un estado <see cref="F:System.Data.Entity.EntityState.Added" />, o bien se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Detached" /> con un <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" /> distinto de <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga el objeto relacionado para esta <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> con la opción de combinación especificada.</summary>
      <param name="mergeOption">Especifica cómo se debe devolver el objeto si ya existe en el <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> .</param>
      <exception cref="T:System.InvalidOperationException">El origen del <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> es NULL, o bien una consulta devolvió más de un extremo relacionado, o bien una consulta no devolvió ningún extremo relacionado y se esperaba uno.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la entidad o las entidades relacionadas en el extremo relacionado con la opción de combinación predeterminada.</summary>
      <returns>La o las entidades cargadas en el extremo relacionado.</returns>
      <param name="mergeOption">Las opciones de combinación.</param>
      <param name="cancellationToken">Un CancellationToken para observar mientras se espera que concluya la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Este método se usa internamente para serializar los objetos entidad relacionados.</summary>
      <param name="context">Secuencia serializada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Este método se usa internamente para serializar los objetos entidad relacionados.</summary>
      <param name="context">Secuencia serializada.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>Obtiene o define el objeto relacionado devuelto por esta <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> .</summary>
      <returns>Objeto devuelto por esta <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>Esta interfaz se implementa mediante una herramienta de seguimiento de cambios y la usan las clases de datos para notificar cambios</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que una propiedad de un tipo complejo ha cambiado.</summary>
      <param name="entityMemberName">Nombre de la propiedad compleja del tipo de entidad que ha cambiado.</param>
      <param name="complexObject">Nombre del tipo complejo que contiene la propiedad modificada.</param>
      <param name="complexObjectMemberName">Nombre de la propiedad modificada en el tipo complejo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que hay un cambio pendiente en una propiedad compleja.</summary>
      <param name="entityMemberName">Nombre de la propiedad de entidad de nivel superior que está cambiando.</param>
      <param name="complexObject">Tipo complejo que contiene la propiedad que está cambiando.</param>
      <param name="complexObjectMemberName">Nombre de la propiedad que está cambiando en el tipo complejo.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que una propiedad de un tipo de entidad ha cambiado.</summary>
      <param name="entityMemberName">Nombre de la propiedad que se ha modificado.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Notifica a la herramienta de seguimiento de cambios que hay un cambio pendiente en una propiedad de un tipo de entidad.</summary>
      <param name="entityMemberName">Nombre de la propiedad que cambia.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Obtiene el estado actual de un objeto al que se ha hecho un seguimiento.</summary>
      <returns>Un <see cref="T:System.Data.Entity.EntityState" /> que es el estado del objeto en seguimiento. Consulte más información en Resolución de identidad, Gestión de estados, Seguimiento de cambios y Cambios de seguimiento de Entidades POCO.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Interfaz mínima que una clase de datos debe implementar para que la administre una herramienta de seguimiento de cambios.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Obtiene o establece el <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> que se usa para informar acerca de los cambios.</summary>
      <param name="changeTracker">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> que se usa para informar acerca de los cambios.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>Interfaz que define una entidad que contiene una clave.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Obtiene o establece la <see cref="T:System.Data.Entity.Core.EntityKey" /> para las instancias de tipos de entidades que implementan esta interfaz.</summary>
      <returns>La <see cref="T:System.Data.Entity.Core.EntityKey" /> para las instancias de tipos de entidades que implementan esta interfaz.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>Interfaz que una clase de datos debe implementar si expone relaciones</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Devuelve el administrador de relaciones que administra las relaciones para una instancia de un tipo de entidad.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> para esta entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>Representa un extremo de una relación.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Agrega un objeto al extremo relacionado.</summary>
      <param name="entity">Objeto que se va a agregar a la colección.La entidad debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Agrega un objeto al extremo relacionado.</summary>
      <param name="entity">Objeto que se va a agregar a la colección.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Define una relación entre dos objetos asociados.</summary>
      <param name="entity">Objeto que se va a asociar.La entidad debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Define una relación entre dos objetos asociados.</summary>
      <param name="entity">Objeto que se va a asociar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Devuelve una <see cref="T:System.Collections.IEnumerable" /> que representa los objetos que pertenecen al extremo relacionado.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerable" /> que representa los objetos que pertenecen al extremo relacionado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Devuelve un <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración la colección de objetos relacionados.</summary>
      <returns>Un <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración la colección de objetos relacionados.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Obtiene o establece un valor que indica si la entidad (para un <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />) o todas las entidades de la colección (para un <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />) se han cargado desde la base de datos.</summary>
      <returns>True si se cargan todas las entidades relacionadas o la marca IsLoaded se ha establecido explícitamente en true; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Carga el objeto o los objetos relacionados en este extremo relacionado con la opción de combinación predeterminada.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga el objeto o los objetos relacionados en el extremo relacionado con la opción de combinación especificada.</summary>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se usará para combinar objetos en una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existente.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Carga de manera asíncrona el objeto o los objetos relacionados en el extremo relacionado con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se usará para combinar objetos en una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existente.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de manera asíncrona el o los objetos relacionados en este extremo relacionado con la opción de combinación predeterminada.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Obtiene el nombre de la relación en la que participa este extremo relacionado.</summary>
      <returns>Nombre de la relación en la que participa este <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.El nombre de la relación no está calificado por el espacio de nombres.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Devuelve una referencia a los metadatos para el extremo relacionado.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> que contiene los metadatos para el extremo de una relación.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Quita un objeto de la colección de objetos en el extremo relacionado.</summary>
      <returns>Es true si la entidad fue quitada correctamente; o bien false si no era parte del <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> .</returns>
      <param name="entity">Objeto que se va a quitar de la colección.La entidad debe implementar <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> .</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Quita un objeto de la colección de objetos en el extremo relacionado.</summary>
      <returns>Es true si la entidad fue quitada correctamente; o bien false si no era parte del <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> .</returns>
      <param name="entity">Objeto que se quitará de la colección.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Obtiene el nombre de la función en el extremo de origen de la relación.</summary>
      <returns>El nombre del rol en el extremo de origen de la relación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Obtiene el nombre de la función en el extremo de destino de la relación.</summary>
      <returns>El nombre del rol en el extremo de destino de la relación.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>Clase base para EntityCollection y EntityReference</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Se produce cuando se realiza un cambio en un extremo relacionado.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Devuelve un <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración la colección de objetos relacionados.</summary>
      <returns>Un <see cref="T:System.Collections.IEnumerator" /> que recorre en iteración la colección de objetos relacionados.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Obtiene un valor que indica si se han cargado todos los objetos relacionados.</summary>
      <returns>true si el extremo relacionado contiene todos los objetos relacionados de la base de datos; en caso contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>Carga el o los objetos relacionados en el extremo relacionado con la opción de combinación predeterminada.</summary>
      <exception cref="T:System.InvalidOperationException">Si el objeto de origen fue recuperado utilizando una consulta <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> y <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> no es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, o bien los objetos relacionados ya están cargados, o bien cuando el objeto de origen no está asociado a <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien cuando el objeto de origen está siendo seguido pero se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Added" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> está siendo utilizado para <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Carga uno o más objetos desde el extremo relacionado con la opción de combinación especificada.</summary>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se usará para combinar objetos en una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existente.</param>
      <exception cref="T:System.InvalidOperationException">Si el objeto de origen fue recuperado utilizando una consulta <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> y <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> no es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, o bien los objetos relacionados ya están cargados, o bien cuando el objeto de origen no está asociado a <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien cuando el objeto de origen está siendo seguido pero se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Added" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> está siendo utilizado para <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Carga de manera asíncrona uno o más objetos desde el extremo relacionado con la opción de combinación especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="mergeOption">
        <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> que se usará para combinar objetos en una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> existente.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">Si el objeto de origen fue recuperado utilizando una consulta <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> y <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> no es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, o bien los objetos relacionados ya están cargados, o bien cuando el objeto de origen no está asociado a <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien cuando el objeto de origen está siendo seguido pero se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Added" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> está siendo utilizado para <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de manera asíncrona el o los objetos relacionados en el extremo relacionado con la opción de combinación predeterminada.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">Si el objeto de origen fue recuperado utilizando una consulta <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> y <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> no es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />, o bien los objetos relacionados ya están cargados, o bien cuando el objeto de origen no está asociado a <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien cuando el objeto de origen está siendo seguido pero se encuentra en estado <see cref="F:System.Data.Entity.EntityState.Added" /> o <see cref="F:System.Data.Entity.EntityState.Deleted" />, o bien <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> está siendo utilizado para <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> es <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Se usa internamente para deserializar los objetos de entidad junto con las instancias de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Secuencia serializada.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Obtiene el nombre de la relación en la que participa este extremo relacionado.</summary>
      <returns>Nombre de la relación en la que participa este <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" />.El nombre de la relación no está calificado por el espacio de nombres.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Obtiene una referencia a los metadatos para el extremo relacionado.</summary>
      <returns>Un objeto <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> que contiene los metadatos para el extremo de una relación.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Obtiene el nombre de la función en el extremo de origen de la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre de la función.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Agrega una entidad al extremo relacionado.Este método funciona exactamente de la misma forma que Add(objeto).Se mantiene por compatibilidad con versiones anteriores de IRelatedEnd.</summary>
      <param name="entity">Instancia de entidad que se va a agregar al extremo relacionado</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Agrega una entidad al extremo relacionado.Si el propietario se asocia a una memoria caché, todos los extremos conectados se agregan a la memoria caché de objetos y sus relaciones correspondientes también se agregan a ObjectStateManager.El RelatedEnd de la relación también es fijo.</summary>
      <param name="entity">Instancia de entidad que se va a agregar al extremo relacionado</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Asocia una entidad al extremo relacionado.Este método funciona exactamente de la misma forma que Attach(objeto).Se mantiene por compatibilidad con versiones anteriores de IRelatedEnd.</summary>
      <param name="entity">Entidad que se va a asociar al extremo relacionado</param>
      <exception cref="T:System.ArgumentNullException">Se produce cuando <paramref name="entity" /> es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce cuando la entidad no se puede relacionar mediante el extremo de relación actual.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Asocia una entidad al extremo relacionado.Si el extremo relacionado ya está relleno o relleno parcialmente, combina las entidades existentes con la entidad especificada.No se da por hecho que la entidad especificada sea el conjunto completo de entidades relacionadas.El propietario y todas las entidades pasadas deben estar en un estado Sin cambios o Modificado.Solo se permiten elementos eliminados cuando el administrador de estados ya está realizando un seguimiento de la instancia de la relación.</summary>
      <param name="entity">Entidad que se va a asociar al extremo relacionado</param>
      <exception cref="T:System.ArgumentNullException">Se produce cuando <paramref name="entity" /> es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Se produce cuando la entidad no se puede relacionar mediante el extremo de relación actual.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Devuelve una <see cref="T:System.Collections.IEnumerable" /> que representa los objetos que pertenecen al extremo relacionado.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerable" /> que representa los objetos que pertenecen al extremo relacionado.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Quita una entidad del extremo relacionado.Este método funciona exactamente de la misma forma que Remove(objeto).Se mantiene por compatibilidad con versiones anteriores de IRelatedEnd.</summary>
      <returns>Devuelve true si la entidad se quitó correctamente y devuelve false si la entidad no formaba parte del RelatedEnd.</returns>
      <param name="entity">Instancia de entidad que se va a quitar del extremo relacionado</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Quita una entidad del extremo relacionado.Si el propietario se asocia a una memoria caché, marca la relación para su eliminación y si la relación es de composición, también marca la entidad para su eliminación.</summary>
      <returns>Devuelve true si la entidad se quitó correctamente y devuelve false si la entidad no formaba parte del RelatedEnd.</returns>
      <param name="entity">Instancia de entidad que se va a quitar del extremo relacionado</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Obtiene el nombre de la función en el extremo de destino de la relación.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre de la función.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>Identifica la clase de una relación</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>La relación es una asociación</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>Contenedor para los objetos (colecciones y referencias) de propiedad de navegación de relación creados de forma diferida.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Crea un nuevo objeto <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <returns>Clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> solicitada.</returns>
      <param name="owner">Referencia a la entidad que llama a este método.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Devuelve una enumeración de todos los extremos relacionados administrados por el administrador de relaciones.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de objetos que implementan <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> .Si las relaciones todavía no están rellenas, se devuelve una enumeración vacía.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Obtiene una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> de objetos relacionados que tienen el nombre de la relación y el nombre de la función de destino especificados.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> de objetos relacionados.</returns>
      <param name="relationshipName">Nombre de la relación por la que se va navegar.El nombre de la relación no está calificado por el espacio de nombres.</param>
      <param name="targetRoleName">Nombre de la función de destino por la que se va navegar.Indica la dirección de navegación por la relación.</param>
      <typeparam name="TTargetEntity">Tipo del objeto <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> devuelto.</typeparam>
      <exception cref="T:System.InvalidOperationException">La función especificada ha devuelto una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> en lugar de una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> o una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> del tipo adecuado para la función de destino especificada en una relación.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> que representa la <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> o la <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> que se ha recuperado.</returns>
      <param name="relationshipName">Nombre de la relación en la que se define targetRoleName.El nombre de la relación no está calificado por el espacio de nombres.</param>
      <param name="targetRoleName">Rol de destino que se usará para recuperar el otro extremo de relationshipName.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName o targetRoleName es NULL.</exception>
      <exception cref="T:System.InvalidOperationException">El tipo de origen no coincide con el tipo del propietario.</exception>
      <exception cref="T:System.ArgumentException">targetRoleName no es válido, o bien no se puede localizar el tipo de relación en los metadatos.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Obtiene la <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> para un objeto relacionado mediante el uso de la combinación de nombre de relación y nombre de función de destino especificados.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> de un objeto relacionado.</returns>
      <param name="relationshipName">Nombre de la relación por la que se va navegar.El nombre de la relación no está calificado por el espacio de nombres.</param>
      <param name="targetRoleName">Nombre de la función de destino por la que se va navegar.Indica la dirección de navegación por la relación.</param>
      <typeparam name="TTargetEntity">Tipo del objeto <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> devuelto.</typeparam>
      <exception cref="T:System.InvalidOperationException">La función especificada ha devuelto una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> en lugar de una <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> .</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>Toma una EntityCollection existente que se creó con el constructor predeterminado y la inicializa con los nombres de relación y de rol de destino proporcionados.Este método se ha diseñado para su uso exclusivamente durante la deserialización y producirá una excepción si la EntityCollection proporcionada ya se ha inicializado o si el administrador de relaciones ya se ha asociado a un ObjectContext.</summary>
      <param name="relationshipName">Nombre de la relación.</param>
      <param name="targetRoleName">Nombre del rol de destino.</param>
      <param name="entityCollection">EntityCollection existente.</param>
      <typeparam name="TTargetEntity">Tipo de la entidad representada por targetRoleName</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>Toma una EntityReference existente que se creó con el constructor predeterminado y la inicializa con los nombres de relación y de rol de destino proporcionados.Este método se ha diseñado para su uso exclusivo durante la deserialización y producirá una excepción si la EntityReference proporcionada ya se ha inicializado, si el administrador de relaciones ya contiene una relación con este nombre y rol de destino, o si el administrador de relaciones ya se ha asociado a un ObjectContext.</summary>
      <param name="relationshipName">Nombre de la relación.</param>
      <param name="targetRoleName">Nombre de la función del extremo relacionado.</param>
      <param name="entityReference">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> que se va a inicializar.</param>
      <typeparam name="TTargetEntity">Tipo del objeto <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> que se va a inicializar.</typeparam>
      <exception cref="T:System.InvalidOperationException">Si el <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> ya está inicializado. —o bien— Si el administrador de relaciones ya está asociado a un <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, o bien si el administrador de relaciones ya contiene una relación con el mismo nombre y rol de destino.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Se usa internamente para deserializar los objetos de entidad junto con las instancias de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Secuencia serializada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Servicios de objeto lo llama para preparar una <see cref="T:System.Data.Entity.Core.EntityKey" /> para la serialización binaria con una relación serializada.</summary>
      <param name="context">Describe el origen y el destino de una secuencia serializada determinada y proporciona un contexto adicional definido por el llamador.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>Esta clase contiene los métodos habituales necesarios para un objeto de fecha.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Determina si las matrices de bytes especificadas contienen o no valores idénticos.</summary>
      <returns>Es true si ambas matrices son de igual longitud y contienen los mismos valores de byte o si ambas matrices son NULL; de lo contrario, es false.</returns>
      <param name="first">Valor de la primera matriz de bytes que se va a comparar.</param>
      <param name="second">Segunda matriz de bytes que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Devuelve el valor de fecha y hora mínimo admitido por el origen de datos.</summary>
      <returns>Un valor de <see cref="T:System.DateTime" /> que es el valor de fecha y hora mínimo admitido por el origen de datos.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Nombre de constante pública usado para el seguimiento de cambios Al proporcionar esta definición se permite a los usuarios usar esta constante en lugar de tener que incluir la cadena en el código.Este ayuda a asegurarse de que el nombre de propiedad es correcto y permite realizar comparaciones más rápidas en lugares donde se busca esta cadena específica.Los usuarios pueden seguir usando directamente la cadena con distinción entre mayúsculas y minúsculas en lugar del valor; en este caso la comparación será ligeramente más lenta.Incluir el carácter de guion (-) alrededor del nombre asegura que no entrará en conflicto con una propiedad de datos real, ya que -EntityKey- no es un nombre de identificador válido</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Devuelve una copia del valor de byte actual.</summary>
      <returns>Copia del valor de <see cref="T:System.Byte" /> actual.</returns>
      <param name="currentValue">Valor actual de la matriz de bytes.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Devuelve un tipo complejo para la propiedad especificada.</summary>
      <returns>Objeto de tipo complejo para la propiedad.</returns>
      <param name="currentValue">Un objeto complejo que hereda de un objeto complejo.</param>
      <param name="property">Nombre de la propiedad compleja que es el objeto complejo.</param>
      <param name="isNullable">Indica si el tipo admite valores NULL:</param>
      <param name="isInitialized">Indica si el tipo está o no inicializado.</param>
      <typeparam name="T">Tipo del objeto complejo que se va a solicitar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Genera el evento <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" />.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Genera el evento <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" />.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Notificación de que una propiedad ha cambiado.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Notificación de que una propiedad se va a cambiar.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>Genera un evento que se utiliza para notificar que se ha producido un cambio de propiedad.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>Genera un evento que se utiliza para notificar que hay un cambio de propiedad pendiente.</summary>
      <param name="property">Nombre de la propiedad modificada.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Se asegura de que el valor <see cref="T:System.Boolean" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Boolean" /> que se define.</returns>
      <param name="value">Valor booleano.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Boolean" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Boolean" /> que se define.</returns>
      <param name="value">Valor booleano.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Se asegura de que el valor <see cref="T:System.Byte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Byte" /> que se define.</returns>
      <param name="value">El valor que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Byte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Un <see cref="T:System.Byte" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Byte" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Se asegura de que el valor <see cref="T:System.Byte[]" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Un valor <see cref="T:System.Byte" /> que está siendo definido.</returns>
      <param name="value">Valor que se define.</param>
      <param name="isNullable">Indica si la propiedad admite o no valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Byte[]" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Byte" /> validado.</returns>
      <param name="value">Valor pasado en el establecedor de propiedad.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <exception cref="T:System.Data.ConstraintException">Si el valor es NULL para un valor que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>El valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que se define.</returns>
      <param name="value">Valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <exception cref="T:System.Data.ConstraintException">El valor es NULL para una propiedad que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que se define.</returns>
      <param name="value">Valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <exception cref="T:System.Data.ConstraintException">El valor es NULL para una propiedad que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>El valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que se define.</returns>
      <param name="value">Valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <exception cref="T:System.Data.ConstraintException">El valor es NULL para una propiedad que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>Valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que se define.</returns>
      <param name="value">Valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <exception cref="T:System.Data.ConstraintException">El valor es NULL para una propiedad que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTime" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.DateTime" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTime" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.DateTime" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.DateTime" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTimeOffset" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Un valor <see cref="T:System.DateTimeOffset" /> que está siendo definido.</returns>
      <param name="value">Valor de <see cref="T:System.DateTimeOffset" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTimeOffset" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.DateTimeOffset" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Se asegura de que el valor <see cref="T:System.Decimal" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Decimal" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Decimal" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Decimal" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Decimal" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Se asegura de que el valor <see cref="T:System.Double" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Double" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Double" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Double" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Double" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Se asegura de que el valor <see cref="T:System.Guid" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Guid" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Guid" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Guid" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Guid" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Guid" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Se asegura de que el valor <see cref="T:System.Int16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int16" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int16" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int16" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Se asegura de que el valor <see cref="T:System.Int32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int32" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int32" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int32" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Se asegura de que el valor <see cref="T:System.Int64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int64" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Int64" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Int64" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Se asegura de que el valor <see cref="T:System.Boolean" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Boolean" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Boolean" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Boolean" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Boolean" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Boolean" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Se asegura de que el valor <see cref="T:System.Byte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.Byte" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Byte" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Byte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Byte" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Byte" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Se asegura de que el valor <see cref="T:System.DateTime" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.DateTime" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.DateTime" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTime" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.DateTime" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.DateTime" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Se asegura de que el valor <see cref="T:System.DateTimeOffset" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.DateTimeOffset" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.DateTimeOffset" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.DateTimeOffset" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.DateTimeOffset" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Se asegura de que el valor <see cref="T:System.Decimal" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Decimal" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Decimal" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Decimal" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Decimal" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Decimal" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Se asegura de que el valor <see cref="T:System.Double" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Double" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Double" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Double" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Double" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Double" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Se asegura de que el valor <see cref="T:System.Guid" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Guid" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Guid" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Guid" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Guid" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Guid" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Se asegura de que el valor <see cref="T:System.Int16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int16" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int16" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int16" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int16" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Se asegura de que el valor <see cref="T:System.Int32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int32" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int32" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Se asegura de que el valor <see cref="T:System.Int64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int64" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int64" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Int64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Int64" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Int64" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Se asegura de que el valor <see cref="T:System.SByte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.SByte" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.SByte" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.SByte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.SByte" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.SByte" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Se asegura de que el valor <see cref="T:System.Single" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Single" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Single" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.Single" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.Single" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.Single" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Se asegura de que el valor <see cref="T:System.TimeSpan" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.TimeSpan" /> que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.TimeSpan" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que acepta valores NULL que se define.</returns>
      <param name="value">Valor <see cref="T:System.TimeSpan" /> que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Se asegura de que el valor UInt16 que se va a establecer para una propiedad es válido.</summary>
      <returns>Valor UInt16 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt16 que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>Se asegura de que el valor UInt16 que se va a establecer para una propiedad es válido.</summary>
      <returns>Valor UInt16 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt16 que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Se asegura de que el valor UInt32 que se va a establecer para una propiedad es válido.</summary>
      <returns>Valor UInt32 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt32 que acepta valores NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>Se asegura de que el valor UInt32 que se va a establecer para una propiedad es válido.</summary>
      <returns>Valor UInt32 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt32 que acepta valores NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Se asegura de que el valor <see cref="T:System.UInt64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor UInt64 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt64 que acepta valores NULL,</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor UInt64 que acepta valores NULL que se define.</returns>
      <param name="value">Valor UInt64 que acepta valores NULL,</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Se asegura de que el valor <see cref="T:System.SByte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.SByte" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.SByte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.SByte" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.SByte" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.SByte" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Se asegura de que el valor Single que se va a establecer para una propiedad es válido.</summary>
      <returns>El valor <see cref="T:System.Single" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Single" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>Se asegura de que el valor Single que se va a establecer para una propiedad es válido.</summary>
      <returns>El valor <see cref="T:System.Single" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.Single" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>Valor <see cref="T:System.String" /> validado.</returns>
      <param name="value">Valor de cadena que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>Valida que la propiedad no es NULL y se inicia si lo es.</summary>
      <returns>Propiedad validada.</returns>
      <param name="value">Valor de cadena que se va a comprobar.</param>
      <param name="isNullable">Marca que indica si esta propiedad puede ser NULL.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <exception cref="T:System.Data.ConstraintException">El valor de cadena es NULL para una cadena que no acepta valores NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Se asegura de que el valor <see cref="T:System.TimeSpan" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.TimeSpan" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.TimeSpan" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt16" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt16" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt16" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt16" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt32" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt32" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt32" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt32" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt64" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>Se asegura de que el valor <see cref="T:System.UInt64" /> que se va a definir para una propiedad sea válido.</summary>
      <returns>El valor <see cref="T:System.UInt64" /> que se define.</returns>
      <param name="value">Valor de <see cref="T:System.UInt64" />.</param>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Establece un objeto complejo para la propiedad especificada.</summary>
      <returns>Objeto de tipo complejo que se deriva de un objeto complejo.</returns>
      <param name="oldValue">Objeto complejo original para la propiedad, si existe.</param>
      <param name="newValue">Objeto complejo que se define.</param>
      <param name="property">Propiedad compleja que se va a establecer en el objeto complejo.</param>
      <typeparam name="T">Tipo del objeto que se va a reemplazar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Comprueba que un objeto complejo no es NULL.</summary>
      <returns>Objeto complejo que se va a validar.</returns>
      <param name="complexObject">Objeto complejo que se va a validar.</param>
      <param name="propertyName">Propiedad compleja del objeto primario que está asociado a complexObject.</param>
      <typeparam name="TComplex">Tipo del objeto complejo que se va a comprobar.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>Se produce cuando tiene lugar un error al confirmar una <see cref="T:System.Data.Common.DbTransaction" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /></summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" />.</summary>
      <param name="info">Datos necesarios para serializar o deserializar un objeto.</param>
      <param name="context">Descripción del origen y el destino del flujo serializado especificado.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /></summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /></summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>Controlador de transacciones que permite recuperarse correctamente de errores de conexión durante la confirmación de una transacción almacenando información de seguimiento de la transacción en la base de datos.Se debe registrar mediante <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> usando el <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" /> predeterminado.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</summary>
      <param name="transactionContextFactory">Generador de contexto de transacción.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Almacena la información de seguimiento para la nueva transacción en la base de datos en la misma transacción.</summary>
      <param name="connection">Conexión que inició la transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript"></member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>Quita todo el historial de transacciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>Quita de forma asincrónica todo el historial de transacciones.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Quita de forma asincrónica todo el historial de transacciones.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">Token de cancelación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Si se produjo una excepción, comprueba esta transacción en la base de datos y vuelve a producirse si no se encuentra.De lo contrario, marca la confirmación como correcta y pone en cola la información de transacción que se va a eliminar.</summary>
      <param name="transaction">Transacción que se confirmó.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)"></member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Deja de hacer seguimiento de la transacción que se desechó.</summary>
      <param name="transaction">Transacción que se desechó.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Obtiene el <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> asociado al <paramref name="context" /> si hay alguno; de lo contrario, devuelve null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> asociado.</returns>
      <param name="context">Contexto</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>Obtiene el <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> asociado al <paramref name="context" /> si hay alguno; de lo contrario, devuelve null.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> asociado.</returns>
      <param name="context">Contexto</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)"></member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)"></member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>Agrega la transacción especificada a la lista de transacciones que se pueden quitar de la base de datos</summary>
      <param name="transaction">Transacción que se va a quitar de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>Quita las transacciones marcadas para eliminación.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>Quita las transacciones marcadas para eliminación si su número supera <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <param name="force">si se establece en true, quitará todas las transacciones antiguas aunque su número no supere <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</param>
      <param name="useExecutionStrategy">si se establece en true, la operación se ejecutará con la estrategia de ejecución asociada</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>Quita de forma asincrónica las transacciones marcadas para eliminación.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>Quita las transacciones marcadas para eliminación si su número supera <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="force">si se establece en true, quitará todas las transacciones antiguas aunque su número no supere <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</param>
      <param name="useExecutionStrategy">si se establece en true, la operación se ejecutará con la estrategia de ejecución asociada</param>
      <param name="cancellationToken">Token de cancelación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Quita de forma asincrónica las transacciones marcadas para eliminación.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">Token de cancelación.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>Obtiene el número de transacciones que se van a ejecutar en el contexto antes de que se limpie el registro de transacciones.El valor predeterminado es 20.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Deja de hacer seguimiento de la transacción que se revirtió.</summary>
      <param name="transaction">Transacción que se revirtió.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>Obtiene el contexto de la transacción.</summary>
      <returns>Contexto de la transacción.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Lo devuelve el método ChangeTracker de <see cref="T:System.Data.Entity.DbContext" /> para proporcionar acceso a características del contexto relacionadas con el seguimiento de cambios de entidades.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Detecta los cambios realizados en las propiedades y relaciones de entidades POCO.Tenga en cuenta que algunos tipos de entidad (como los proxy y las entidades que realizan un seguimiento de cambios que derivan de <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />) notifican automáticamente los cambios y no suele ser necesario realizar una llamada a DetectChanges para estos tipos de entidades.Observe también que muchos de los métodos de <see cref="T:System.Data.Entity.DbContext" /> y sus clases relacionadas suelen llamar automáticamente a DetectChanges, por lo que no es habitual que sea necesario llamar a este método explícitamente.Sin embargo, puede ser conveniente, normalmente por cuestiones de rendimiento, desactivar esta llamada automática a DetectChanges mediante la marca AutoDetectChangesEnabled de <see cref="P:System.Data.Entity.DbContext.Configuration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para todas las entidades de las que este contexto realiza un seguimiento.</summary>
      <returns>Las entradas.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> para todas las entidades del tipo especificado de las que este contexto realiza un seguimiento.</summary>
      <returns>Las entradas.</returns>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Especifica si la <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> es o no la misma que el objeto especificado.</summary>
      <returns>Es true si la <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> es el mismo que el objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Obtiene el código hash asociado con <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>El código hash asociado con <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>Comprueba si <see cref="T:System.Data.Entity.DbContext" /> está realizando un seguimiento de entidades o relaciones nuevas, eliminadas o cambiadas que vayan a enviarse a la base de datos si se invoca a <see cref="M:System.Data.Entity.DbContext.SaveChanges" />.</summary>
      <returns>Es true si el <see cref="T:System.Data.Entity.DbContext" /> subyacente tiene cambios; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Devuelve una representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>Representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> genérico equivalente.</summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TElement">Tipo del elemento de colección.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.El valor actual es la entidad a que hace referencia la propiedad de navegación.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad de navegación.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Obtiene o establece un valor que indica si todas las entidades de esta colección se han cargado desde la base de datos.</summary>
      <returns>Es true si se cargan todas las entidades relacionadas o la marca IsLoaded se ha establecido explícitamente en true; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Carga la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>Carga de forma asincrónica la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta colección desde la base de datos.La consulta devuelta se puede modificar utilizando LINQ para realizar el filtrado u operaciones en la base de datos, como realizar el recuento del número de entidades de la colección en la base de datos sin cargarlas realmente.</summary>
      <returns>Una consulta para la colección.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método Collection de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten realizar operaciones como la carga en las propiedades de navegación de colección de una entidad.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TElement">Tipo del elemento de la colección de entidades.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.El valor actual es la entidad a que hace referencia la propiedad de navegación.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad de navegación.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Obtiene o establece un valor que indica si todas las entidades de esta colección se han cargado desde la base de datos.</summary>
      <returns>Es true si se cargan todas las entidades relacionadas o la marca IsLoaded se ha establecido explícitamente en true; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Carga la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>Carga de forma asincrónica la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la colección de entidades desde la base de datos.Observe que las entidades que ya existen en el contexto no se sobrescriben con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> no genérica para la propiedad de navegación representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta colección desde la base de datos.La consulta devuelta se puede modificar utilizando LINQ para realizar el filtrado u operaciones en la base de datos, como realizar el recuento del número de entidades de la colección en la base de datos sin cargarlas realmente.</summary>
      <returns>Una consulta para la colección.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Representación inmutable de un modelo de Entity Data Model (EDM) que se puede usar para crear un <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o que se puede pasar al constructor de un <see cref="T:System.Data.Entity.DbContext" />.Para aumentar el rendimiento, las instancias de este tipo deben almacenarse en memoria caché y volver a utilizarse para crear contextos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Crea una instancia de ObjectContext o una clase derivada de ObjectContext.Observe que se puede crear una instancia de DbContext en su lugar utilizando el constructor DbContext adecuado.Si se utiliza un objeto ObjectContext derivado, debe tener un constructor público con un solo parámetro EntityConnection.El objeto ObjectContext creado utiliza la conexión pasada, pero no es propiedad del contexto.El autor de la llamada debe eliminar la conexión una vez eliminado el contexto.</summary>
      <returns>Contexto.</returns>
      <param name="existingConnection">Conexión existente con una base de datos para ser utilizada por el contexto.</param>
      <typeparam name="TContext">El tipo de contexto que se va a crear.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> genérico equivalente.</summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad.Este método se puede utilizar para propiedades escalares o complejas.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método ComplexProperty de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten el acceso al estado de una propiedad compleja.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TComplexProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="property">Expresión que representa la propiedad anidada.</param>
      <typeparam name="TNestedComplexProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja anidada de esta propiedad.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
      <typeparam name="TNestedComplexProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> no genérica para la propiedad representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad.Este método se puede utilizar para propiedades escalares o complejas.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="property">Expresión que representa la propiedad anidada.</param>
      <typeparam name="TNestedProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad.Este método se puede utilizar para propiedades escalares o complejas.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
      <typeparam name="TNestedProperty">Tipo de la propiedad anidada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad anidada de esta propiedad.Este método se puede utilizar para propiedades escalares o complejas.</summary>
      <returns>Objeto que representa la propiedad anidada.</returns>
      <param name="propertyName">Nombre de la propiedad anidada.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Representa información sobre una conexión de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Crea una nueva instancia de DbConnectionInfo que representa una conexión que se especifica en el archivo de configuración de la aplicación.</summary>
      <param name="connectionName">Nombre de la cadena de conexión en la configuración de la aplicación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Crea una nueva instancia de DbConnectionInfo en función de una cadena de conexión.</summary>
      <param name="connectionString">Nombre de cadena de conexión que se va a usar para la conexión.</param>
      <param name="providerInvariantName">Nombre del proveedor que se va a usar para la conexión.Use 'System.Data.SqlClient' para SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Determina si el tipo <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actual es igual al tipo de objeto suministrado.</summary>
      <returns>Es true si el tipo <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actual es igual que el tipo objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Un objeto con el que va a compararse el objeto <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Genera un valor que representa la conexión actual.</summary>
      <returns>Un valor que representa la conexión actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Convierte el objeto <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> en una cadena.</summary>
      <returns>La unidad actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Describe el origen de la cadena de conexión de base de datos asociada a un <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>La cadena de conexión se leyó a partir de la configuración externa.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>La cadena de conexión se creó mediante convención.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>La cadena de conexión se reemplazó por la información sobre la conexión que se proporcionó a DbContextInfo.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>La cadena de conexión se específico explícitamente en tiempo de ejecución.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Lo devuelve el método Configuration de <see cref="T:System.Data.Entity.DbContext" /> para proporcionar acceso a las opciones de configuración para el contexto.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Obtiene o establece un valor que indica si los métodos de <see cref="T:System.Data.Entity.DbContext" /> y sus clases relacionadas llaman automáticamente al método <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" />.El valor predeterminado es true.</summary>
      <returns>Es true si se debe llamar automáticamente; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Especifica si la configuración es o no la misma que el objeto especificado.</summary>
      <returns>Es true si la configuración es la misma que el objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Obtiene el código hash asociado a la configuración.</summary>
      <returns>El código hash asociado a la configuración.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Obtiene o establece un valor que indica si está habilitada la carga diferida de relaciones expuestas como propiedades de navegación.La carga diferida está habilitada de forma predeterminada.</summary>
      <returns>Es true si la carga diferida está habilitada; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Obtiene o establece un valor que indica si el marco creará o no instancias de clases de proxy generadas dinámicamente cada vez que se cree una instancia de un tipo de entidad.Observe que aunque la creación de proxy esté habilitada con esta marca, las instancias de proxy solo se crearán para los tipos de entidad que cumplan los requisitos para utilizarse como proxy.La creación de proxy está habilitada de forma predeterminada.</summary>
      <returns>Es true si la creación de proxy está habilitada; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Devuelve una representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</summary>
      <returns>Representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>Obtiene o define un valor que indica su se exhibirá o no la semántica NULL de la base de datos al comparar dos operandos que potencialmente admitan valores NULL.El valor predeterminado es false.Por ejemplo, (operand1 == operand2) será convertido a: (operand1 = operand2) si UseDatabaseNullSemantics es true, respectivamente (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL))) si UseDatabaseNullSemantics es false.</summary>
      <returns>Es true si se activa el comportamiento de comparación de valores NULL de la base de datos; de lo contrario, es false .</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Obtiene o define un valor que indica si las entidades objeto de seguimiento deben o no validarse automáticamente al invocar el método <see cref="M:System.Data.Entity.DbContext.SaveChanges" />.El valor predeterminado es true.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Proporciona información de tiempo de ejecución sobre un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.Puede proporcionarse un objeto externo de configuración externo (por ejemplo,app.config o web.config), que se utilizará durante la resolución de la cadena de conexión.Esto incluye buscar cadenas de conexión y entradas de DefaultConnectionFactory.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objeto que representa el archivo de configuración.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Crea una nueva instancia que representa un <see cref="T:System.Data.Entity.DbContext" /> determinado compatible con una base de datos específica.Puede proporcionarse un objeto externo de configuración externo (por ejemplo,app.config o web.config), que se utilizará durante la resolución de la cadena de conexión.Esto incluye buscar cadenas de conexión y entradas de DefaultConnectionFactory.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objeto que representa el archivo de configuración.</param>
      <param name="connectionInfo">Información de conexión que se va a usar para la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.Puede proporcionarse un objeto externo de configuración externo (por ejemplo,app.config o web.config), que se utilizará durante la resolución de la cadena de conexión.Esto incluye buscar cadenas de conexión y entradas de DefaultConnectionFactory.Se puede proporcionar un <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> para reemplazar al proveedor predeterminado concreto que se usó en la construcción del modelo EDM subyacente.Esto puede ser útil para impedir que EF se conecte para detectar un token de manifiesto.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objeto que representa el archivo de configuración.</param>
      <param name="modelProviderInfo">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> que especifica el proveedor de ADO.NET subyacente de destino.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.Se pueden proporcionar listas externas de cadenas de conexión y se usarán durante una resolución de cadenas de conexión en lugar de cualquier cadena de conexión que se hubiera especificado en archivos de configuración externos.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Colección de cadenas de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Crea una nueva instancia que representa un <see cref="T:System.Data.Entity.DbContext" /> determinado compatible con una base de datos específica.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Información de conexión que se va a usar para la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crea una nueva instancia que representa un tipo de <see cref="T:System.Data.Entity.DbContext" /> determinado.Se puede proporcionar un <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> para reemplazar al proveedor predeterminado concreto que se usó en la construcción del modelo EDM subyacente.</summary>
      <param name="contextType">Tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">
        <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> que especifica el proveedor de ADO.NET subyacente de destino.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Nombre del proveedor de ADO.NET de la conexión que usa el tipo <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Nombre de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Origen de la cadena de conexión que usa el tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Tipo de <see cref="T:System.Data.Entity.DbContext" /> concreto.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Si se pueden crear instancias del tipo de <see cref="T:System.Data.Entity.DbContext" /> subyacente, se devuelve una nueva instancia; de lo contrario, se devuelve NULL.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Si se pueden crear o no instancias del tipo <see cref="T:System.Data.Entity.DbContext" /> subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Acción que se ejecutará en el DbModelBuilder después de que se haya ejecutado OnModelCreating en el contexto.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> genérica del tipo genérico especificado para la entidad de la que se realiza un seguimiento representada por este objeto.Tenga en cuenta que el tipo de la entidad de la que se realiza un seguimiento debe ser compatible con el tipo genérico; de lo contrario, se producirá una excepción.</summary>
      <returns>Una versión genérica.</returns>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Obtiene los valores de propiedad actuales para la entidad a la que se realiza un seguimiento representada por este objeto.</summary>
      <returns>Los valores actuales.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Obtiene la entidad.</summary>
      <returns>Entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> especificado es igual a esta instancia.Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Es true si el <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> especificado es igual que esta instancia; de lo contrario, es false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a esta instancia.Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Es true si el <see cref="T:System.Object" /> especificado es igual que esta instancia; de lo contrario, es false.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Consulta la base de datos en busca de copias de los valores de la entidad a la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Los valores de almacén.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>Consulta de forma asincrónica la base de datos en busca de copias de los valores de la entidad de la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene los valores de almacenamiento.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Consulta de forma asincrónica la base de datos en busca de copias de los valores de la entidad de la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene los valores de almacenamiento.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Devuelve un código hash para esta instancia.</summary>
      <returns>Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Valida esta instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> y devuelve el resultado de la validación.</summary>
      <returns>El resultado de la validación de la entidad.Posiblemente es NULL si se reemplaza el método <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.Los tipos de miembro admitidos actualmente y sus tipos de valor devuelto son Propiedad de navegación de referencia: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Propiedad de navegación de colección: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Propiedad primitiva/escalar: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Propiedad compleja: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Un objeto que representa el miembro.</returns>
      <param name="propertyName">Nombre del miembro.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Obtiene los valores de propiedad originales para la entidad a la que se realiza un seguimiento representada por este objeto.Los valores originales son normalmente los valores de propiedad de la entidad que existían cuando se realizó la última consulta de la base de datos.</summary>
      <returns>Los valores originales.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>un objeto que representa la propiedad de navegación (es decir,no de colección) de referencia de esta entidad en otra entidad.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Recarga la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>Recarga de forma asincrónica la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Recarga de forma asincrónica la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Obtiene o establece el estado de la entidad.</summary>
      <returns>El estado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Devuelve una representación en forma de cadena del <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</summary>
      <returns>Una representación en forma de cadena del <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Las instancias de esta clase proporcionan acceso a información sobre, y el control de, entidades de las que el objeto <see cref="T:System.Data.Entity.DbContext" /> realiza un seguimiento.Utilice los métodos Entity o Entities del contexto para obtener objetos de este tipo.</summary>
      <typeparam name="TEntity">Tipo de la entidad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Expresión que representa la propiedad de navegación.</param>
      <typeparam name="TElement">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
      <typeparam name="TElement">Tipo de los elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Obtiene un objeto que representa la propiedad de navegación de colección de esta entidad en una colección de entidades relacionadas.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="property">Expresión que representa la propiedad compleja.</param>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
      <typeparam name="TComplexProperty">Tipo de la propiedad compleja.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Obtiene un objeto que representa una propiedad compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad compleja.</returns>
      <param name="propertyName">Nombre de la propiedad compleja.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Obtiene los valores de propiedad actuales para la entidad a la que se realiza un seguimiento representada por este objeto.</summary>
      <returns>Los valores actuales.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Obtiene la entidad.</summary>
      <returns>Entidad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Determina si el objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> especificado es igual a esta instancia.Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Es true si el <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> especificado es igual que esta instancia; de lo contrario, es false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es igual a esta instancia.Dos instancias de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> se consideran iguales si ambas son entradas para la misma entidad en el mismo objeto <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Es true si el <see cref="T:System.Object" /> especificado es igual que esta instancia; de lo contrario, es false.</returns>
      <param name="obj">
        <see cref="T:System.Object" /> que se va a comparar con esta instancia.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Consulta la base de datos en busca de copias de los valores de la entidad a la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Los valores de almacén.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>Consulta de forma asincrónica la base de datos en busca de copias de los valores de la entidad de la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene los valores de almacenamiento.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Consulta de forma asincrónica la base de datos en busca de copias de los valores de la entidad de la que se realiza un seguimiento que existen actualmente en la base de datos.Tenga en cuenta que el cambio de los valores del diccionario devuelto no actualizará los valores de la base de datos.Si no se encuentra la entidad en la base de datos, se devuelve null.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene los valores de almacenamiento.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Devuelve un código hash para esta instancia.</summary>
      <returns>Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Valida esta instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y devuelve el resultado de la validación.</summary>
      <returns>El resultado de la validación de la entidad.Posiblemente es NULL si se reemplaza el método <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.Los tipos de miembro admitidos actualmente y sus tipos de valor devuelto son: Propiedad de navegación de referencia: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.Propiedad de navegación de colección: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.Propiedad primitiva/escalar: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.Propiedad compleja: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
      <returns>Un objeto que representa el miembro.</returns>
      <param name="propertyName">Nombre del miembro.</param>
      <typeparam name="TMember">Tipo del miembro.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Obtiene un objeto que representa un miembro de la entidad.El tipo en tiempo de ejecución del objeto devuelto variará dependiendo de qué tipo de miembro se solicita.Los tipos de miembro admitidos actualmente y sus tipos de valor devuelto son: Propiedad de navegación de referencia: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Propiedad de navegación de colección: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Propiedad primitiva/escalar: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Propiedad compleja: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Un objeto que representa el miembro.</returns>
      <param name="propertyName">Nombre del miembro.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> no genérica correspondiente a la entidad de la que se realiza un seguimiento representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la entidad objeto de seguimiento.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Obtiene los valores de propiedad originales para la entidad a la que se realiza un seguimiento representada por este objeto.Los valores originales son normalmente los valores de propiedad de la entidad que existían cuando se realizó la última consulta de la base de datos.</summary>
      <returns>Los valores originales.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="property">Expresión que representa la propiedad.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Obtiene un objeto que representa una propiedad escalar o compleja de esta entidad.</summary>
      <returns>Un objeto que representa la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>un objeto que representa la propiedad de navegación (es decir,no de colección) de referencia de esta entidad en otra entidad.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Expresión que representa la propiedad de navegación.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>un objeto que representa la propiedad de navegación (es decir,no de colección) de referencia de esta entidad en otra entidad.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>un objeto que representa la propiedad de navegación (es decir,no de colección) de referencia de esta entidad en otra entidad.</summary>
      <returns>Un objeto que representa la propiedad de navegación.</returns>
      <param name="navigationProperty">Nombre de la propiedad de navegación.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Recarga la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>Recarga de forma asincrónica la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Recarga de forma asincrónica la entidad de la base de datos sobrescribiendo los valores de propiedad con valores de la base de datos.La entidad estará en estado Unchanged después de llamar a este método.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Obtiene o establece el estado de la entidad.</summary>
      <returns>El estado.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Devuelve una representación de cadena de los valores de la entidad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de la entidad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>Proporciona la implementación base del mecanismo de reintentos para las operaciones y las condiciones transitorias no confiables que usan retrasos que aumentan exponencialmente entre los reintentos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> con los límites especificados para el número de reintentos y el retraso entre reintentos.</summary>
      <param name="maxRetryCount">Número máximo de reintentos.</param>
      <param name="maxDelay">Retraso máximo en milisegundos entre los reintentos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>Ejecuta de forma repetitiva la operación especificada mientras que cumple la directiva de reintentos actual.</summary>
      <param name="operation">Delegado que representa una operación ejecutable que no devuelve ningún resultado.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">si la estrategia de retraso de reintentos determina la operación, no se debe volver a intentarlo más</exception>
      <exception cref="T:System.InvalidOperationException">si se detecta una transacción existente y la estrategia de ejecución no la admite</exception>
      <exception cref="T:System.InvalidOperationException">si esta instancia se usó previamente para ejecutar una operación</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Ejecuta de forma repetitiva la operación especificada mientras que cumple la directiva de reintentos actual.</summary>
      <returns>Resultado de la operación.</returns>
      <param name="operation">Delegado que representa una operación ejecutable que devuelve el resultado de tipo <paramref name="TResult" />.</param>
      <typeparam name="TResult">Tipo de resultado esperado de la operación ejecutable.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">si la estrategia de retraso de reintentos determina la operación, no se debe volver a intentarlo más</exception>
      <exception cref="T:System.InvalidOperationException">si se detecta una transacción existente y la estrategia de ejecución no la admite</exception>
      <exception cref="T:System.InvalidOperationException">si esta instancia se usó previamente para ejecutar una operación</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Ejecuta repetidamente la operación asincrónica especificada mientras que cumple la directiva de reintentos actual.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente (ya sea la primera vez o después de reintentar errores transitorios).Si la tarea produce un error no transitorio o se alcanza el límite de reintentos, la tarea devuelta se considerará con errores y se deberá observar la excepción.</returns>
      <param name="operation">Función que devuelve una tarea iniciada de tipo <paramref name="TResult" />.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
      <typeparam name="TResult">Tipo de resultado de la <see cref="T:System.Threading.Tasks.Task`1" /> devuelto por <paramref name="operation" />.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">si la estrategia de retraso de reintentos determina la operación, no se debe volver a intentarlo más</exception>
      <exception cref="T:System.InvalidOperationException">si se detecta una transacción existente y la estrategia de ejecución no la admite</exception>
      <exception cref="T:System.InvalidOperationException">si esta instancia se usó previamente para ejecutar una operación</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Ejecuta de forma repetitiva la operación asincrónica especificada mientras cumple la directiva de reintentos actual.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente (ya sea la primera vez o después de reintentar errores transitorios).Si la tarea produce un error no transitorio o se alcanza el límite de reintentos, la tarea devuelta se considerará con errores y se deberá observar la excepción.</returns>
      <param name="operation">Función que devuelve una tarea iniciada.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">si la estrategia de retraso de reintentos determina la operación, no se debe volver a intentarlo más</exception>
      <exception cref="T:System.InvalidOperationException">si se detecta una transacción existente y la estrategia de ejecución no la admite</exception>
      <exception cref="T:System.InvalidOperationException">si esta instancia se usó previamente para ejecutar una operación</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>Determina si la operación se debe reintentar y el retraso antes del siguiente intento.</summary>
      <returns>Devuelve el retraso que indica el tiempo que hay que esperar antes del siguiente intento de ejecución si se debe reintentar la operación; de lo contrario, null</returns>
      <param name="lastException">Excepción que se produjo durante el último intento de ejecución.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>Devuelve true para indicar que <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> puede reintentar la ejecución tras un error.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>Determina si la excepción especificada representa un error transitorio que puede compensar con un reintento.</summary>
      <returns>Es true si la excepción especificada se considera transitoria; de lo contrario, es false.</returns>
      <param name="exception">Objeto de excepción que se va a comprobar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>Obtiene de forma recursiva InnerException de <paramref name="exception" /> siempre y cuando sea una <see cref="T:System.Data.Entity.Core.EntityException" />, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> o <see cref="T:System.Data.Entity.Core.UpdateException" /> y la pase a <paramref name="exceptionHandler" /></summary>
      <returns>Resultado de <paramref name="exceptionHandler" />.</returns>
      <param name="exception">Excepción que se va a desajustar.</param>
      <param name="exceptionHandler">Delegado al que se llamará con la excepción sin ajustar.</param>
      <typeparam name="T">Tipo de la excepción sin ajustar.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Esta es una clase base abstracta que se utiliza para representar una propiedad escalar o compleja o una propiedad de navegación de una entidad.Las propiedades escalares y complejas utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, las propiedades de navegación de referencia utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> y las propiedades de navegación de colección utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> genérico equivalente.</summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece este miembro.</summary>
      <returns>Una entrada para la entidad a la que pertenece este miembro.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Determina si la entrada especificada es o no igual a la entrada actual.</summary>
      <returns>Es true si la entrada especificada es igual a la entrada actual; de lo contrario, es false.</returns>
      <param name="obj">El objeto que se va a comparar con la entrada actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Devuelve la función hash de esta entrada.</summary>
      <returns>La función hash de esta entrada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Valida esta propiedad.</summary>
      <returns>Colección de objetos <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Nunca es NULL.Si la entidad es válida, la colección estará vacía.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Devuelve una representación de cadena de los valores de propiedad de base de datos.</summary>
      <returns>Una representación de cadena de los valores de propiedad de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Esta es una clase base abstracta que se utiliza para representar una propiedad escalar o compleja o una propiedad de navegación de una entidad.Las propiedades escalares y complejas utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, las propiedades de navegación de referencia utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> y las propiedades de navegación de colección utilizan la clase derivada <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece este miembro.</summary>
      <returns>Una entrada para la entidad a la que pertenece este miembro.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Especifica si este objeto es o no igual al objeto especificado.</summary>
      <returns>Es true si el objeto es igual al objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Obtiene el código hash asociado al objeto.</summary>
      <returns>El código hash asociado al objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Valida esta propiedad.</summary>
      <returns>Colección de objetos <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Nunca es NULL.Si la entidad es válida, la colección estará vacía.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> no genérica para la propiedad representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Devuelve una representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
      <returns>Representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Representa un Entity Data Model (EDM) creado por <see cref="T:System.Data.Entity.DbModelBuilder" />.Método Compile que se puede usar para convertir esta representación de EDM en un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> que es una instantánea compilada del modelo adecuado para el almacenamiento en memoria caché y la creación de instancias de <see cref="T:System.Data.Entity.DbContext" /> u <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Crea un objeto <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> para este modo que es una instantánea compilada apropiada para el almacenamiento en memoria caché y la creación de instancias de <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>El modelo compilado.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>Obtiene el modelo conceptual.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>Obtiene el modelo de asignación.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>Obtiene información del proveedor.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>Obtiene el manifiesto del proveedor.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>Obtiene el modelo de almacenamiento.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> genérico equivalente.</summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Obtiene o establece un valor que indica si se ha modificado el valor de esta propiedad desde que se cargó de la base de datos.</summary>
      <returns>Es true si se modifica esta instancia; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Obtiene o establece el valor original de esta propiedad.</summary>
      <returns>El valor original.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propiedad para la que esta es una propiedad anidada.Este método devolverá solo una entrada que no sea null para las propiedades de objetos complejos; devolverá null para las propiedades de la propia entidad.</summary>
      <returns>Una entrada para la propiedad compleja primaria o null si se trata de una propiedad de entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método Property de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten el acceso al estado de la propiedad compleja o escalar.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de esta propiedad.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Obtiene o establece un valor que indica si se ha modificado el valor de esta propiedad desde que se cargó de la base de datos.</summary>
      <returns>Es true si se modifica esta instancia; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> no genérica para la propiedad representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la propiedad.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Obtiene o establece el valor original de esta propiedad.</summary>
      <returns>El valor original.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propiedad para la que esta es una propiedad anidada.Este método devolverá solo una entrada que no sea null para las propiedades de objetos complejos; devolverá null para las propiedades de la propia entidad.</summary>
      <returns>Una entrada para la propiedad compleja primaria o null si se trata de una propiedad de entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Una colección de todas las propiedades para una entidad u objeto complejo subyacentes.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Crea un nuevo diccionario que contiene copias de todas las propiedades de este diccionario.Los cambios realizados en el nuevo diccionario no se reflejarán en este diccionario y viceversa.</summary>
      <returns>Un clon de este diccionario.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Especifica si <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> es o no igual al objeto específico.</summary>
      <returns>Es true si <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> es igual al objeto específico; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Obtiene el código hash asociado al valor de la propiedad.</summary>
      <returns>Código hash asociado al valor de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Obtiene el valor de la propiedad como cuando se utiliza el captador de propiedades indizadas pero escrito con el tipo del parámetro genérico.Esto es especialmente útil con diccionarios anidados para evitar la escritura de expresiones con numerosas conversiones.</summary>
      <returns>El valor de la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad.</param>
      <typeparam name="TValue">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Obtiene o establece el valor de la propiedad con el nombre de propiedad especificado.El valor puede ser una instancia anidada de esta clase.</summary>
      <returns>El valor de la propiedad.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Obtiene el conjunto de nombres de todas las propiedades en este diccionario como un conjunto de solo lectura.</summary>
      <returns>Los nombres de propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Establece los valores de este diccionario mediante la lectura de los valores de otro diccionario.El otro diccionario debe estar basado en el mismo tipo que este diccionario o en un tipo derivado del tipo de este diccionario.</summary>
      <param name="propertyValues">Diccionario cuyos valores se van a leer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Establece los valores de este diccionario mediante la lectura de los valores del objeto determinado.El objeto determinado puede ser de cualquier tipo.Se leerán las propiedades del objeto cuyo nombre coincida con un nombre de propiedad del diccionario y se pueda leer.Se omitirán las demás propiedades.Esto permite, por ejemplo, copiar propiedades de objetos de transferencia de datos (DTO) simples.</summary>
      <param name="obj">Objeto cuyos valores se van a leer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Crea un objeto del tipo subyacente para este diccionario y lo hidrata con valores de propiedad de este diccionario.</summary>
      <returns>Las propiedades de este diccionario copiadas en un nuevo objeto.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Devuelve una representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</summary>
      <returns>Representación en forma de cadena de <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Agrupa un par de cadenas que identifican conjuntamente a un proveedor y a una versión de servidor en un único objeto.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Crea un nuevo objeto para un proveedor que tiene el nombre invariable y el token del manifiesto especificados.</summary>
      <param name="providerInvariantName">Cadena que identifica a dicho proveedor.Por ejemplo, el proveedor de SQL Server utiliza la cadena "System.Data.SqlCient".</param>
      <param name="providerManifestToken">Una cadena que identifica aquella versión del servidor de base de datos que está siendo utilizado.Por ejemplo, el proveedor de SQL Server utiliza la cadena "2008" para SQL Server 2008.No puede ser NULL, pero puede estar vacío.En ocasiones, al token de manifiesto se lo denomina sugerencia de versión.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>Determina si el objeto especificado es o no igual a este objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>Obtiene la función hash de este objeto actual.</summary>
      <returns>La función hash de este objeto actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Cadena que identifica a dicho proveedor.Por ejemplo, el proveedor de SQL Server utiliza la cadena "System.Data.SqlCient".</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Una cadena que identifica aquella versión del servidor de base de datos que está siendo utilizado.Por ejemplo, el proveedor de SQL Server utiliza la cadena "2008" para SQL Server 2008.No puede ser NULL, pero puede estar vacío.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Representa una consulta LINQ to Entities no genérico en un DbContext.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en el <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nueva consulta a la que se ha aplicado NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> genérico equivalente.</summary>
      <returns>El objeto de conjunto genérico.</returns>
      <typeparam name="TElement">Tipo de elemento para el que se creó la consulta.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Tipo de elemento IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Especifica si la consulta es o no igual al objeto especificado.</summary>
      <returns>Es true si la consulta es igual al objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Obtiene el código hash asociado a la consulta.</summary>
      <returns>El código hash asociado a la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Obtiene el tipo asociado a la consulta.</summary>
      <returns>Tipo asociado a la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nueva DbQuery&amp;lt;T&amp;gt; con la ruta de consulta definida.</returns>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.IEnumerator" /> que, cuando se enumera, ejecutará la consulta en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.En su lugar, rellene un DbSet con datos, por ejemplo usando el método de extensión Load y, a continuación, realice el enlace con datos locales.Para WPF, el enlace se realiza a DbSet.Local.Para Windows Forms, el enlace se realiza a DbSet.Local.ToBindingList().</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> que, cuando se enumera, ejecutará la consulta en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Expresión LINQ de IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Proveedor de IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Devuelve una representación de tipo <see cref="T:System.String" /> de la consulta subyacente.</summary>
      <returns>La cadena de consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Representa una consulta LINQ to Entities en un DbContext.</summary>
      <typeparam name="TResult">Tipo de entidad en que se realiza la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en el <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nueva consulta a la que se ha aplicado NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Determina si la consulta actual es o no igual a la consulta especificada.</summary>
      <returns>Es true si la consulta actual es igual a la consulta especificada; de lo contrario, es false.</returns>
      <param name="obj">El objeto que se va a comparar con la consulta actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Devuelve la función hash de esta consulta.</summary>
      <returns>La función hash de esta consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>El tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Especifica los objetos relacionados que se van a incluir en los resultados de la consulta.</summary>
      <returns>Nueva <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> con la ruta de la consulta definida.</returns>
      <param name="path">Lista separada por puntos de los objetos relacionados que se deben devolver en los resultados de la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> no genérica para esta consulta.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">La consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Obtiene la enumeración de esta consulta que hace que se ejecute en el almacén.</summary>
      <returns>Un objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> para la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.Generic.IEnumerator`1" /> que, cuando se enumera, ejecutará la consulta en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.En su lugar, rellene un DbSet con datos, por ejemplo usando el método de extensión Load y, a continuación, realice el enlace con datos locales.Para WPF, el enlace se realiza a DbSet.Local.Para Windows Forms, el enlace se realiza a DbSet.Local.ToBindingList().</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> que, cuando se enumera, ejecutará la consulta en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> que, cuando se enumera, ejecutará la consulta en la base de datos.</summary>
      <returns>Resultados de la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Tipo de elemento IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Expresión LINQ de IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Proveedor de IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Devuelve una representación de tipo <see cref="T:System.String" /> de la consulta subyacente.</summary>
      <returns>La cadena de consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>Representa una consulta SQL para elementos que no son entidades que se crean a partir de un <see cref="T:System.Data.Entity.DbContext" /> y se ejecutan usando la conexión de ese contexto.Las instancias de esta clase se obtienen a partir de la instancia de <see cref="P:System.Data.Entity.DbContext.Database" />.La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, utilizando foreach.Las consultas SQL para entidades se crean mediante <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.Vea <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> en el caso de una versión genérica de esta clase.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>Especifica si la consulta es o no igual al objeto especificado.</summary>
      <returns>Es true si la consulta es igual al objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="action">Acción que se va a realizar en cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.IEnumerator" /> que, cuando se enumera, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>Obtiene el código hash asociado a la consulta.</summary>
      <returns>El código hash asociado a la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>Obtiene el tipo asociado a la consulta.</summary>
      <returns>Tipo asociado a la consulta.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> que, cuando se enumera, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que contiene la cadena SQL que se estableció cuando se creó la consulta.No se incluyen los parámetros.</summary>
      <returns>
        <see cref="T:System.String" /> que representa esta instancia.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>Representa una consulta SQL para elementos que no son entidades que se crean a partir de un <see cref="T:System.Data.Entity.DbContext" /> y se ejecutan usando la conexión de ese contexto.Las instancias de esta clase se obtienen a partir de la instancia de <see cref="P:System.Data.Entity.DbContext.Database" />.La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, mediante foreach.Las consultas SQL para entidades se crean mediante <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.Vea <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> en el caso de una versión no genérica de esta clase.</summary>
      <typeparam name="TElement">Tipo de elementos devueltos por la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>Determina de forma asincrónica si todos los elementos de la consulta cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si todos los elementos del resultado de la consulta superan la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si todos los elementos de la consulta cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si todos los elementos del resultado de la consulta superan la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>Determina de forma asincrónica si la consulta contiene algún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si el resultado de la consulta contiene algún elemento; de lo contrario, contiene false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>Determina de forma asincrónica si algún elemento de la consulta cumple una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si algún elemento del resultado de la consulta supera la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si algún elemento de la consulta cumple una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si algún elemento del resultado de la consulta supera la prueba del predicado especificado; de lo contrario, contiene false.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si la consulta contiene algún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si el resultado de la consulta contiene algún elemento; de lo contrario, contiene false.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>Determina de forma asincrónica si la consulta contiene un elemento especificado mediante el comparador de igualdad predeterminado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si el resultado de la consulta contiene el valor especificado; de lo contrario, contiene false.</returns>
      <param name="value">Objeto que se va a buscar en el resultado de la consulta.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>Determina de forma asincrónica si la consulta contiene un elemento especificado mediante el comparador de igualdad predeterminado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si el resultado de la consulta contiene el valor especificado; de lo contrario, contiene false.</returns>
      <param name="value">Objeto que se va a buscar en el resultado de la consulta.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>Devuelve de forma asincrónica el número de elementos de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta.</returns>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica el número de elementos de la consulta que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta que cumplen la condición de la función del predicado.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el número de elementos de la consulta que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta que cumplen la condición de la función del predicado.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el número de elementos de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>Determina si la consulta actual es o no igual a la consulta especificada.</summary>
      <returns>Es true si la consulta actual es igual a la consulta especificada; de lo contrario, es false.</returns>
      <param name="obj">Consulta que se va a comparar con la consulta actual.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento del resultado de la consulta.</returns>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta que cumple una condición especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento del resultado de la consulta que cumple una condición especificada.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta que cumple una condición especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento del resultado de la consulta que cumple una condición especificada.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el primer elemento del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta, o un valor predeterminado si el resultado de la consulta no contiene ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TElement" />) si el resultado de la consulta está vacío; de lo contrario, contiene el primer elemento del resultado de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta que cumple una condición especificada o un valor predeterminado si no se encuentra ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TElement" />) si el resultado de la consulta está vacío o si ningún elemento supera la prueba especificada por <paramref name="predicate" />; de lo contrario, contiene el primer elemento del resultado de la consulta que supera la prueba especificada por <paramref name="predicate" />.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta que cumple una condición especificada o un valor predeterminado si no se encuentra ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TElement" />) si el resultado de la consulta está vacío o si ningún elemento supera la prueba especificada por <paramref name="predicate" />; de lo contrario, contiene el primer elemento del resultado de la consulta que supera la prueba especificada por <paramref name="predicate" />.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el primer elemento de la consulta, o un valor predeterminado si el resultado de la consulta no contiene ningún elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene default (<paramref name="TElement" />) si el resultado de la consulta está vacío; de lo contrario, contiene el primer elemento del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="action">Acción que se va a ejecutar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>Enumera de forma asincrónica los resultados de la consulta y realiza la acción especificada en cada elemento.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="action">Acción que se va a ejecutar.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.Generic.IEnumerator`1" /> que, cuando se enumera, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>Devuelve la función hash de esta consulta.</summary>
      <returns>La función hash de esta consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>Obtiene el tipo de la consulta actual.</summary>
      <returns>El tipo de la consulta actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número total de elementos de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta.</returns>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número de elementos de la consulta que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta que cumplen la condición de la función del predicado.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número de elementos de la consulta que cumplen una condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta que cumplen la condición de la función del predicado.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta que cumplen la condición de la función del predicado es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica un valor <see cref="T:System.Int64" /> que representa el número total de elementos de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el número de elementos del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.OverflowException">El número de elementos del resultado de la consulta es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>Devuelve de forma asincrónica el valor máximo de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo del resultado de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el valor máximo de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor máximo del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>Devuelve de forma asincrónica el valor mínimo de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo del resultado de la consulta.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el valor mínimo de la consulta.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor mínimo del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta y, si no hay exactamente un elemento en la secuencia, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta.</returns>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta tiene más de un elemento.</exception>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta que cumple una condición especificada y, si existe más de un elemento semejante, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta que cumple la condición especificada en <paramref name="predicate" />.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta que cumple una condición especificada y, si existe más de un elemento semejante, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta que cumple la condición especificada en <paramref name="predicate" />.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">Ningún elemento cumple la condición de <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta y, si no hay exactamente un elemento en la secuencia, produce una excepción.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta tiene más de un elemento.</exception>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta está vacío.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta, o default (<paramref name="TElement" />) si la secuencia no contiene ningún elemento.</returns>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta tiene más de un elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta que cumple una condición especificada o un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta que cumple la condición especificada en <paramref name="predicate" /> o default (<paramref name="TElement" />) si no se encuentra ese elemento.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de la consulta que cumple una condición especificada o un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta que cumple la condición especificada en <paramref name="predicate" /> o default (<paramref name="TElement" />) si no se encuentra ese elemento.</returns>
      <param name="predicate">Función para probar una condición en todos los elementos.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">Varios elementos cumplen la condición de <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Devuelve de forma asincrónica el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el único elemento del resultado de la consulta, o default (<paramref name="TElement" />) si la secuencia no contiene ningún elemento.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <exception cref="T:System.InvalidOperationException">El resultado de la consulta tiene más de un elemento.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve una <see cref="T:System.Collections.IEnumerator" /> que, cuando se enumera, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Devuelve false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Produce una excepción que indica que no se admite el enlace directo a una consulta de almacén.</summary>
      <returns>Nunca devuelve resultados; siempre produce una excepción.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> que, cuando se enumera, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Devuelve una <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> que, al enumerarse, ejecutará la consulta SQL en la base de datos.</summary>
      <returns>Objeto <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> que se puede usar para recorrer en iteración los elementos.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>Crea una matriz a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una matriz que contiene elementos de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>Crea una matriz a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una matriz que contiene elementos de la secuencia de entrada.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada y un comparador.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada y un comparador.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave y una función de selector de elemento especificadas.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TResult" /> seleccionados de la consulta.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave, un comparador y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TResult" /> seleccionados de la secuencia de entrada.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave, un comparador y una función de selector de elemento especificados.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TResult" /> seleccionados de la secuencia de entrada.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="comparer">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave y una función de selector de elemento especificadas.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene valores de tipo <paramref name="TResult" /> seleccionados de la consulta.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="elementSelector">Función de transformación para generar un valor de elemento de resultado a partir de cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Tipo del valor devuelto por <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Collections.Generic.Dictionary`2" /> a partir de la consulta enumerándola de forma asincrónica de acuerdo con una función de selector de clave especificada.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene un <see cref="T:System.Collections.Generic.Dictionary`2" /> que contiene las claves y los valores seleccionados.</returns>
      <param name="keySelector">Función para extraer una clave a partir de cada elemento.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TKey">Tipo de la clave devuelta por <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>Crea una <see cref="T:System.Collections.Generic.List`1" /> a partir de la consulta enumerándola de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene una <see cref="T:System.Collections.Generic.List`1" /> que contiene elementos de la secuencia de entrada.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que contiene la cadena SQL que se estableció cuando se creó la consulta.No se incluyen los parámetros.</summary>
      <returns>Un <see cref="T:System.String" /> que representa esta instancia.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Una versión no genérica de la clase <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Devuelve el objeto <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> genérico equivalente.</summary>
      <returns>El objeto genérico equivalente.</returns>
      <typeparam name="TEntity">Tipo de entidad en que se declara el miembro.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.El valor actual es la entidad a que hace referencia la propiedad de navegación.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> al que pertenece esta propiedad de navegación.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Obtiene o establece un valor que indica si la entidad se ha cargado desde la base de datos.</summary>
      <returns>Es true si se carga la entidad o la marca IsLoaded se ha establecido explícitamente en true; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Carga la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>Carga de forma asincrónica la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta entidad desde la base de datos.La consulta devuelta se puede modificar utilizando LINQ para realizar un filtrado u operaciones en la base de datos.</summary>
      <returns>Una consulta para la entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Las instancias de esta clase se devuelven desde el método Reference de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> y permiten realizar operaciones como la carga en las propiedades de navegación de referencia de una entidad.</summary>
      <typeparam name="TEntity">Tipo de la entidad a la que pertenece esta propiedad.</typeparam>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Obtiene o establece el valor actual de la propiedad de navegación.El valor actual es la entidad a que hace referencia la propiedad de navegación.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>El objeto <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> al que pertenece esta propiedad de navegación.</summary>
      <returns>Una entrada para la entidad que posee esta propiedad de navegación.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Obtiene o establece un valor que indica si la entidad se ha cargado desde la base de datos.</summary>
      <returns>Es true si se carga la entidad o la marca IsLoaded se ha establecido explícitamente en true; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Carga la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>Carga de forma asincrónica la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Carga de forma asincrónica la entidad desde la base de datos.Tenga en cuenta que si la entidad ya existe en el contexto, no se sobrescribirá con valores de la base de datos.</summary>
      <returns>Tarea que representa la operación asincrónica.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Devuelve una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> no genérica para la propiedad de navegación representada por este objeto.</summary>
      <returns>Versión no genérica.</returns>
      <param name="entry">Objeto que representa la propiedad de navegación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Devuelve la consulta que se utilizaría para cargar esta entidad desde la base de datos.La consulta devuelta se puede modificar utilizando LINQ para realizar un filtrado u operaciones en la base de datos.</summary>
      <returns>Una consulta para la entidad.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Representa una consulta SQL para entidades que se crean a partir de un objeto <see cref="T:System.Data.Entity.DbContext" /> y se ejecuta utilizando la conexión desde ese contexto.Las instancias de esta clase se obtienen de la instancia de <see cref="T:System.Data.Entity.DbSet" /> para el tipo de entidad.La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, utilizando foreach.Las consultas SQL para elementos que no son entidades se crean mediante <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" />.Vea <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> en el caso de una versión genérica de esta clase.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>Crea una instancia de un <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> al ser invocado desde el constructor de un tipo derivado que se utilizará como prueba de doble para <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.Los métodos y propiedades que van a ser utilizados por la prueba de doble deben ser implementados por cualquier prueba de doble, salvo AsNoTracking y AsStreaming en las que la implementación predeterminada es una operación sin efecto.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Devuelve una nueva consulta donde el <see cref="T:System.Data.Entity.DbContext" /> asociado no realizará el seguimiento de los resultados de la misma.</summary>
      <returns>Nueva consulta a la que se ha aplicado NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Representa una consulta SQL para entidades que se crean a partir de un objeto <see cref="T:System.Data.Entity.DbContext" /> y se ejecuta utilizando la conexión desde ese contexto.Las instancias de esta clase se obtienen de la instancia de <see cref="T:System.Data.Entity.DbSet`1" /> para el tipo de entidad.La consulta no se ejecuta cuando se crea este objeto; se ejecuta cada vez que se enumera, por ejemplo, utilizando foreach.Las consultas SQL para elementos que no son entidades se crean mediante <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" />.Vea <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> en el caso de una versión no genérica de esta clase.</summary>
      <typeparam name="TEntity">Tipo de las entidades devueltas por la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>Crea una instancia de un <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> al ser invocado desde el constructor de un tipo derivado que se utilizará como prueba de doble para <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.Los métodos y las propiedades que va a usar la prueba de doble deben implementarse en la prueba de doble, salvo AsNoTracking y AsStreaming, donde la implementación predeterminada es una operación sin efecto.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Devuelve una nueva consulta donde las entidades devueltas no se almacenarán en memoria caché en el <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Nueva consulta a la que se ha aplicado NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>Devuelve una consulta que transmitirá por secuencias los resultados en lugar de almacenarlos en búfer.</summary>
      <returns>Nueva consulta en la que se ha aplicado AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Excepción producida por <see cref="T:System.Data.Entity.DbContext" /> cuando se esperaba que SaveChanges para una entidad produjera una actualización de la base de datos pero, de hecho, ninguna fila de la base de datos se ha visto afectada.Esto suele indicar que la base de datos se ha actualizado simultáneamente de forma que un token de simultaneidad que se esperaba que coincidiera no ha coincidido realmente.Tenga en cuenta que las entradas de estado a que hace referencia esta excepción no se serializan debido a la seguridad y los accesos a las entradas de estado después de la serialización devolverán NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Excepción producida por <see cref="T:System.Data.Entity.DbContext" /> cuando no se consiguen guardar los cambios en la base de datos.Tenga en cuenta que las entradas de estado a que hace referencia esta excepción no se serializan debido a la seguridad y los accesos a las entradas de estado después de la serialización devolverán NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Obtiene objetos <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> que representan las entidades que no se pudieron guardar en la base de datos.</summary>
      <returns>Entradas que representan las entidades que no se pudieron guardar.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> que no reintenta operaciones si se producen errores.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>Ejecuta una vez la operación especificada.</summary>
      <param name="operation">Delegado que representa una operación ejecutable que no devuelve ningún resultado.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Ejecuta una vez la operación especificada y devuelve el resultado.</summary>
      <returns>Resultado de la operación.</returns>
      <param name="operation">Delegado que representa una operación ejecutable que devuelve el resultado de tipo <paramref name="TResult" />.</param>
      <typeparam name="TResult">Tipo de valor devuelto de <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Ejecuta una vez la operación asincrónica especificada, sin reintentar en caso de error.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente.</returns>
      <param name="operation">Función que devuelve una tarea iniciada.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
      <typeparam name="TResult">Tipo de resultado de la <see cref="T:System.Threading.Tasks.Task`1" /> devuelto por <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Ejecuta una vez la operación asincrónica especificada, sin reintentar en caso de error.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente.</returns>
      <param name="operation">Función que devuelve una tarea iniciada.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>Devuelve false para indicar que <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> no reintentará la ejecución tras un error.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>Implementación predeterminada de <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> que usa el proveedor subyacente para obtener el token de manifiesto.Tenga en cuenta que para evitar varias consultas, esta implementación usa almacenamiento en caché según el tipo real de la instancia de <see cref="T:System.Data.Common.DbConnection" />, la propiedad <see cref="P:System.Data.Common.DbConnection.DataSource" /> y la propiedad <see cref="P:System.Data.Common.DbConnection.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)"></member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Representa una entidad utilizada para almacenar los metadatos sobre un EDM en la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Obtiene o establece el identificador de la entidad de metadatos, que actualmente siempre es 1.</summary>
      <returns>Identificador.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Obtiene o establece el hash de modelo que se utiliza para comprobar si el modelo ha cambiado desde que la base de datos se creó a partir de él.</summary>
      <returns>El hash de modelo.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Intenta obtener el hash de modelo calculado mediante Code First para el contexto determinado.Este método devolverá null si el contexto no se está utilizando en modo Code First.</summary>
      <returns>La cadena de hash.</returns>
      <param name="context">Contexto.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Contiene los métodos utilizados para tener acceso al Entity Data Model creado por Code First en formato EDMX.Estos métodos se utilizan normalmente para la depuración cuando es necesario examinar el modelo que Code First crea internamente.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Utiliza Code First con el contexto determinado y escribe el Entity Data Model resultante en el sistema de escritura determinado en formato EDMX.Este método solo se puede utilizar con instancias del contexto que utilizan Code First y crean el modelo internamente.El método no se puede usar para los contextos creados mediante Database First o Model First, ni para los contextos creados mediante un objeto <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> ya existente.</summary>
      <param name="context">Contexto.</param>
      <param name="writer">Sistema de escritura.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Escribe el Entity Data Model representado por el objeto <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> especificado en el sistema de escritura indicado en formato EDMX.</summary>
      <param name="model">Objeto que representa el EDM.</param>
      <param name="writer">Sistema de escritura.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>Clave usada para resolver <see cref="T:System.Func`1" />.Consta del nombre invariable del proveedor de ADO.NET y el nombre del servidor de bases de datos según se especifica en la cadena de conexión.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /></summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará esta estrategia de ejecución.</param>
      <param name="serverName">Cadena que se comparará con el nombre de servidor en la cadena de conexión.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual a esta clave.</summary>
      <returns>Es true si el objeto especificado es igual a esta clave; de lo contrario, es false.</returns>
      <param name="obj">Objeto con el que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>Devuelve el código hash de la instancia actual.</summary>
      <returns>Código hash de la instancia actual.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará esta estrategia de ejecución.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>Cadena que se comparará con el nombre de servidor en la cadena de conexión.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>Versión asincrónica de la interfaz <see cref="T:System.Collections.IEnumerable" /> que permite recuperar elementos de forma asincrónica.Esta interfaz se usa para interactuar con consultas de Entity Framework y no se debe implementar mediante clases personalizadas.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>Obtiene un enumerador que se puede usar para enumerar la secuencia de forma asincrónica.</summary>
      <returns>Enumerador para la enumeración asincrónica en la secuencia.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>Versión asincrónica de la interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que permite recuperar elementos de la secuencia enumerable de forma asincrónica.Esta interfaz se usa para interactuar con consultas de Entity Framework y no se debe implementar mediante clases personalizadas.</summary>
      <typeparam name="T">Tipo de los objetos que se van a enumerar.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo más derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Obtiene un enumerador que se puede usar para enumerar la secuencia de forma asincrónica.</summary>
      <returns>Enumerador para la enumeración asincrónica en la secuencia.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>Versión asincrónica de la interfaz <see cref="T:System.Collections.IEnumerator" /> que permite recuperar elementos de forma asincrónica.Esta interfaz se usa para interactuar con consultas de Entity Framework y no se debe implementar mediante clases personalizadas.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>Obtiene el elemento actual de la iteración.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>Avanza el enumerador hasta el elemento siguiente de la secuencia, devolviendo el resultado de forma asincrónica.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene true si el enumerador se avanzó correctamente hasta el siguiente elemento; contiene false si el enumerador alcanzó el final de la secuencia.</returns>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>Versión asincrónica de la interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que permite recuperar elementos de forma asincrónica.Esta interfaz se usa para interactuar con consultas de Entity Framework y no se debe implementar mediante clases personalizadas.</summary>
      <typeparam name="T">Tipo de los objetos que se van a enumerar.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo más derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>Obtiene el elemento actual de la iteración.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>Define métodos para crear y ejecutar de forma asincrónica las consultas descritas por un objeto <see cref="T:System.Linq.IQueryable" />.Esta interfaz se usa para interactuar con consultas de Entity Framework y no se debe implementar mediante clases personalizadas.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica la consulta fuertemente tipada representada por un árbol de expresión especificado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor resultante de ejecutar la consulta especificada.</returns>
      <param name="expression">Árbol de expresión que representa una consulta LINQ.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
      <typeparam name="TResult">Tipo del valor que es el resultado de ejecutar la consulta.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Ejecuta de forma asincrónica la consulta representada por un árbol de expresión especificado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene el valor resultante de ejecutar la consulta especificada.</returns>
      <param name="expression">Árbol de expresión que representa una consulta LINQ.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Las implementaciones de esta interfaz se emplean para crear objetos DbConnection para un tipo de servidor de bases de datos en función de un nombre de base de datos especificado.Se establece una instancia en la clase <see cref="T:System.Data.Entity.Database" /> para que todos los DbContexts se creen sin información de conexión o simplemente con un nombre de base de datos o una cadena de conexión para usar un determinado tipo de servidor de bases de datos de forma predeterminada.Se proporcionan dos implementaciones de esta interfaz: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> se usa para crear conexiones con Microsoft SQL Server, incluidas las ediciones EXPRESS, se usa para crear conexiones con Microsoft SQL Server Compact Edition.<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> se usa para crear conexiones con versiones Microsoft SQL Server Compact.Se pueden agregar otras implementaciones para otros servidores de bases de datos según sea necesario.Tenga en cuenta que las implementaciones deben ser seguras para subprocesos o inmutables, ya que varios subprocesos pueden tener acceso a ellas al mismo tiempo.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión basándose en el nombre de base de datos o la cadena de conexión determinados.</summary>
      <returns>DbConnection inicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Generador para crear instancias de <see cref="T:System.Data.Entity.DbContext" /> derivadas.Implemente esta interfaz para habilitar los servicios de tiempo de diseño para los tipos de contexto que no disponen de un constructor público predeterminado.En tiempo de diseño, se pueden crear instancias derivadas <see cref="T:System.Data.Entity.DbContext" /> para habilitar usos de tiempo de diseño específicos como, por ejemplo, la representación de modelos, la generación de DDL, etc.Para habilitar la creación de instancias en tiempo de diseño para tipos derivados <see cref="T:System.Data.Entity.DbContext" /> que no disponen de un constructor público predeterminado, implemente esta interfaz.Los servicios de tiempo de diseño detectarán automáticamente implementaciones de esta interfaz que se encuentren en el mismo ensamblado que el tipo de <see cref="T:System.Data.Entity.DbContext" /> derivado.</summary>
      <typeparam name="TContext">Tipo del contexto.Este parámetro de tipo es covariante. Es decir, puede usar el tipo especificado o cualquier tipo más derivado. Para obtener más información acerca de la covariante y la contravariante, vea.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Crea una nueva instancia de un tipo de <see cref="T:System.Data.Entity.DbContext" /> derivado.</summary>
      <returns>Instancia de TContext</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>Estrategia que se usa para ejecutar un comando o una consulta en la base de datos, posiblemente con lógica de reintentos si se produce un error.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>Ejecuta la operación especificada.</summary>
      <param name="operation">Delegado que representa una operación ejecutable que no devuelve ningún resultado.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Ejecuta la operación especificada y devuelve el resultado.</summary>
      <returns>Resultado de la operación.</returns>
      <param name="operation">Delegado que representa una operación ejecutable que devuelve el resultado de tipo <paramref name="TResult" />.</param>
      <typeparam name="TResult">Tipo de valor devuelto de <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Ejecuta la operación asincrónica especificada y devuelve el resultado.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente (ya sea la primera vez o después de reintentar errores transitorios).Si la tarea produce un error no transitorio o se alcanza el límite de reintentos, la tarea devuelta se considerará con errores y se deberá observar la excepción.</returns>
      <param name="operation">Función que devuelve una tarea iniciada de tipo <paramref name="TResult" />.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
      <typeparam name="TResult">Tipo de resultado de la <see cref="T:System.Threading.Tasks.Task`1" /> devuelto por <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Ejecuta la operación asincrónica especificada.</summary>
      <returns>Tarea que se ejecutará hasta completarse si la tarea original se completa correctamente (ya sea la primera vez o después de reintentar errores transitorios).Si la tarea produce un error no transitorio o se alcanza el límite de reintentos, la tarea devuelta se considerará con errores y se deberá observar la excepción.</returns>
      <param name="operation">Función que devuelve una tarea iniciada.</param>
      <param name="cancellationToken">Token de cancelación usado para cancelar la operación de reintento, pero no hay ninguna operación en curso o que ya se hayan completado correctamente.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>Indica si esta <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> puede reintentar la ejecución tras un error.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>Representa un valor clave que identifica de forma exclusiva un modelo de Entity Framework que ha sido cargado en la memoria.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>Determina si la clave almacenada en caché actual del modelo es o no igual que la clave almacenada en caché especificada del modelo.</summary>
      <returns>Es true si la clave del modelo actual almacenada en caché es igual que la clave del modelo actual especificada; de lo contrario, es false.</returns>
      <param name="other">La clave almacenada en caché del modelo a comparar con la clave actual del modelo almacenado en caché.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>Devuelve la función hash para esta clave del modelo almacenada en caché.</summary>
      <returns>La función hash para esta clave del modelo almacenada en caché.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>Implemente esta interfaz en su contexto para utilizar lógica personalizada con el objeto de calcular la clave empleada para buscar un modelo ya creado en la memoria caché.Esta interfaz permite tener un único tipo de contexto que puede utilizarse con diferentes modelos en el mismo AppDomain, o bien varios tipos de contextos que utilizan el mismo modelo.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>Obtiene la clave en caché asociada al proveedor.</summary>
      <returns>La clave en caché asociada al proveedor.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>Servicio para obtener el <see cref="T:System.Data.Common.DbProviderFactory" /> correcto a partir de un <see cref="T:System.Data.Common.DbConnection" /> especificado.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>Devuelve el <see cref="T:System.Data.Common.DbProviderFactory" /> para la conexión especificada.</summary>
      <returns>Generador de proveedor de la conexión.</returns>
      <param name="connection">Conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>Servicio para obtener un token de manifiesto del proveedor dada una conexión.La clase <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> se usa de forma predeterminada y emplea el proveedor subyacente para obtener el token que suele implicar la apertura de la conexión.Se puede usar en su lugar otra implementación diferente si se agrega una <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> a <see cref="T:System.Data.Entity.DbConfiguration" /> que pueda usar cualquier información de la conexión para devolver el token.Por ejemplo, si se sabe que la conexión señala a una base de datos de SQL Server 2008, se puede devolver "2008" sin abrir la conexión.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Devuelve el token de manifiesto que se usará para la conexión especificada.</summary>
      <returns>Token de manifiesto que se va a usar.</returns>
      <param name="connection">Conexión para la que se necesita un token de manifiesto.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>Implemente esta interfaz para permitir la serialización de anotaciones personalizadas representadas por instancias de <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> hacia y desde XML EDMX.Normalmente se establece una instancia del serializador mediante el método <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Deserializa la cadena especificada en el valor de anotación esperado.</summary>
      <returns>Valor de la anotación deserializado.</returns>
      <param name="name">Nombre de la anotación que se va a deserializar.</param>
      <param name="value">Cadena que se va a deserializar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Serializa el valor de anotación especificado en una cadena para su almacenamiento en el XML EDMX.</summary>
      <returns>Valor serializado.</returns>
      <param name="name">Nombre de la anotación que se va a serializar.</param>
      <param name="value">Valor que se va a serializar.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> hace que DbModelBuilder incluya metadatos sobre el modelo cuando crea el modelo.Cuando <see cref="T:System.Data.Entity.DbContext" /> crea un modelo por convención, agrega esta convención a la lista de las usadas por DbModelBuilder.Esto hará que los metadatos del modelo se escriban en la base de datos si se usa el DbContext para crear la base de datos.Esto se puede usar después como comprobación rápida para ver si el modelo ha cambiado desde la última vez que se usó en la base de datos.Esta convención puede quitarse de las convenciones de <see cref="T:System.Data.Entity.DbModelBuilder" /> si se invalida el método OnModelCreating en una clase derivada de DbContext.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Interfaz implementada por los objetos que pueden proporcionar una instancia de <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />.La clase <see cref="T:System.Data.Entity.DbContext" /> implementa esta interfaz para proporcionar acceso al contexto de objeto subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Obtiene el contexto del objeto.</summary>
      <returns>El contexto del objeto.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>Lo usan <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> y <see cref="T:System.Data.Entity.DbConfiguration" /> al resolver un nombre invariable de proveedor de un <see cref="T:System.Data.Common.DbProviderFactory" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>Obtiene el nombre del proveedor.</summary>
      <returns>Nombre del proveedor.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>Las instancias de esta clase se usan para crear objetos DbConnection para SQL Server LocalDb en función de un nombre de base de datos o de una cadena de conexión especificados.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>Crea una instancia nueva del generador de conexión para la versión particular de LocalDb.Para SQL Server 2012 LocalDb, use "v11.0".Para SQL Server 2014 y versiones posteriores de LocalDb, use "mssqllocaldb".</summary>
      <param name="localDbVersion">Versión de LocalDb que se va a usar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>Crea una instancia nueva del generador de conexión para la versión particular de LocalDb.Para SQL Server 2012 LocalDb, use "v11.0".Para SQL Server 2014 y versiones posteriores de LocalDb, use "mssqllocaldb".</summary>
      <param name="localDbVersion">Versión de LocalDb que se va a usar.</param>
      <param name="baseConnectionString">Cadena de conexión que se va a usar para proporcionar opciones a la base de datos además de 'Initial Catalog', 'Data Source' y 'AttachDbFilename'.'Initial Catalog' y 'AttachDbFilename' se antepondrán a esta cadena según el nombre de la base de datos cuando se llame a CreateConnection."Data Source" se establecerá según el argumento LocalDbVersion.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>Cadena de conexión que se va a usar para proporcionar opciones a la base de datos además de 'Initial Catalog', 'Data Source' y 'AttachDbFilename'.'Initial Catalog' y 'AttachDbFilename' se antepondrán a esta cadena según el nombre de la base de datos cuando se llame a CreateConnection."Data Source" se establecerá según el argumento LocalDbVersion.El valor predeterminado es 'Integrated Security=True;'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión para SQL Server LocalDb según el nombre de base de datos o la cadena de conexión determinados.Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente.</summary>
      <returns>DbConnection inicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> usa el nombre de la clase <see cref="T:System.Data.Entity.DbContext" /> derivada como contenedor para el modelo conceptual creado mediante Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Aplica la convención al modelo especificado.</summary>
      <param name="item">Contenedor que se va a aplicar a la convención.</param>
      <param name="model">Modelo.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Esta convención de <see cref="T:System.Data.Entity.DbModelBuilder" /> emplea el espacio de nombres de la clase <see cref="T:System.Data.Entity.DbContext" /> derivada como el espacio de nombres del modelo conceptual creado mediante Code First.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>Compara objetos mediante igualdad de referencia.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor"></member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>Obtiene la instancia predeterminada.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)"></member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Las instancias de esta clase se usan internamente para crear expresiones constantes para <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> que se insertan en el árbol de expresiones para reemplazar las referencias a <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> y <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</summary>
      <typeparam name="TElement">Tipo del elemento.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>La propiedad pública esperada en el árbol de expresiones LINQ.</summary>
      <returns>La consulta.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>Excepción que se produce cuando la acción fracasa de nuevo después de reintentarse el número configurado de veces.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> sin un mensaje de error.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> con un mensaje de error especificado.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Las instancias de esta clase se utilizan para crear objetos DbConnection para SQL Server Compact Edition basándose en un nombre de base de datos o una cadena de conexión determinados.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>Crea un nuevo generador de conexión con las propiedades DatabaseDirectory y BaseConnectionString vacías (predeterminadas).</summary>
      <param name="providerInvariantName">El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Crea un nuevo generador de conexión con las propiedades DatabaseDirectory y BaseConnectionString especificadas.</summary>
      <param name="providerInvariantName">El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</param>
      <param name="databaseDirectory">Ruta de acceso que se ha de anteponer al nombre de la base de datos que formará el nombre de archivo utilizado por SQL Server Compact Edition cuando cree o lea el archivo de base de datos.Una cadena vacía significa que SQL Server Compact Edition usará su valor predeterminado para la ubicación del archivo de base de datos.</param>
      <param name="baseConnectionString">Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Origen de datos".El origen de datos se antepondrá a esta cadena según el nombre de la base de datos cuando se llame a CreateConnection.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Origen de datos".El origen de datos se antepondrá a esta cadena según el nombre de la base de datos cuando se llame a CreateConnection.El valor predeterminado es la cadena vacía, lo que significa que no se utilizarán otras opciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión para SQL Server Compact Edition basándose en el nombre de base de datos o la cadena de conexión determinados.Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente.</summary>
      <returns>DbConnection inicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Ruta de acceso que se ha de anteponer al nombre de la base de datos que formará el nombre de archivo utilizado por SQL Server Compact Edition cuando cree o lea el archivo de base de datos.El valor predeterminado es "|DataDirectory|", lo que significa que el archivo se colocará en el directorio de datos designado.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>El nombre invariable del proveedor que especifica la versión de SQL Server Compact Edition que se debe utilizar.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>Las instancias de esta clase se utilizan para crear objetos DbConnection para SQL Server basándose en un nombre de base de datos o una cadena de conexión determinados.De forma predeterminada, la conexión se realiza con '.\SQLEXPRESS'.Esto se puede cambiar modificando la cadena de conexión base al crear una instancia del generador.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Crea un nuevo generador de conexiones con una propiedad BaseConnectionString predeterminada de 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Crea un nuevo generador de conexiones con la propiedad BaseConnectionString especificada.</summary>
      <param name="baseConnectionString">Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Catálogo inicial".El "Catálogo inicial" se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Cadena de conexión que se utiliza para las opciones a la base de datos distintas de "Catálogo inicial".El "Catálogo inicial" se antepondrá a esta cadena basándose en el nombre de la base de datos cuando se llame a CreateConnection.La predeterminada es 'Data Source=.\SQLEXPRESS; Integrated Security=True;'.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Crea una conexión para SQL Server basándose en el nombre de base de datos o la cadena de conexión determinados.Si la cadena determinada contiene un carácter "=", se trata como una cadena de conexión completa; de lo contrario, se trata como un nombre de base de datos solamente.</summary>
      <returns>DbConnection inicializado.</returns>
      <param name="nameOrConnectionString">Nombre de base de datos o cadena de conexión.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Este atributo se puede aplicar a una clase <see cref="T:System.Data.Entity.DbContext" /> derivada completa o a las propiedades <see cref="T:System.Data.Entity.IDbSet`1" /> o <see cref="T:System.Data.Entity.DbSet`1" /> individuales en esa clase.Cuando se aplican propiedades <see cref="T:System.Data.Entity.IDbSet`1" /> o <see cref="T:System.Data.Entity.DbSet`1" /> detectadas, se seguirá incluyendo en el modelo pero no se inicializará automáticamente.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> usa esta clase para escribir y leer información de seguimiento de transacciones de la base de datos.Para personalizar la definición de la tabla de transacciones, puede derivar de esta clase e invalidar <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />.Las clases derivadas se pueden registrar mediante <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" />.</summary>
      <param name="existingConnection">Conexión usada por el contexto para el que se registrarán las transacciones.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)"></member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>Obtiene o establece un <see cref="T:System.Data.Entity.DbSet`1" /> que se puede usar para leer y escribir instancias de <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>Clase base para los interceptores que administran las operaciones de transacciones.Las clases derivadas se pueden registrar mediante <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> o <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que inició la transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que inicia la transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>Cuando se implementa en una clase derivada devuelve el script para preparar la base de datos para este controlador de transacciones.</summary>
      <returns>Script para cambiar el esquema de la base de datos para este controlador de transacciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se cerró.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se va a cerrar.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se confirmó.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se va a confirmar.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>Obtiene la conexión.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" /> para el que se administrarán las operaciones de transacciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>Obtiene el contexto.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" /> para el que se administrarán las operaciones de transacciones; puede ser NULL.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose"></member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>Libera los recursos usados por este controlador de transacciones.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se desechó.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se desechó.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se va a desechar.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se va a desechar.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Inicializa esta instancia usando el contexto especificado.</summary>
      <param name="context">Contexto para el que se administrarán operaciones de transacciones.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Inicializa esta instancia usando el contexto especificado.</summary>
      <param name="context">Contexto para el que se administrarán operaciones de transacciones.</param>
      <param name="connection">Conexión que se va a usar para la inicialización.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>Obtiene o establece un valor que indica si este controlador de transacciones se desecha.</summary>
      <returns>Es true si se desecha; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>Comprueba si el contexto de interceptación especificado contiene el contexto de destino o si la conexión proporcionada es igual que la que usa el contexto de destino.</summary>
      <returns>Es true si el contexto de interceptación especificado contiene el contexto de destino o si la conexión proporcionada es la misma que la usada por el contexto de destino si el contexto de interceptación especificado no contiene ningún contexto; de lo contrario, es false.</returns>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Contexto de interceptación.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>Obtiene el contexto.</summary>
      <returns>
        <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" /> para el que se administrarán las operaciones de transacciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se abrió.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión que se va a abrir.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se revirtió.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="transaction">Transacción que se va a revertir.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Se puede implementar en una clase derivada.</summary>
      <param name="connection">Conexión.</param>
      <param name="interceptionContext">Información contextual asociada a la llamada.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>Representa una transacción</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor"></member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>Hora local en que se inició la transacción.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode"></member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>Identificador único asignado a un objeto de transacción.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Se produce cuando se genera un contexto a partir de las plantillas de <see cref="T:System.Data.Entity.DbContext" /> en modo Database First o Model First y se usa después en modo Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Mensaje.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Mensaje.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>Herede de esta clase para crear un servicio que permita la generación de código de anotaciones personalizadas como parte de la aplicación de procesos de scaffolding a las migraciones.La clase derivada se debe establecer en <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Implemente este método para generar código para el valor de anotación especificado.</summary>
      <param name="annotationName">Nombre de la anotación para el que se va a generar un valor.</param>
      <param name="annotation">Valor de la anotación.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Invalide este método para devolver espacios de nombres adicionales que se deben incluir en el código generado para la migración con scaffold.La implementación predeterminada devuelve una enumeración vacía.</summary>
      <returns>Lista de espacios de nombres adicionales que se van a incluir.</returns>
      <param name="annotationNames">Nombres de las anotaciones que se van a incluir en el código generado.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>Representa un par de valores de anotación en una <see cref="T:System.Data.Entity.Migrations.DbMigration" /> con scaffold o codificada manualmente.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>Crea un nuevo par de valores de anotación.</summary>
      <param name="oldValue">Valor anterior de la anotación, que puede ser NULL si se acaba de crear la anotación.</param>
      <param name="newValue">Nuevo valor de la anotación, que puede ser NULL si se ha eliminado la anotación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode"></member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>Obtiene el nuevo valor de la anotación, que puede ser NULL si se ha eliminado la anotación.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>Obtiene el valor anterior de la anotación, que puede ser NULL si se acaba de crear la anotación.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Devuelve true si ambos pares de anotación contienen los mismos valores; de lo contrario, devuelve false.</summary>
      <returns>Es true si los dos pares contienen los mismos valores.</returns>
      <param name="left">Par de valores de anotación.</param>
      <param name="right">Par de valores de anotación.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Devuelve true si los dos pares de anotación contienen valores diferentes; de lo contrario, devuelve false.</summary>
      <returns>Es true si los pares contienen valores diferentes.</returns>
      <param name="left">Par de valores de anotación.</param>
      <param name="right">Par de valores de anotación.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>Lo devuelve <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> y los métodos relacionados para indicar si un objeto no está en conflicto con otros de forma que los dos se puedan combinar en uno.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>Crea una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" />.</summary>
      <param name="isCompatible">Indica si los dos objetos probados son o no compatibles.</param>
      <param name="errorMessage">Mensaje de error que indica en qué medida los objetos no son compatibles.Se espera que sea NULL si isCompatible es true.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>Si <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> es true, se devuelve un mensaje de error que indica en qué medida los dos objetos probados son incompatibles.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>Es true si los dos objetos probados son compatibles; de lo contrario, es false.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>Conversión implícita a un tipo booleano para permitir que el objeto de resultado se use directamente en las comprobaciones.</summary>
      <returns>Es true si el resultado es compatible; de lo contrario, es false.</returns>
      <param name="result">Objeto que se va a convertir.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>Los tipos usados como anotaciones personalizadas pueden implementar esta interfaz para indicar que se puede intentar emplear varias anotaciones con el mismo nombre en una tabla o columna determinada si se combinan las distintas anotaciones en una.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>Devuelve true si esta anotación no está en conflicto con la anotación especificada de forma que las dos se pueden combinar mediante el método <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>CompatibilityResult que indica si esta anotación es o no compatible con la otra.</returns>
      <param name="other">Anotación que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>Combina esta anotación con la anotación especificada y devuelve una nueva anotación combinada.Solo se espera que este método se ejecute correctamente si <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> devuelve true.</summary>
      <returns>Nueva anotación combinada.</returns>
      <param name="other">Anotación que se va a combinar con esta.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>Las instancias de esta clase se usan como anotaciones personalizadas para representar índices de base de datos en un modelo de Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>Crea una nueva anotación para la colección especificada de índices.</summary>
      <param name="indexAttributes">Atributos de índice que representan uno o más índices.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Crea una nueva anotación para el índice especificado.</summary>
      <param name="indexAttribute">Atributos de índice que representan un índice.</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>Nombre usado cuando esta anotación se almacena en los metadatos de Entity Framework o se serializa en un archivo SSDL/EDMX.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>Obtiene los índices representados por esta anotación.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>Devuelve true si esta anotación no está en conflicto con la anotación especificada de forma que las dos se pueden combinar mediante el método <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>CompatibilityResult que indica si esta anotación es o no compatible con la otra.</returns>
      <param name="other">Anotación que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>Combina esta anotación con la anotación especificada y devuelve una nueva anotación que contiene los índices combinados.</summary>
      <returns>Nueva anotación con índices de las dos anotaciones combinadas.</returns>
      <param name="other">Anotación que se va a combinar con esta.</param>
      <exception cref="T:System.InvalidOperationException">La otra anotación contiene índices que no son compatibles con índices de esta anotación.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>Esta clase se usa para serializar y deserializar objetos <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> de manera que se puedan almacenar en el formato EDMX del modelo de Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Deserializa la cadena proporcionada en un objeto <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</summary>
      <returns>Valor de la anotación deserializado.</returns>
      <param name="name">Nombre de la anotación que se va a deserializar.</param>
      <param name="value">Cadena que se va a deserializar.</param>
      <exception cref="T:System.FormatException">Si hay un error al leer el valor serializado.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Serializa el valor de <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> especificado en una cadena para su almacenamiento en el XML EDMX.</summary>
      <returns>Valor serializado.</returns>
      <param name="name">Nombre de la anotación que se va a serializar.</param>
      <param name="value">Valor que se va a serializar, que debe ser un objeto IndexAnnotation.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>Argumentos de evento pasados a los controladores de eventos <see cref="E:System.Data.Entity.DbConfiguration.Loaded" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Invoque a este método para agregar una instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> a la Cadena de responsabilidad de las resoluciones que se usan para resolver las dependencias que Entity Framework necesita.A diferencia del método AddDependencyResolver, este método pone la resolución en la parte inferior de la Cadena de responsabilidad, de forma que solo se usará para resolver una dependencia que no se pudo resolver mediante ninguna de las demás resoluciones.</summary>
      <param name="resolver">Resolución que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>Invoque a este método para agregar una instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> a la Cadena de responsabilidad de las resoluciones que se usan para resolver las dependencias que Entity Framework necesita.</summary>
      <param name="resolver">Resolución que se va a agregar.</param>
      <param name="overrideConfigFile">Si es true, la resolución agregada tendrá prioridad sobre los valores del archivo de configuración.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>Devuelve una instantánea de la <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que está a punto de bloquearse.Use los métodos GetService en este objeto para obtener los servicios que se han registrado.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>Agrega una resolución de ajuste a la configuración que se va a bloquear.Una resolución de ajuste es una resolución que intercepta un servicio devuelto por la cadena de resoluciones y lo ajusta o reemplaza con otro servicio del mismo tipo.</summary>
      <param name="serviceInterceptor">Delegado que toma el servicio sin ajustar y la clave, y devuelve el servicio ajustado o reemplazado.</param>
      <typeparam name="TService">Tipo de servicio que se va a ajustar o reemplazar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString"></member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>Métodos de extensión para llamar al método <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> con un parámetro de tipo genérico y/o sin ningún nombre.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> pasando el tipo genérico del método como argumento de tipo y NULL para el argumento de nombre.</summary>
      <returns>Dependencia resuelta o NULL si la resolución no la pudo resolver.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <typeparam name="T">Tipo de contrato que se va a resolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> pasando el tipo genérico del método y el nombre especificado como argumentos.</summary>
      <returns>Dependencia resuelta o NULL si la resolución no la pudo resolver.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <param name="key">Clave de la dependencia que se va a resolver.</param>
      <typeparam name="T">Tipo de contrato que se va a resolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> pasando el argumento de tipo especificado y usando NULL para el argumento de nombre.</summary>
      <returns>Dependencia resuelta o NULL si la resolución no la pudo resolver.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <param name="type">Tipo de contrato que se va a resolver.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> pasando el tipo genérico del método como argumento de tipo y NULL para el argumento de nombre.</summary>
      <returns>Todas las dependencias resueltas o <see cref="T:System.Collections.Generic.IEnumerable`1" /> si no se resuelve ningún servicio.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <typeparam name="T">Tipo de contrato que se va a resolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> pasando el tipo genérico del método y el nombre especificado como argumentos.</summary>
      <returns>Todas las dependencias resueltas o <see cref="T:System.Collections.Generic.IEnumerable`1" /> si no se resuelve ningún servicio.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <param name="key">Clave de la dependencia que se va a resolver.</param>
      <typeparam name="T">Tipo de contrato que se va a resolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Llama a <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> pasando el argumento de tipo especificado y usando NULL para el argumento de nombre.</summary>
      <returns>Todas las dependencias resueltas o <see cref="T:System.Collections.Generic.IEnumerable`1" /> si no se resuelve ningún servicio.</returns>
      <param name="resolver">Resolución que se va a usar.</param>
      <param name="type">Tipo de contrato que se va a resolver.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>Implementación de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que se usa para resolver los generadores de <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />.</summary>
      <typeparam name="T">Tipo de estrategia de ejecución que se resuelve.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /></summary>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará esta estrategia de ejecución.</param>
      <param name="serverName">Cadena que se comparará con el nombre de servidor en la cadena de conexión.null coincidirá con todo.</param>
      <param name="getExecutionStrategy">Función que devuelve una instancia nueva de una estrategia de ejecución.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>Si el tipo especificado es <see cref="T:System.Func`1" />, esta resolución intentará devolver el servicio que se va a usar; de lo contrario, devolverá NULL.Cuando el tipo especificado es Func{IExecutionStrategy}, se espera que la clave sea <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>
        <see cref="T:System.Func`1" /> o NULL.</returns>
      <param name="type">Tipo de servicio que se va a resolver.</param>
      <param name="key">Clave usada para determinar el servicio que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Si el tipo especificado es <see cref="T:System.Func`1" />, esta resolución intentará devolver el servicio que se va a usar; de lo contrario, devolverá una enumeración vacía.Cuando el tipo especificado es Func{IExecutionStrategy}, se espera que la clave sea <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Enumerable de <see cref="T:System.Func`1" />, o una enumeración vacía.</returns>
      <param name="type">Tipo de servicio que se va a resolver.</param>
      <param name="key">Clave usada para determinar el servicio que se va a devolver.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>Esta interfaz la implementa cualquier objeto que pueda resolver una dependencia, ya sea directamente o mediante el uso de un contenedor externo.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>Intenta resolver una dependencia para un tipo de contrato especificado y opcionalmente una clave determinada.Si la resolución no puede resolver la dependencia, debe devolver NULL y no iniciarse.Esto permite usar las resoluciones en un modelo de Cadena de responsabilidad, de forma que se pueda pedir a varias resoluciones que resuelvan una dependencia hasta que alguna lo haga finalmente.</summary>
      <returns>Dependencia resuelta, que debe ser una instancia de tipo de contrato especificado, o NULL si la dependencia no se pudo resolver.</returns>
      <param name="type">Interfaz o clase base abstracta que define la dependencia que se va a resolver.Se espera que el objeto devuelto sea una instancia de este tipo.</param>
      <param name="key">Opcionalmente, clave de la dependencia que se va a resolver.Puede ser NULL para las dependencias que no se diferencian por clave.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>Intenta resolver una dependencia para un tipo de contrato especificado y opcionalmente una clave determinada.Si la resolución no puede resolver la dependencia, debe devolver una enumeración vacía y no iniciarse.Este método difiere de <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> en que devuelve todos los servicios registrados para la combinación de tipo y clave especificada.</summary>
      <returns>Todos los servicios que resuelven la dependencia, que deben ser instancias del tipo de contrato especificado, o una enumeración vacía si la dependencia no se pudo resolver.</returns>
      <param name="type">Interfaz o clase base abstracta que define la dependencia que se va a resolver.Se espera que cada uno de los objetos devueltos sea una instancia de este tipo.</param>
      <param name="key">Opcionalmente, clave de la dependencia que se va a resolver.Puede ser NULL para las dependencias que no se diferencian por clave.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>Implementa <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> para resolver una dependencia, de forma que devuelva siempre la misma instancia.</summary>
      <typeparam name="T">Tipo que define el contrato de la dependencia que se va a resolver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Crea una nueva resolución que devolverá la instancia especificada del tipo de contrato, independientemente de la clave pasada al método Get.</summary>
      <param name="singletonInstance">Instancia que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>Crea una nueva resolución que devolverá la instancia especificada del tipo de contrato si la clave indicada coincide con la clave pasada al método Get según el predicado especificado.</summary>
      <param name="singletonInstance">Instancia que se va a devolver.</param>
      <param name="keyPredicate">Predicado que toma el objeto de clave y devuelve true si y solo si coincide.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>Crea una nueva resolución que devolverá la instancia especificada del tipo de contrato si la clave indicada coincide exactamente con la clave pasada al método Get.</summary>
      <param name="singletonInstance">Instancia que se va a devolver.</param>
      <param name="key">Opcionalmente, clave de la dependencia que se va a resolver.Puede ser NULL para las dependencias que no se diferencian por clave.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)"></member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>Implementación de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> que se usa para resolver los generadores de <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" /></summary>
      <param name="transactionHandlerFactory">Función que devuelve una nueva instancia de un controlador de transacciones.</param>
      <param name="providerInvariantName">Nombre invariable del proveedor de ADO.NET que indica el tipo de conexión ADO.NET para el que se usará el controlador de transacciones.null coincidirá con todo.</param>
      <param name="serverName">Cadena que se comparará con el nombre de servidor en la cadena de conexión.null coincidirá con todo.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode"></member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>Si el tipo especificado es <see cref="T:System.Func`1" />, este método intentará devolver el servicio que se va a usar; de lo contrario, devolverá null.Cuando el tipo especificado es <see cref="T:System.Func`1" />, se espera que la clave sea <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>
        <see cref="T:System.Func`1" /> o NULL.</returns>
      <param name="type">Tipo de servicio que se va a resolver.</param>
      <param name="key">Clave usada para determinar el servicio que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>Si el tipo especificado es <see cref="T:System.Func`1" />, esta resolución intentará devolver el servicio que se va a usar; de lo contrario, devolverá una enumeración vacía.Cuando el tipo especificado es <see cref="T:System.Func`1" />, se espera que la clave sea <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Enumerable de <see cref="T:System.Func`1" />, o una enumeración vacía.</returns>
      <param name="type">Tipo de servicio que se va a resolver.</param>
      <param name="key">Clave usada para determinar el servicio que se va a devolver.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>Representa una vista de asignación.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> que tiene la Entity SQL especificada.</summary>
      <param name="entitySql">Cadena que especifica la Entity SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>Obtiene la Entity SQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>Clase base abstracta para implementaciones de memoria caché de la vista de asignación.Las clases derivadas deben tener un constructor sin parámetros si se usan con <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Obtiene una vista correspondiente a la extensión especificada.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> que especifica la vista de asignación, o NULL si la extensión no está asociada a una vista de asignación.</returns>
      <param name="extent">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> que especifica la extensión.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>Obtiene un valor hash calculado en la clausura de asignación.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>Especifica los medios para crear instancias concretas de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>Crea una instancia de caché de vista generada para la asignación de contenedor especificada por los nombres de los contenedores asignados.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> que especifica la memoria caché de vista generada.</returns>
      <param name="conceptualModelContainerName">El nombre del contenedor del modelo conceptual.</param>
      <param name="storeModelContainerName">El nombre del contenedor del modelo de almacenamiento.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>Define un atributo personalizado que especifica el tipo de caché de la vista de asignación (subclase de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />) asociado a un tipo de contexto (subclase de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o <see cref="T:System.Data.Entity.DbContext" />).Se crea una instancia del tipo de caché en tiempo de ejecución y el tipo de caché se usa para recuperar vistas generadas previamente en el contexto correspondiente.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> que asocia un tipo de contexto a un tipo de caché de vista de asignación.</summary>
      <param name="contextType">Subclase de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheTypeName">Nombre completo calificado con el nombre de ensamblado del tipo de caché.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> que asocia un tipo de contexto a un tipo de caché de vista de asignación.</summary>
      <param name="contextType">Subclase de <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> o <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheType">Subclase de <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>Representa un término de pluralization personalizado que usará <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /></summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>Cree una nueva instancia</summary>
      <param name="singular">Cadena no NULL o vacía que representa el singular.</param>
      <param name="plural">Cadena no NULL o vacía que representa el plural.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>Obtiene el plural.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>Obtiene el singular.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Implementación predeterminada del servicio de pluralization que usará Entity Framework.Este servicio de pluralization se basa en la configuración regional Inglés.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Crea una nueva instancia del servicio de pluralization predeterminado usado en Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Crea una nueva instancia del servicio de pluralization predeterminado usado en Entity Framework.</summary>
      <param name="userDictionaryEntries">Colección de entradas del diccionario de usuario que usará este servicio. Estas entradas pueden personalizar el servicio de acuerdo con las necesidades del usuario.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>Devuelve la forma plural de la palabra especificada.</summary>
      <returns>Forma plural del parámetro de entrada.</returns>
      <param name="word">Palabra que se va a escribir en plural.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>Devuelve la forma singular de la palabra especificada.</summary>
      <returns>Forma singular del parámetro de entrada.</returns>
      <param name="word">Palabra que se va a escribir en singular.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>Servicios de pluralización que usará el runtime de EF que implementa esta interfaz.De forma predeterminada se usa <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />, pero el servicio de pluralización que se va a usar se puede establecer en una clase derivada de <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>Pluraliza una palabra mediante el servicio.</summary>
      <returns>Palabra pluralizada</returns>
      <param name="word">Palabra que se va a pluralizar.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>Pone en singular una palabra mediante el servicio.</summary>
      <returns>Palabra que se ha puesto en singular.</returns>
      <param name="word">Palabra que se va a poner en singular.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Clase base para las migraciones basadas en código.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Agrega una operación para agregar una columna a una tabla existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que se va a agregar la columna.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la columna que se va a agregar.</param>
      <param name="columnAction">Una acción que especifica la columna que se va a agregar.es decir,c =&amp;gt; c.Int(nullable: false, defaultValue: 3)</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>Agrega una operación para crear una restricción de clave externa nueva.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene la columna de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="dependentColumn">Columna de clave externa.</param>
      <param name="principalTable">Tabla que contiene la columna a la que hace referencia esta clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="principalColumn">Columna a la que hace referencia esta clave externa.Si no se proporcionan valores, se hará referencia a la clave principal de la tabla principal.</param>
      <param name="cascadeDelete">Valor que indica si la eliminación en cascada se debe configurar para la relación de clave externa.Si no se suministran valores, se anulará la eliminación de cascada.</param>
      <param name="name">Nombre de la restricción de la clave externa de la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>Agrega una operación para crear una restricción de clave externa nueva.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene columnas de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="dependentColumns">Columnas de clave externa.</param>
      <param name="principalTable">Tabla que contiene las columnas a las que hace referencia esta clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="principalColumns">Columnas a las que hace referencia esta clave externa.Si no se proporcionan valores, se hará referencia a la clave principal de la tabla principal.</param>
      <param name="cascadeDelete">Valor que indica si la eliminación en cascada se debe configurar para la relación de clave externa.Si no se suministran valores, se anulará la eliminación de cascada.</param>
      <param name="name">Nombre de la restricción de la clave externa de la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>Agrega una operación para crear una clave principal nueva.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Tabla que contiene la columna de clave principal.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="column">Columna de clave principal.</param>
      <param name="name">Nombre de la clave principal en la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="clustered">Valor que indica si se trata de una clave principal agrupada o no.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>Agrega una operación para crear una clave principal nueva según múltiples columnas.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Tabla que contiene las columnas de clave principal.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columns">Columnas de clave principal.</param>
      <param name="name">Nombre de la clave principal en la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="clustered">Valor que indica si se trata de una clave principal agrupada o no.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Agrega una operación para modificar la definición de una columna existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla en la que existe la columna.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la columna que se va a cambiar.</param>
      <param name="columnAction">Una acción que especifica la nueva definición de la columna.es decir,c =&amp;gt; c.String(nullable: false, defaultValue: "none")</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Agrega una operación para alterar un procedimiento almacenado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="parametersAction">La acción que especifica los parámetros del procedimiento almacenado.</param>
      <param name="body">El cuerpo del procedimiento almacenado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden ser procesados por proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos.Por ejemplo, 'nuevo { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Los parámetros de aquí alteran la operación de procedimiento almacenado.No es necesario especificar este tipo, ya que se deducirá del parámetro <paramref name="parametersAction" /> que facilite.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>Agrega una operación para alterar un procedimiento almacenado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="body">El cuerpo del procedimiento almacenado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden ser procesados por proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos.Por ejemplo, 'nuevo { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Agrega una operación para administrar los cambios en las anotaciones definidas en tablas.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columnsAction">Una acción que especifica las columnas que se van a incluir en la tabla.es decir,t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Anotaciones personalizadas de la tabla que han cambiado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Columnas de esta operación.No es necesario especificar este tipo, se deducirá del parámetro columnsAction que facilite.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Agrega una operación para crear un índice en una única columna.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla donde se va a crear el índice.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="column">Nombre de la columna donde se va a crear el índice.</param>
      <param name="unique">Valor que indica si se trata de un índice único.Si no se proporcionan valores, se creará un índice que no sea único.</param>
      <param name="name">Nombre que se va a usar para el índice en la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="clustered">Valor que indica si se trata o no de un índice clúster.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Agrega una operación para crear un índice en múltiples columnas.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla donde se va a crear el índice.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columns">Nombre de las columnas donde se va a crear el índice.</param>
      <param name="unique">Valor que indica si se trata de un índice único.Si no se proporcionan valores, se creará un índice que no sea único.</param>
      <param name="name">Nombre que se va a usar para el índice en la base de datos.Si no se proporcionan valores, se generará un nombre único.</param>
      <param name="clustered">Valor que indica si se trata o no de un índice clúster.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Agrega una operación para crear un nuevo procedimiento almacenado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="parametersAction">La acción que especifica los parámetros del procedimiento almacenado.</param>
      <param name="body">El cuerpo del procedimiento almacenado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden ser procesados por proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos.Por ejemplo, 'nuevo { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Los parámetros de aquí crean la operación de procedimiento almacenado.No es necesario especificar este tipo, ya que se deducirá del parámetro <paramref name="parametersAction" /> que facilite.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>Agrega una operación para crear un nuevo procedimiento almacenado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="body">El cuerpo del procedimiento almacenado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden ser procesados por proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos.Por ejemplo, 'nuevo { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Agrega una operación para crear una tabla nueva.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Objeto que permite realizar una configuración más avanzada de la operación de creación de tablas.</returns>
      <param name="name">Nombre de la tabla.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columnsAction">Una acción que especifica las columnas que se van a incluir en la tabla.es decir,t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Anotaciones personalizadas que existen en la tabla que se va a crear.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Columnas en esta operación de creación de tablas.No es necesario especificar este tipo, se deducirá del parámetro columnsAction que facilite.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>Agrega una operación para crear una tabla nueva.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Objeto que permite realizar una configuración más avanzada de la operación de creación de tablas.</returns>
      <param name="name">Nombre de la tabla.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columnsAction">Una acción que especifica las columnas que se van a incluir en la tabla.es decir,t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TColumns">Columnas en esta operación de creación de tablas.No es necesario especificar este tipo, se deducirá del parámetro columnsAction que facilite.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>Operaciones que se van a realizar durante el proceso de degradar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Agrega una operación para quitar una columna existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que se va a quitar la columna.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la columna que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar una columna existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que se va a quitar la columna.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar una restricción de clave externa según su nombre.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene la columna de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la restricción de la clave externa de la base de datos.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar una restricción de clave externa según la columna a la que se destina.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene la columna de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="dependentColumn">Columna de clave externa.</param>
      <param name="principalTable">Tabla que contiene la columna a la que hace referencia esta clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar una restricción de clave externa según la columna a la que se destina.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene la columna de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="dependentColumn">Columna de clave externa.</param>
      <param name="principalTable">Tabla que contiene la columna a la que hace referencia esta clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="principalColumn">Columnas a las que hace referencia esta clave externa.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>Agrega una operación para quitar una restricción de clave externa según las columnas a las que se destina.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="dependentTable">Tabla que contiene columnas de clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="dependentColumns">Columnas de clave externa.</param>
      <param name="principalTable">Tabla que contiene las columnas a las que hace referencia esta clave externa.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar un índice según su nombre.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que se va a quitar el índice.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre del índice que se va a quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>Agrega una operación para quitar un índice según las columnas a las que se destina.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que se va a quitar el índice.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="columns">Nombre de las columnas a las que se destina el índice.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>Agrega una operación para quitar una clave primaria existente que se creó con el nombre predeterminado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Tabla que contiene la columna de clave principal.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>Agrega una operación para quitar una clave primaria que no tiene el nombre predeterminado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Tabla que contiene la columna de clave principal.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la clave principal que se va a quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>Agrega una operación para quitar un procedimiento almacenado existente con el nombre especificado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento a quitar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden ser procesados por proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos.Por ejemplo, 'nuevo { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Agrega una operación para quitar una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="removedColumnAnnotations">Anotaciones personalizadas que existen en columnas de la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Agrega una operación para quitar una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="removedColumnAnnotations">Anotaciones personalizadas que existen en columnas de la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Agrega una operación para quitar una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>Agrega una operación para quitar una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Determina si esta instancia es equivalente a un objeto específico.</summary>
      <returns>Es true si el objeto especificado es igual a la instancia actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Devuelve la función hash del objeto actual.</summary>
      <returns>Función hash del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Devuelve el tipo en tiempo de ejecución de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>Agrega una operación para mover un procedimiento almacenado a un esquema nuevo.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado que se va a mover.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="newSchema">Esquema al cual va a moverse el procedimiento almacenado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>Agrega una operación para mover una tabla a un esquema nuevo.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a mover.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="newSchema">Esquema al que se va a mover la tabla.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>Agrega una operación para cambiar el nombre a una columna.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla que contiene la columna a la que se va a cambiar el nombre.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre de la columna cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la columna.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>Agrega una operación para cambiar el nombre de un índice.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla que contiene el índice cuyo nombre se va a cambiar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="name">Nombre del índice cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre del índice.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>Agrega una operación para cambiar el nombre de un procedimiento almacenado.Para cambiar el esquema de un procedimiento almacenado use MoveStoredProcedure. Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado cuyo nombre se va a cambiar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="newName">El nuevo nombre del procedimiento almacenado.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>Agrega una operación para cambiar el nombre a una tabla.Para cambiar el esquema de una tabla, use MoveTable.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla cuyo nombre se va a cambiar.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="newName">Nuevo nombre para la tabla.El nombre del esquema es opcional, si no se especifican esquemas, se asume que es dbo.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>Agrega una operación para ejecutar un comando SQL.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="sql">SQL que se va a ejecutar.</param>
      <param name="suppressTransaction">Valor que indica si el comando SQL se debe ejecutar fuera de la transacción que se está usando para el proceso de migración.Si no se especifican valores, el comando SQL se ejecuta dentro de la transacción.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Agrega una operación de migración.</summary>
      <param name="migrationOperation">La operación de migración que se va a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>Operaciones que se van a realizar durante el proceso de actualizar.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Configuración con relación al uso de las migraciones para un modelo determinado.Por lo general, creará una clase de configuración que se deriva de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />, en lugar de usar esta clase.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase DbMigrationsConfiguration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>Obtiene o establece un valor que indica si es aceptable la pérdida de datos durante una migración automática.Si se establece en false, se producirá una excepción en caso de que se produzca una pérdida de datos por una migración automática.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>Obtiene o establece un valor que indica si se pueden usar las migraciones cuando se migra la base de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>Obtiene o establece el generador de código que se va a usar cuando se aplican procesos de scaffolding a las migraciones.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>Obtiene o establece el valor de tiempo de espera usado para los comandos individuales dentro de una migración.Un valor NULL indica que se usará el valor predeterminado del proveedor subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>Obtiene o define la cadena utilizada para diferenciar migraciones pertenecientes a esta configuración de migraciones pertenecientes a otras configuraciones que utilizan la base de datos.Esta propiedad permite aplicar a una única base de datos migraciones procedentes desde diversos y varios modelos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>Obtiene o establece el DbContext derivado que representa el modelo que ser va a migrar.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>El directorio predeterminado en el que se almacenan las migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>Obtiene el generador de contexto de historial que se ha definido para ser utilizado con un determinado proveedor de base de datos.</summary>
      <returns>Generador de contexto de historial que se establece para el proveedor de bases de datos.</returns>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a obtener el generador.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>Obtiene el generador de SQL que se ha establecido para su uso con un proveedor de bases de datos determinado.</summary>
      <returns>Generador de SQL que se establece para el proveedor de bases de datos.</returns>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a obtener el generador de SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>Obtiene o establece el ensamblado que contiene migraciones basadas en código.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>Obtiene o establece el subdirectorio donde se almacenan las migraciones basadas en código.Tenga en cuenta que esta propiedad debe establecerse en una ruta de acceso relativa para un subdirectorio situado bajo la raíz del proyecto de Visual Studio; no se puede establecer en una ruta de acceso absoluta.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>Obtiene o establece el espacio de nombres que se usa para las migraciones basadas en código.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Agrega un nuevo generador para crear instancias <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> que se van a utilizar para un proveedor de bases de datos determinado.</summary>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a establecer el generador de SQL.</param>
      <param name="factory">Generador para crear instancias <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> para un determinado <see cref="T:System.Data.Common.DbConnection" /> y <see cref="T:System.String" /> que representa el esquema predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>Agrega un generador de SQL nuevo que se va a usar para un proveedor de bases de datos determinado.</summary>
      <param name="providerInvariantName">Nombre del proveedor de bases de datos para el que se va a establecer el generador de SQL.</param>
      <param name="migrationSqlGenerator">Generador de SQL que se va a usar.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>Obtiene o establece un valor para reemplazar la conexión de la base de datos que se va a migrar.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Configuración con relación al uso de las migraciones para un modelo determinado.</summary>
      <typeparam name="TContext">Contexto que representa el modelo al que se aplica esta configuración.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase DbMigrationsConfiguration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Determina si la configuración actual es igual al objeto especificado.</summary>
      <returns>Es true si la configuración actual es igual que el objeto especificado; de lo contrario, es false.</returns>
      <param name="obj">El objeto a comparar con la configuración actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Obtiene la función hash de esta instancia.</summary>
      <returns>La función hash de esta instancia.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Devuelve el tipo en tiempo de ejecución de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Crea una copia superficial del objeto actual.</summary>
      <returns>Copia superficial del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>Se ejecuta tras la actualización a la última migración con el fin de actualizar los datos de inicialización.</summary>
      <param name="context">Contexto que se va a usar para actualizar los datos de inicialización.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Devuelve la representación de cadena de esta configuración.</summary>
      <returns>La representación de cadena de esta configuración.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator se usa para aplicar migraciones existentes a una base de datos.DbMigrator se puede usar para actualizar y degradar a cualquier migración determinada.Para aplicar procesos de scaffolding a las migraciones en función de los cambios del modelo, use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Inicializa una nueva instancia de la clase DbMigrator.</summary>
      <param name="configuration">Configuración que se va a usar para el proceso de migración.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>Obtiene la configuración que se va a usar para el proceso de migración.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>Obtiene todas las migraciones que se han aplicado a la base de datos de destino.</summary>
      <returns>Lista de migraciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>Obtiene todas las migraciones que se definieron en el ensamblado de migraciones configurado.</summary>
      <returns>Lista de migraciones.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>Obtiene todas las migraciones que se definieron en el ensamblado, pero que no se han aplicado a la base de datos de destino.</summary>
      <returns>Lista de migraciones.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>Identificador de migración que representa el estado de la base de datos antes de la aplicación de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>Actualiza la base de datos de destino según una migración determinada.</summary>
      <param name="targetMigration">Migración según la cual se va a realizar la actualización o degradación.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>Conjunto de métodos de extensión para <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Agrega o actualiza entidades según una expresión de identificación personalizada cuando se llama a SaveChanges.Equivalente a una operación "upsert" a partir de terminología de base de datos.Este método puede resultar útil cuando se inicializan datos mediante migraciones.</summary>
      <param name="set">Conjunto al que pertenecen las entidades.</param>
      <param name="identifierExpression">Expresión que especifica las propiedades que se deben usar a la hora de determinar si se debe efectuar una operación de agregar o de actualización.</param>
      <param name="entities">Entidades que se van a agregar o actualizar.</param>
      <typeparam name="TEntity">Tipo de entidades que se van a agregar o actualizar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Agrega o actualiza entidades según la clave cuando se llama a SaveChanges.Equivalente a una operación "upsert" a partir de terminología de base de datos.Este método puede resultar útil cuando se inicializan datos mediante migraciones.</summary>
      <param name="set">Conjunto al que pertenecen las entidades.</param>
      <param name="entities">Entidades que se van a agregar o actualizar.</param>
      <typeparam name="TEntity">Tipo de entidades que se van a agregar o actualizar.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Clase auxiliar que se usa para configurar una columna.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos binarios.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="maxLength">Longitud máxima permitida de los datos de matriz.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="timestamp">Valor que indica si esta columna se debe configurar o no como marca de tiempo.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Boolean.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Byte.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos DateTime.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos DateTimeOffset.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Decimal.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="precision">Precisión numérica de la columna.</param>
      <param name="scale">Escala numérica de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Double.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Indica si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos de geografía.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos de geometría.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para esta instancia.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos GUID.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Integer.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Long.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Crea una copia superficial del <see cref="T:System.Object" /> actual.</summary>
      <returns>Copia superficial del <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Short.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="identity">Valor que indica si la base de datos va a generar o no valores para esta columna durante la operación de inserción.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Single.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos String.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="maxLength">Longitud máxima permitida para datos String.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="unicode">Valor que indica si la columna admite o no contenido Unicode.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Crea una definición de columna para almacenar datos Time.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de la columna que se acaba de construir.</returns>
      <param name="nullable">Valor que indica si la columna permite o no valores NULL.</param>
      <param name="precision">Precisión de la columna.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para esta columna.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para esta columna.</param>
      <param name="name">Nombre de la columna.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar en esta columna.</param>
      <param name="annotations">Anotaciones personalizadas normalmente del modelo de Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>Clase auxiliar que se usa para configurar un parámetro.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos binarios.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="maxLength">Longitud máxima permitida de los datos de matriz.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos booleanos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Byte.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos DateTime.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="precision">Precisión del parámetro.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos DateTimeOffset.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="precision">Precisión del parámetro.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Decimal.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="precision">Precisión numérica del parámetro.</param>
      <param name="scale">Escala numérica del parámetro.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Double.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos de geografía.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos de geometría.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode"></member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos GUID.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Integer.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Long.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>Crea una copia superficial del <see cref="T:System.Object" /> actual.</summary>
      <returns>Copia superficial del <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Short.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Single.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos String.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="maxLength">Longitud máxima permitida para datos String.</param>
      <param name="fixedLength">Valor que indica si todos los datos deben rellenarse hasta la longitud máxima.</param>
      <param name="unicode">Valor que indica si el parámetro admite o no contenido Unicode.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Crea una nueva definición de parámetro para pasar datos Time.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>Definición de parámetro que se acaba de construir.</returns>
      <param name="precision">Precisión del parámetro.</param>
      <param name="defaultValue">Valor constante que se va usar como valor predeterminado para este parámetro.</param>
      <param name="defaultValueSql">Expresión SQL que se usa como valor predeterminado para este parámetro.</param>
      <param name="name">Nombre del parámetro.</param>
      <param name="storeType">Tipo de datos específico del proveedor que se va a usar para este parámetro.</param>
      <param name="outParameter">Valor que indica si el parámetro es un parámetro de salida.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString"></member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Clase auxiliar que se usa para realizar una configuración más avanzada de una tabla que se crea a partir de una llamada a CreateTable en <see cref="T:System.Data.Entity.Migrations.DbMigration" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <typeparam name="TColumns">Tipo que representa las columnas de la tabla.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Inicializa una nueva instancia de la clase TableBuilder.</summary>
      <param name="createTableOperation">Operación de creación de tablas que se va seguir configurando.</param>
      <param name="migration">Migración de la tabla en la que se ha creado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Especifica una restricción de clave externa que se va a crear en la tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="principalTable">Nombre de la tabla a la que está destinada la restricción de clave externa.</param>
      <param name="dependentKeyExpression">Expresión lambda que representa las propiedades de la clave externa.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Si la clave externa se compone de varias propiedades, se debe especificar un tipo anónimo que incluya las propiedades.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">Valor que indica si la eliminación en cascada se debe configurar según la restricción de clave externa.</param>
      <param name="name">Nombre de esta restricción de clave externa.Si no se especifica ningún nombre, se calculará un nombre predeterminado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Obtiene el código hash del actual objeto.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Especifica un índice que se va a crear en la tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="indexExpression">Expresión lambda que representa la propiedad que se va a indexar.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Si se van a indizar varias propiedades, especifique un tipo anónimo que incluya las propiedades.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">Nombre del índice.</param>
      <param name="unique">Valor que indica si se trata de un índice único.</param>
      <param name="clustered">Valor que indica si se trata o no de un índice clúster.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Crea una copia superficial del <see cref="T:System.Object" /> actual.</summary>
      <returns>Copia superficial del <see cref="T:System.Object" /> actual.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>Especifica una clave principal para la tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>La misma, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyExpression">Expresión lambda que representa la propiedad que se va a utilizar como clave principal.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clave principal se compone de varias propiedades, se debe especificar un tipo anónimo que incluya las propiedades.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">Nombre de la clave principal.Si se obtiene un valor NULL, se generará un nombre predeterminado.</param>
      <param name="clustered">Valor que indica si se trata de una clave principal agrupada o no.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Devuelve una representación en forma de cadena del objeto actual.</summary>
      <returns>Representación en forma de cadena del objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Genera código C# para una migración basada en códigos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:byte[]" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Genera el archivo de código primario que puede ver y editar el usuario.</summary>
      <returns>Código generado.</returns>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para especificar un conjunto de nombres de columna que usan una expresión lambda.</summary>
      <param name="columns">Columnas para las que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para una <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Operación para la que se debe generar código.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para especificar la definición para un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Definición de columna para la que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Valor que indica si incluir el nombre de la columna en la definición.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para especificar la definición para un <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">La definición del parámetro para el cual se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Valor que indica si incluir el nombre de la columna en la definición.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTime" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Decimal" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Guid" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Int64" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Genera código para especificar el valor predeterminado para una columna de tipo de datos desconocidos.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Single" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.String" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operación para la que se va a generar el código.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.TimeSpan" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para el valor de anotación proporcionado, que puede ser NULL.El comportamiento predeterminado es usar un <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> si hay alguno registro; de lo contrario, llamar a ToString en el valor de anotación.</summary>
      <param name="name">Nombre de la anotación para la que se necesita código.</param>
      <param name="annotation">Valor de anotación que se va a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para volver a crear el diccionario especificado de anotaciones que se usará al pasar estas anotaciones como parámetro de una <see cref="T:System.Data.Entity.Migrations.DbMigration" />.llamada.</summary>
      <param name="annotations">Anotaciones que se van a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para volver a crear el diccionario especificado de anotaciones que se usará al pasar estas anotaciones como parámetro de una <see cref="T:System.Data.Entity.Migrations.DbMigration" />.llamada.</summary>
      <param name="annotations">Anotaciones que se van a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Cita un identificador mediante un escape apropiado para que se pueda almacenar en una cadena.</summary>
      <returns>Identificador citado.</returns>
      <param name="identifier">Identificador que se cita.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Quita cualquier carácter no válido del nombre de un artefacto de base de datos.</summary>
      <returns>Nombre habilitado.</returns>
      <param name="name">Nombre que se va a habilitar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtiene el nombre del tipo que se va a usar para una columna de un tipo de datos determinado.</summary>
      <returns>Nombre del tipo que se va a usar en una migración generada.</returns>
      <param name="primitiveTypeKind">Tipo de datos que se va a traducir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera el código de cierre para una clase que se inició con WriteClassStart.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Genera un espacio de nombres con instrucciones y definición de clase.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="base">Clase base para la clase generada.</param>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
      <param name="namespaces">Espacios de nombres para los que se van agregar directivas "using".Si es NULL, se usarán los espacios de nombre que se devuelven desde GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera una propiedad para devolver el modelo de origen o de destino en el archivo subyacente de código.</summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="value">Valor que se va a devolver.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Clase base para proveedores que generan código para migraciones basadas en código.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>Obtiene las instancias de <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> que se van a usar.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Genera el código que se debe agregar al proyecto de usuarios.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>Obtiene el espacio de nombres predeterminado que debe generarse como directivas "using" o "Imports" para todo el código que se genere.</summary>
      <returns>Lista ordenada de nombres de espacios de nombres.</returns>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Obtiene el espacio de nombres predeterminado que debe generarse como directivas "using" o "Imports" para controlar el código que generaron las operaciones especificadas.</summary>
      <returns>Lista ordenada de nombres de espacios de nombres.</returns>
      <param name="operations">Operaciones para las que se va generar código.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Realiza un proceso de scaffolding en migraciones basadas en código para aplicar los cambios de modelo pendientes a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Inicializa una nueva instancia de la clase MigrationScaffolder.</summary>
      <param name="migrationsConfiguration">Configuración que se va a usar para el proceso de scaffolding.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>Obtiene o establece el espacio de nombres que se usa en el código generado de la migración.De forma predeterminada, es igual que MigrationsNamespace en el objeto de configuración de migraciones que se pasó al constructor.Para proyectos de VB.NET, deberá actualizarse para que se tenga en cuenta el espacio de nombres raíz del proyecto.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes a la base de datos.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre de cadena de conexión que se va a usar para la migración scaffolded.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes a la base de datos.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre de cadena de conexión que se va a usar para la migración scaffolded.</param>
      <param name="ignoreChanges">Si se van a incluir o no cambios del modelo.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>Realiza un proceso de scaffolding en la migración basada en código inicial correspondiente a un inicializador de bases de datos que se ejecutó anteriormente.</summary>
      <returns>Migración scaffolded.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>Devuelve una migración basada en código que ha pasado por un proceso de scaffolding y que está lista para su escritura en un archivo.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>Obtiene o establece el código de la migración scaffolded que se debe almacenar en un archivo de código subyacente.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>Obtiene o establece el subdirectorio en el proyecto del usuario donde se debe guardar esta migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>Obtiene o establece si se volvió a aplicar el proceso de scaffolding a la migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>Obtiene o establecer el lenguaje de programación que se usa para esta migración.Se usa normalmente para la extensión del archivo del código generado.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>Obtiene o establece el identificador único para esta migración.Se usa normalmente para el nombre del archivo del código generado.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>Obtiene un diccionario de recursos de cadena que se van a agregar al archivo de recursos de la migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>Obtiene o establece el código de la migración scaffolded que puede editar el usuario.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Clase auxiliar que usan las herramientas de tiempo de diseño para ejecutar comandos relacionados con migraciones que deben interactuar con una aplicación que se está editando en Visual Studio.Dado que la aplicación se está editando, se deben cargar los ensamblados en un AppDomain diferente para garantizar que siempre está cargada la última versión.El archivo App/Web del proyecto de inicio también se copia con el fin de garantizar que se puede aplicar cualquier configuración.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Inicializa una nueva instancia de la clase ToolingFacade.</summary>
      <param name="migrationsAssemblyName">Nombre del ensamblado que contiene la configuración de las migraciones que se va a usar.</param>
      <param name="contextAssemblyName">Nombre del ensamblado que contiene el DbContext que se va a usar.</param>
      <param name="configurationTypeName">Nombre completo del espacio de nombres de la configuración de las migraciones que se va a usar.</param>
      <param name="workingDirectory">Directorio de trabajo que contiene los ensamblados compilados.</param>
      <param name="configurationFilePath">Ruta de acceso para el archivo de configuración del proyecto de inicio.</param>
      <param name="dataDirectory">Ruta de acceso del directorio de datos de la aplicación del proyecto de inicio.Por lo general, el directorio App_Data para aplicaciones web o el directorio de trabajo para archivos ejecutables.</param>
      <param name="connectionStringInfo">Conexión a la base de datos que se va a migrar.Si se obtiene NULL, se usará la conexión predeterminada para el contexto.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Libera los recursos usados por la instancia actual de la clase <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Libera todos los recursos usados por la fachada.</summary>
      <param name="disposing">Es true para liberar tanto los recursos administrados como los no administrados; es false para liberar únicamente los recursos no administrados.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Libera todos los recursos sin administrar que usa la fachada.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>Obtiene el nombre completo de un tipo que se deriva de <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Tipo de contexto encontrado.</returns>
      <param name="contextTypeName">Nombre del tipo de contexto.Si es NULL, se devolverá el único tipo de contexto encontrado en el ensamblado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Obtiene el nombre completo de todos los tipos que se derivan de <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Tipos de contexto encontrados.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Obtiene una lista de todas las migraciones que se han aplicado a la base de datos.</summary>
      <returns>Identificadores de las migraciones aplicadas.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Obtiene una lista de todas las migraciones que no se han aplicado a la base de datos.</summary>
      <returns>Identificadores de las migraciones pendientes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar información.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar información detallada.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Obtiene o establece una acción que se va a ejecutar para registrar advertencias.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Realiza un proceso de scaffolding en una migración basada en código para aplicar los cambios de modelo pendientes.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="migrationName">Nombre la migración generada.</param>
      <param name="language">Lenguaje de programación de la migración generada.</param>
      <param name="rootNamespace">Espacio de nombres raíz del proyecto al que se agregará la migración.</param>
      <param name="ignoreChanges">Si se van a incluir o no cambios del modelo.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Realiza un proceso de scaffolding en la migración basada en código inicial correspondiente a un inicializador de bases de datos que se ejecutó anteriormente.</summary>
      <returns>Migración scaffolded.</returns>
      <param name="language">Lenguaje de programación de la migración generada.</param>
      <param name="rootNamespace">Espacio de nombres raíz del proyecto al que se agregará la migración.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Genera un script SQL que se va a migrar entre dos migraciones.</summary>
      <returns>Script SQL generado.</returns>
      <param name="sourceMigration">Migración desde la que se va a realizar la migración.Si se obtiene NULL, se producirá un script para actualizar la base de datos actual.</param>
      <param name="targetMigration">Migración a la que se va a actualizar.Si se obtiene NULL, se producirá un script para actualizar a la última migración.</param>
      <param name="force">Valor que indica si es aceptable la pérdida de datos durante una migración automática.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Actualiza la base de datos a la migración especificada.</summary>
      <param name="targetMigration">Identificador de la migración a la que se va a migrar.Si se obtiene NULL, se actualizará la base de datos a la migración más reciente.</param>
      <param name="force">Valor que indica si es aceptable la pérdida de datos durante una migración automática.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Genera código VB.Net para una migración basada en código.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:byte[]" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Genera el archivo de código primario que puede ver y editar el usuario.</summary>
      <returns>Código generado.</returns>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para especificar un conjunto de nombres de columna que usan una expresión lambda.</summary>
      <param name="columns">Columnas para las que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para una <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Operación para la que se debe generar código.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para especificar la definición para un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Definición de columna para la que se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Valor que indica si incluir el nombre de la columna en la definición.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">La definición del modelo del parámetro para el cual se va a generar código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="emitName">Es true para incluir el nombre de la columna en la definición; de lo contrario, es false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTime" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Decimal" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Guid" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Int64" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>Genera código para especificar el valor predeterminado para una columna de tipo de datos desconocidos.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.Single" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.String" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="operations">Operaciones que va a realizar la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Genera el código subyacente del archivo con los metadatos de la migración.</summary>
      <returns>Código generado.</returns>
      <param name="migrationId">Identificador único de la migración.</param>
      <param name="sourceModel">Modelo de origen que se va a almacenar en los metadatos de la migración.</param>
      <param name="targetModel">Modelo de destino que se va a almacenar en los metadatos de la migración.</param>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Genera código para especificar el valor predeterminado para una columna <see cref="T:System.TimeSpan" />.</summary>
      <returns>Código que representa el valor predeterminado.</returns>
      <param name="defaultValue">Valor que se usará como predeterminado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para el valor de anotación proporcionado, que puede ser NULL.El comportamiento predeterminado es usar un <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> si hay alguno registro; de lo contrario, llamar a ToString en el valor de anotación.</summary>
      <param name="name">Nombre de la anotación para la que se necesita código.</param>
      <param name="annotation">Valor de anotación que se va a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para volver a crear el diccionario especificado de anotaciones que se usará al pasar estas anotaciones como parámetro de una <see cref="T:System.Data.Entity.Migrations.DbMigration" />.llamada.</summary>
      <param name="annotations">Anotaciones que se van a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para volver a crear el diccionario especificado de anotaciones que se usará al pasar estas anotaciones como parámetro de una <see cref="T:System.Data.Entity.Migrations.DbMigration" />.llamada.</summary>
      <param name="annotations">Anotaciones que se van a generar.</param>
      <param name="writer">Sistema de escritura en el que se debe escribir el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera código para realizar una <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> como parte de una <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Operación para la que se va a generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>Cita un identificador mediante un escape apropiado para que se pueda almacenar en una cadena.</summary>
      <returns>Identificador citado.</returns>
      <param name="identifier">Identificador que se cita.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Quita cualquier carácter no válido del nombre de un artefacto de base de datos.</summary>
      <returns>Nombre habilitado.</returns>
      <param name="name">Nombre que se va a habilitar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtiene el nombre del tipo que se va a usar para una columna de un tipo de datos determinado.</summary>
      <returns>Nombre del tipo que se va a usar en una migración generada.</returns>
      <param name="primitiveTypeKind">Tipo de datos que se va a traducir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera el código de cierre para una clase que se inició con WriteClassStart.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Genera un espacio de nombres con instrucciones y definición de clase.</summary>
      <param name="namespace">Espacio de nombres en el que se debe generar el código.</param>
      <param name="className">Nombre de la clase que se debe generar.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
      <param name="base">Clase base para la clase generada.</param>
      <param name="designer">Valor que indica si esta clase se está generando para un archivo de código subyacente.</param>
      <param name="namespaces">Espacios de nombres para los que se van a agregar directivas Imports.Si es NULL, se usarán los espacios de nombre que se devuelven desde GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Genera una propiedad para devolver el modelo de origen o de destino en el archivo subyacente de código.</summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="value">Valor que se va a devolver.</param>
      <param name="writer">Escritor de texto al que se va agregar el código generado.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>Esta clase la usan las migraciones Code First para leer y escribir historiales de migración desde la base de datos.Para personalizar la definición de la tabla de historial de migraciones, puede derivar de esta clase e invalidar OnModelCreating.Las instancias derivadas se pueden registrar según la configuración de las migraciones mediante <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> o de forma global con <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>Inicializa una nueva instancia de la clase HistoryContext.Si está creando un contexto de historial derivado, generalmente expondrá un constructor que acepte los mismos parámetros y los transmita a este constructor base.</summary>
      <param name="existingConnection">Conexión existente que se utiliza para el nuevo contexto.</param>
      <param name="defaultSchema">El esquema predeterminado del modelo que se va a migrar.Este esquema se usará para la tabla de historial de las migraciones a menos que se configure otro esquema en OnModelCreating.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>Obtiene la clave que se usa para buscar un modelo que se generó previamente para este contexto.Se usa para evitar procesar OnModelCreating y calcular el modelo cada vez que se crea una instancia de contexto nueva.De forma predeterminada esta propiedad devuelve el esquema predeterminado.En la mayoría de los casos no necesitará invalidar esta propiedad.Sin embargo, si la implementación de OnModelCreating contiene lógica condicional que hace que se cree un modelo diferente para el mismo proveedor de base de datos y esquema predeterminado, debe invalidar esta propiedad y calcular una clave adecuada.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>Obtiene el esquema predeterminado del modelo que se va a migrar.Este esquema se usará para la tabla de historial de las migraciones a menos que se configure otro esquema en OnModelCreating.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>Nombre predeterminado usado para la tabla de historial de las migraciones.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>Obtiene o establece un <see cref="T:System.Data.Entity.DbSet`1" /> que se puede usar para leer y escribir instancias de <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Aplica la configuración predeterminada para la tabla de historial de las migraciones.Si invalida este método, se recomienda llamar a esta implementación base antes de aplicar la configuración personalizada.</summary>
      <param name="modelBuilder">Generador que define el modelo para el contexto que se está creando.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>Esta clase la usan las migraciones Code First para leer y escribir historiales de migración desde la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>Obtiene o establece una clave que representa el contexto al que se aplica la fila.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>Obtiene o establece el identificador de la migración que representa esta fila.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>Obtiene o establece el estado del modelo tras la aplicación de esta migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>Obtiene o establece la versión de Entity Framework que creó esta entrada.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Representa un error que se produce cuando una migración automática resulta en pérdida de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>Inicializa una nueva instancia de la clase AutomaticDataLossException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase AutomaticDataLossException.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase MigrationsException.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual o una referencia null (Nothing en Visual Basic) si no se especifica ninguna excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Representa un error que se produce cuando hay cambios pendientes en el modelo tras aplicar la última migración y cuando está deshabilitada la migración automática.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>Inicializa una nueva instancia de la clase AutomaticMigrationsDisabledException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase AutomaticMigrationsDisabledException.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase MigrationsException.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual o una referencia null (Nothing en Visual Basic) si no se especifica ninguna excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>La implementa <see cref="T:System.Data.Entity.Migrations.DbMigration" /> de forma explícita para evitar que ciertos miembros aparezcan en IntelliSense en las migraciones a las que se aplica scaffolding.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Agrega una <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> personalizada a la migración.Se recomienda a los implementadores de operaciones personalizadas que creen métodos de extensión en <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> que proporcionen una API estilo fluido para agregar nuevas operaciones.</summary>
      <param name="migrationOperation">Operación que se va a agregar.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Proporciona metadatos adicionales sobre una migración basada en código.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>Obtiene el identificador único para la migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>Obtiene el estado del modelo antes de ejecutar esta migración.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>Obtiene el estado del modelo tras ejecutar esta migración.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Representa los errores que se producen en la canalización de migraciones Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>Inicializa una nueva instancia de la clase MigrationsException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase MigrationsException con datos serializados.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />, que contiene los datos del objeto serializado sobre la excepción que se está produciendo.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase MigrationsException.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase MigrationsException.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual o una referencia null (Nothing en Visual Basic) si no se especifica ninguna excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Clase base para registradores que se pueden usar en procesos de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>Registra un mensaje informativo.</summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>Registra cierta información adicional que solo se debería presentar al usuario si se solicitan resultados detallados.</summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>Registra una advertencia que el usuario debe conocer.</summary>
      <param name="message">Mensaje que se va a registrar.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>Se produce cuando no puede ejecutarse una operación porque hay migraciones existentes que no se han aplicado a la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>Inicializa una nueva instancia de la clase MigrationsPendingException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase MigrationsPendingException.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase MigrationsPendingException.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual o una referencia null (Nothing en Visual Basic) si no se especifica ninguna excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Clase base para los decoradores que encapsulan el <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> central</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Inicializa una nueva instancia de la clase MigratorBase.</summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>Obtiene la configuración que se va a usar para el proceso de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>Obtiene una lista de las migraciones que se han aplicado a la base de datos.</summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>Obtiene una lista de las migraciones que se definieron en el ensamblado.</summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>Obtiene una lista de las migraciones pendientes que no se han aplicado a la base de datos.</summary>
      <returns>Lista de identificadores de migración</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>Actualiza la base de datos de destino según la migración más reciente.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>Actualiza la base de datos de destino según una migración determinada.</summary>
      <param name="targetMigration">Migración según la cual se va a realizar la actualización o degradación.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Decorador para proporcionar registros durante las operaciones de migraciones.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>Inicializa una nueva instancia de la clase MigratorLoggingDecorator.</summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
      <param name="logger">Registrador donde se van a escribir mensajes.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Decorador para producir un script SQL en lugar de aplicar cambios a la base de datos.Si se usa este decorador para encapsular <see cref="T:System.Data.Entity.Migrations.DbMigrator" />, se evitará que <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> aplique cambios a la base de datos de destino.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Inicializa una nueva instancia de la clase MigratorScriptingDecorator.</summary>
      <param name="innerMigrator">Migrador que está encapsulando este decorador.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Genera un script para actualizar la base de datos.</summary>
      <returns>Script SQL generado.</returns>
      <param name="sourceMigration">Migración desde la que se va a realizar la migración.Si se obtiene NULL, se producirá un script para actualizar la base de datos actual.</param>
      <param name="targetMigration">Migración a la que se va a actualizar.Si se obtiene NULL, se producirá un script para actualizar a la última migración.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Representa una columna que se va a agregar a una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>Inicializa una nueva instancia de la clase AddColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que se debería agregar la columna.</param>
      <param name="column">Detalles de la columna que se va a agregar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>Obtiene los detalles de la columna que se va a agregar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>Obtiene una operación que representa la operación de reversión de la acción de agregar la columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es o no destructivo.</summary>
      <returns>Es true si el cambio es destructivo; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>Obtiene el nombre de la tabla a la que se debería agregar la columna.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Representa una restricción de clave externa que se agrega a una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase AddForeignKeyOperation.Las propiedades PrincipalTable, PrincipalColumns, DependentTable y DependentColumns también deberían rellenarse.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>Obtiene o establece un valor que indica si la eliminación en cascada se debe configurar según la restricción de clave externa.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>Obtiene una operación para crear un índice en las columnas de clave externa.</summary>
      <returns>Operación para agregar el índice.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>Obtiene una operación para quitar la restricción de clave externa nueva.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Obtiene o define un valor que indica si este cambio conllevará o no la pérdida de datos.</summary>
      <returns>Es true si el cambio puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>Nombres de las columnas a las que debería estar destinada la restricción de clave externa.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Representa la operación de agregar una clave principal a una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase AddPrimaryKeyOperation.Las propiedades Table y Columns también se deben rellenar.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>Obtiene una operación para quitar la clave principal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>Obtiene o establece si se trata de una clave principal agrupada.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Representa la modificación de una columna existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase AlterColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="column">Detalles de las modificaciones que se deben aplicar a la columna.</param>
      <param name="isDestructiveChange">Valor que indica si este cambio provocará la pérdida de datos.</param>
      <param name="inverse">Operación para revertir esta modificación de la columna.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>Inicializa una nueva instancia de la clase AlterColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="column">Detalles de las modificaciones que se deben aplicar a la columna.</param>
      <param name="isDestructiveChange">Valor que indica si este cambio provocará la pérdida de datos.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>Obtiene una nueva definición para la columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>Obtiene una operación que representa la operación de reversión de la modificación.No se puede calcular automáticamente el valor inverso; si no se facilitó al constructor, esta propiedad devolverá NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si este cambio conllevará o no la pérdida de datos.</summary>
      <returns>Es true si el cambio puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>Obtiene el nombre de la tabla a la que pertenece la columna.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>Representa la modificación de un procedimiento almacenado existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.</param>
      <param name="bodySql">Cuerpo del procedimiento almacenado expresado en SQL.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>Obtiene una operación que revertirá esta operación.Siempre devuelve una <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>Representa los cambios realizados en anotaciones personalizadas de una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Inicializa una nueva instancia de la clase AlterTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla en la que las anotaciones han cambiado.</param>
      <param name="annotations">Anotaciones personalizadas de la tabla que han cambiado.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>Obtiene las anotaciones personalizadas que han cambiado en la tabla.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>Obtiene las columnas que se van a incluir en la tabla para la que las anotaciones han cambiado.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>Obtiene una operación que es la contraria de esta, de forma que las anotaciones volverán a cambiarse a como eran antes de que se aplicara esta operación.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange"></member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>Obtiene el nombre de la tabla en la que las anotaciones han cambiado.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Representa información sobre una columna.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Inicializa una nueva instancia de la clase ColumnModel.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="type">Tipo de datos para esta columna.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Inicializa una nueva instancia de la clase ColumnModel.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="type">Tipo de datos para esta columna.</param>
      <param name="typeUsage">Detalles adicionales sobre el tipo de datos.Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>Obtiene o establece las anotaciones personalizadas que han cambiado en la columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>Obtiene el valor predeterminado para el tipo CLR correspondiente al tipo de la base de datos de esta columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>Obtiene el tipo CLR correspondiente al tipo de la base de datos de esta columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>Obtiene o establece un valor que indica si los valores para esta columna los va a generar la base de datos mediante el modelo de identidad.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>Determina si esta columna es de un tipo de datos más restringido que otra columna.Se usa para determinar si al alterar la definición de columna facilitada para esta definición, se perderán datos.</summary>
      <returns>true si esta columna es de un tipo de datos más restringido.</returns>
      <param name="column">Columna con la que se va a comparar.</param>
      <param name="providerManifest">Detalles del proveedor de bases de datos que se están usando.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>Obtiene o establece un valor que indica si esta columna puede almacenar valores NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>Obtiene o define un valor que indica si este modelo de propiedad debe configurarse como marca de tiempo.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Representa la creación de un índice de base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase CreateIndexOperation.Las propiedades Table y Columns también se deben rellenar.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>Obtiene una operación para quitar este índice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>Obtiene o establece si se trata de un índice clúster.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Obtiene o define un valor que indica si este cambio conllevará o no la pérdida de datos.</summary>
      <returns>Es true si el cambio puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>Obtiene o establece un valor que indica si se trata de un índice único.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>Operación de migración para agregar un nuevo procedimiento almacenado a la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.</param>
      <param name="bodySql">Cuerpo del procedimiento almacenado expresado en SQL.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>Obtiene una operación para quitar el procedimiento almacenado.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Representa la creación de una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Inicializa una nueva instancia de la clase CreateTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a crear.</param>
      <param name="annotations">Anotaciones personalizadas que existen en la tabla que se va a crear.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase CreateTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a crear.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>Obtiene anotaciones personalizadas que existen en la tabla que se va a crear.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>Obtiene las columnas que se van a incluir en la tabla nueva.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>Obtiene una operación para quitar la tabla.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>Obtiene el nombre de la tabla cuyo nombre se va a crear.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>Obtiene o estable la clave principal de la tabla nueva.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Representa una columna que se va a quitar de una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la columna que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la columna que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla de la que debería quitar la columna.</param>
      <param name="name">Nombre de la columna que se va a quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>Obtiene una operación que representa la operación de reversión de la acción de quitar la columna.No se puede calcular automáticamente el valor inverso; si no se facilitó al constructor, esta propiedad devolverá NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>Obtiene el nombre de la columna que se va a quitar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>Obtiene anotaciones personalizadas que existen en la columna que se va a quitar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>Obtiene el nombre de la tabla de la que se debería quitar la columna.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Representa una restricción de clave externa que se quita de una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropForeignKeyOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="inverse">Operación que representa la reversión de la operación de quitar la restricción de clave externa.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropForeignKeyOperation.Las propiedades PrincipalTable, DependentTable y DependentColumns también deberían rellenarse.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>Obtiene una operación para quitar el índice asociado en las columnas de clave externa.</summary>
      <returns>Operación para quitar el índice.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>Obtiene una operación que representa la reversión de la operación de quitar la restricción de clave externa.No se puede calcular automáticamente el valor inverso; si no se facilitó al constructor, esta propiedad devolverá NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si un cambio es o no destructivo.</summary>
      <returns>Es true si un cambio es destructivo; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Representa la operación de quitar un índice existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropIndexOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar el índice.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropIndexOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>Obtiene una operación que representa la operación de reversión de la acción de quitar el índice.No se puede calcular automáticamente el valor inverso; si no se facilitó al constructor, esta propiedad devolverá NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Representa la operación de quitar una clave principal de una tabla.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropPrimaryKeyOperation.Las propiedades Table y Columns también se deben rellenar.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>Se utiliza al alterar la tabla del historial de migraciones, de modo que sea posible reconstruir la tabla en lugar de quitar y agregar la clave principal.</summary>
      <returns>La operación de creación de tabla para la tabla de historial de migraciones.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>Obtiene una operación para agregar la clave principal.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>Quita un procedimiento almacenado de la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado que se va a quitar.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>Obtiene una operación que revertirá esta operación.Siempre devuelve una <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.Siempre devuelve false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>Obtiene el nombre del procedimiento almacenado que se va a quitar.</summary>
      <returns>Nombre del procedimiento almacenado que se va a quitar.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Representa la operación de quitar una tabla existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="removedColumnAnnotations">Anotaciones personalizadas que existen en columnas de la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar la tabla.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="removedAnnotations">Anotaciones personalizadas que existen en la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="removedColumnAnnotations">Anotaciones personalizadas que existen en columnas de la tabla que se va a quitar.Puede ser NULL o estar vacío.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="inverse">Operación que representa la operación de reversión de la acción de quitar la tabla.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase DropTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a quitar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>Obtiene una operación que representa la operación de reversión de la acción de quitar la tabla.No se puede calcular automáticamente el valor inverso; si no se facilitó al constructor, esta propiedad devolverá NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si la operación puede conllevar o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>Obtiene el nombre de la tabla cuyo nombre se va a quitar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>Obtiene anotaciones personalizadas que existen en la tabla que se va a quitar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>Obtiene anotaciones personalizadas que existen en columnas de la tabla que se va a quitar.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Clase base para cambios que afectan a las restricciones de clave externa.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase ForeignKeyOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>Nombres de las columnas de clave externa.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>Obtiene o establece el nombre de la tabla donde se encuentran las columnas de clave externa.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>Obtiene un valor que indica si se ha proporcionado un nombre específico para esta restricción de clave externa.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>Obtiene o establece el nombre de esta restricción de clave externa.Si no se especifica ningún nombre, se calculará un nombre predeterminado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>Obtiene o establece el nombre de la tabla a la que se destina la restricción de clave externa.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Operación que representa los cambios de DML a la tabla de historial de las migraciones.La tabla del historial de migraciones se usa para almacenar un registro de las migraciones que se han aplicado a la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>Inicializa una nueva instancia de la clase HistoryOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="commandTrees">Una secuencia de árboles de comandos que representan las operaciones que se aplican a la tabla de historial.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>Secuencia de comandos que representan las operaciones que se aplican a la tabla de historial.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Clase base común para operaciones relativas a los índices.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase IndexOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Crea un nombre de índice predeterminado basado en los nombres de columna proporcionados.</summary>
      <returns>Nombre de índice predeterminado.</returns>
      <param name="columns">Nombres de columna usados para crear un nombre de índice predeterminado.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>Obtiene las columnas que se van a indizar.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>Obtiene un valor que indica si se ha proporcionado un nombre específico para este índice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>Obtiene o establece el nombre de este índice.Si no se especifica ningún nombre, se calculará un nombre predeterminado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>Obtiene o establece la tabla a la que pertenece el índice.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Representa una operación para modificar un esquema de base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase MigrationOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>Obtiene argumentos adicionales que pueden procesar proveedores.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>Obtiene una operación que revertirá esta operación.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>Representa mover un procedimiento almacenado a un esquema nuevo de la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado que se va a mover.</param>
      <param name="newSchema">Nuevo esquema del procedimiento almacenado.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>Obtiene una operación que revertirá esta operación.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.Siempre devuelve false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>Obtiene el nombre del procedimiento almacenado que se va a mover.</summary>
      <returns>Nombre del procedimiento almacenado que se va a mover.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>Obtiene el nuevo esquema del procedimiento almacenado.</summary>
      <returns>Nuevo esquema del procedimiento almacenado.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Representa la operación de mover una tabla de un esquema a otro.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase MoveTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla que se va a mover.</param>
      <param name="newSchema">Nombre del esquema al que se va a mover la tabla.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>Se utiliza al alterar la tabla del historial de migraciones, de modo que sea posible mover los datos a una tabla nueva.</summary>
      <returns>La clave del contexto del modelo.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>Se utiliza al alterar la tabla del historial de migraciones, de modo que sea posible reconstruir la tabla en lugar de quitar y agregar la clave principal.</summary>
      <returns>La operación de creación de tabla para la tabla de historial de migraciones.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>Obtiene una operación que mueve la tabla a su esquema original.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si este cambio conllevará o no la pérdida de datos.</summary>
      <returns>Es true si el cambio puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>Obtiene un valor que indica si es o no una tabla del sistema.</summary>
      <returns>Es true si la tabla es una tabla del sistema; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>Obtiene el nombre de la tabla cuyo nombre se va a mover.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>Obtiene el nombre del esquema al que se va a mover la tabla.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>Representa una operación de migración que no se puede realizar, posiblemente porque no la admite el proveedor de la base de datos de destino.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.Siempre devuelve false.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>Representa información sobre un parámetro.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Inicializa una nueva instancia de la clase ParameterModel.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="type">Tipo de datos para este parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Inicializa una nueva instancia de la clase ParameterModel.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="type">Tipo de datos para este parámetro.</param>
      <param name="typeUsage">Detalles adicionales sobre el tipo de datos.Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>Obtiene o establece un valor que indica si esta instancia es un parámetro de salida.</summary>
      <returns>Es true si esta instancia es un parámetro de salida; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Clase base común para representar operaciones relativas a las claves principales.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase PrimaryKeyOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>Devuelve el nombre predeterminado de la clave principal.</summary>
      <returns>Nombre de la clave principal predeterminada.</returns>
      <param name="table">Nombre de la tabla de destino.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>Obtiene las columnas que constituyen la clave principal.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>Obtiene un valor que indica si se ha proporcionado un nombre específico para esta clave principal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>Obtiene o establece el nombre de esta clave principal.Si no se especifica ningún nombre, se calculará un nombre predeterminado.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>Obtiene o establece el nombre de la tabla que contiene la clave principal.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>Operación de migración que afecta a procedimientos almacenados.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado.</param>
      <param name="bodySql">Cuerpo del procedimiento almacenado expresado en SQL.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>Obtiene el cuerpo del procedimiento almacenado expresado en SQL.</summary>
      <returns>Cuerpo del procedimiento almacenado expresado en SQL.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.Siempre devuelve false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>Obtiene el nombre del procedimiento almacenado.</summary>
      <returns>Nombre del procedimiento almacenado.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>Obtiene los parámetros del procedimiento almacenado.</summary>
      <returns>Parámetros del procedimiento almacenado.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>Representa información sobre una propiedad de una entidad.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Inicializa una nueva instancia de la clase PropertyModel.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="type">Tipo de datos para este modelo de propiedad.</param>
      <param name="typeUsage">Detalles adicionales sobre el tipo de datos.Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>Obtiene o establece un valor constante que se va usar como valor predeterminado para este modelo de propiedad.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>Obtiene o establece una expresión SQL que se usa como valor predeterminado para este modelo de propiedad.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>Obtiene o establece un valor que indica si este modelo de propiedad tiene una longitud fija.Solo válido para tipos de datos de matriz.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>Obtiene o establece un valor que indica si este modelo de propiedad admite caracteres Unicode.Solo válido para tipos de datos textuales.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>Obtiene o establece la longitud máxima para este modelo de propiedad.Solo válido para tipos de datos de matriz.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>Obtiene o establece el nombre del modelo de propiedad.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>Obtiene o establece la precisión de este modelo de propiedad.Solo válido para tipos de datos decimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>Obtiene o establece la escala de este modelo de propiedad.Solo válido para tipos de datos decimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>Obtiene o establece un tipo de datos específico del proveedor que se va a usar para este modelo de propiedad.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>Obtiene el tipo de datos para este modelo de propiedad.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>Obtiene detalles adicionales sobre el tipo de datos de este modelo de propiedad.Incluye detalles como, por ejemplo, la longitud máxima, la capacidad de aceptar valores NULL, etc.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Representa el cambio de nombre de una columna existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase RenameColumnOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="name">Nombre de la columna cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la columna.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>Obtiene una operación que revierte el cambio de nombre.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>Obtiene el nombre de la columna cuyo nombre se va a cambiar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>Obtiene un nuevo nombre para la columna.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>Obtiene el nombre de la tabla a la que pertenece la columna.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>Representa el cambio de nombre de un índice existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase RenameIndexOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="table">Nombre de la tabla a la que pertenece el índice.</param>
      <param name="name">Nombre del índice cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre del índice.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>Obtiene una operación que revierte el cambio de nombre.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange"></member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>Obtiene el nombre del índice cuyo nombre se va a cambiar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>Obtiene un nuevo nombre del índice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>Obtiene el nombre de la tabla a la que pertenece el índice.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>Representa el cambio de nombre de un procedimiento almacenado de la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre del procedimiento almacenado cuyo nombre se va a cambiar.</param>
      <param name="newName">El nuevo nombre del procedimiento almacenado.</param>
      <param name="anonymousArguments">Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>Obtiene una operación que revertirá esta operación.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación va a originar la pérdida de datos.Siempre devuelve false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>Obtiene el nombre del procedimiento almacenado cuyo nombre se va a cambiar.</summary>
      <returns>Nombre del procedimiento almacenado cuyo nombre se va a cambiar.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>Obtiene el nuevo nombre del procedimiento almacenado.</summary>
      <returns>El nuevo nombre del procedimiento almacenado.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>Representa el cambio de nombre de una tabla existente.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase RenameTableOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="name">Nombre de la tabla cuyo nombre se va a cambiar.</param>
      <param name="newName">Nuevo nombre para la tabla.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>Obtiene una operación que revierte el cambio de nombre.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si el cambio es o no destructivo.</summary>
      <returns>Es true si el cambio es destructivo; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>Obtiene el nombre de la tabla cuyo nombre se va a cambiar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>Obtiene un nuevo nombre para la tabla.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Representa una instrucción SQL específica de un proveedor que se va a ejecutar directamente con respecto a la base de datos de destino.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>Inicializa una nueva instancia de la clase SqlOperation.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="sql">SQL que se va a ejecutar.</param>
      <param name="anonymousArguments">Argumentos adicionales que pueden procesar proveedores.Utilice sintaxis de tipo anónimo para especificar argumentos, como por ejemplo 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si esta operación conllevará o no la pérdida de datos.</summary>
      <returns>Es true si la operación puede conllevar la pérdida de datos; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>Obtiene el SQL que se va a ejecutar.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>Obtiene o establece un valor que indica si esta instrucción debe realizarse fuera del ámbito de la transacción que se usa para llevar a cabo el proceso de migración entre transacciones.Si se establece en true, esta operación no se revertirá si se produce un error en el proceso de migración.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>Se usa cuando se incluye en un script una operación de actualización de base de datos para almacenar las operaciones que se habrían realizado en la base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" />.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="historyQueryTrees">Consultas que se usan para determinar si es necesario aplicar esta migración a la base de datos.Se usa para generar un script SQL idempotente que se puede ejecutar en una base de datos en cualquier versión.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Agrega una migración a esta operación de actualización de base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <param name="migrationId">Identificador de la migración.</param>
      <param name="operations">Operaciones individuales aplicadas por la migración.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>Consultas que se usan para determinar si es necesario aplicar esta migración a la base de datos.Se usa para generar un script SQL idempotente que se puede ejecutar en una base de datos en cualquier versión.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>Obtiene un valor que indica si alguna de las operaciones puede producir pérdida de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>Obtiene las migraciones aplicadas durante la operación de actualización de base de datos.</summary>
      <returns>Migraciones aplicadas durante la operación de actualización de base de datos.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>Representa una migración que se va a aplicar a la base de datos.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>Obtiene el identificador de la migración.</summary>
      <returns>Identificador de la migración.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>Obtiene las operaciones individuales aplicadas por esta migración.</summary>
      <returns>Operaciones individuales aplicadas por esta migración.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>Clase base común para proveedores que convierten operaciones de migración independientes del proveedor en comandos SQL específicos de proveedores de bases de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>Genera el uso del tipo de almacén para el <paramref name="storeTypeName" /> especificado usando las facetas del <paramref name="propertyModel" /> indicado.</summary>
      <returns>TypeUsage específico del almacén</returns>
      <param name="storeTypeName">Nombre del tipo de almacén.</param>
      <param name="propertyModel">Propiedad de destino.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Convierte un conjunto de operaciones de migración en SQL específico de proveedores de bases de datos.</summary>
      <returns>Lista de instrucciones SQL que se van a ejecutar para realizar las operaciones de migración.</returns>
      <param name="migrationOperations">Operaciones que se van a convertir.</param>
      <param name="providerManifestToken">Token que representa la versión de la base de datos de destino.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>Genera un cuerpo de SQL para un procedimiento almacenado.</summary>
      <returns>El cuerpo de SQL para el procedimiento almacenado.</returns>
      <param name="commandTrees">Los árboles de comandos representan comandos para una operación de inserción, actualización o borrado.</param>
      <param name="rowsAffectedParameter">Nombre del parámetro afectado por las filas.</param>
      <param name="providerManifestToken">Token del manifiesto del proveedor.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>Obtiene o establece el manifiesto del proveedor.</summary>
      <returns>Manifiesto del proveedor.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Representa una operación de migración que se ha traducido a una instrucción SQL.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>Obtiene o define el terminador de lote del proveedor de base de datos.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
      <returns>El terminador de lote del proveedor de base de datos.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>Obtiene o establece el SQL que se va a ejecutar para realizar esta operación de migración.Las API de migraciones de Entity Framework no están designadas para aceptar datos proporcionados por fuentes que no sean de confianza (como el usuario final de una aplicación).Si se aceptan los datos de tales fuentes se deberían validar antes de pasarlos a estas API para protegerse contra ataques de inyección de SQL, etc.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>Obtiene o establece un valor que indica si esta instrucción debe realizarse fuera del ámbito de la transacción que se usa para llevar a cabo el proceso de migración entre transacciones.Si se establece en true, esta operación no se revertirá si se produce un error en el proceso de migración.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>Igual que <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" />, aunque funciona en confianza parcial y agrega almacenamiento en caché explícito de la cadena de sangrado generada, y además reconoce la escritura de una cadena que contenga solamente \r\n or \n como línea de escritura para asegurar de que el sangrado de la línea siguiente sea correcto.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Inicializa una nueva instancia de la clase IndentedTextWriter usando el escritor de texto especificado y la cadena de tabulación predeterminada.Tenga en cuenta que el sistema de escritura que se pasa a este constructor debe usar el <see cref="T:System.Globalization.CultureInfo" /> especificado por la propiedad <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a usar para los resultados.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Inicializa una nueva instancia de la clase IndentedTextWriter usando el escritor de texto especificado y la cadena de tabulación.Tenga en cuenta que el sistema de escritura que se pasa a este constructor debe usar el <see cref="T:System.Globalization.CultureInfo" /> especificado por la propiedad <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> que se va a usar para los resultados.</param>
      <param name="tabString">Cadena de tabulación que se va a usar para aplicar sangrías.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>Cierra el documento en el que se está escribiendo.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>Especifica la cultura que utilizará el TextWriter subyacente.Esta propiedad estática es de solo lectura.Tenga en cuenta que cualquier sistema de escritura que se pase a uno de los constructores de <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> debe usar la misma cultura.La cultura es <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>Crea una cadena que representa el nivel actual de sangrado de la nueva línea.</summary>
      <returns>Una cadena vacía, o bien una cadena que contiene el nivel de sangrado correspondiente a la cadena de tabulación especificada.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>Especifica la cadena de tabulación predeterminada.Este campo es constante.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>Obtiene la codificación del escritor de texto que se va a usar.</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> que indica la codificación del escritor de texto que se va a usar.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>Vacía la secuencia.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>Obtiene o establece el número de espacios para la sangría.</summary>
      <returns>Número de espacios que se van a sangrar.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>Obtiene el <see cref="T:System.IO.TextWriter" /> que se va a usar.</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" /> que se va a usar.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>Obtiene o establece el carácter de nueva línea que se va a usar.</summary>
      <returns>Carácter de nueva línea que se va a usar.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>Proporciona la cadena de tabulación una vez para cada nivel de tabulación de acuerdo con la propiedad <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>Escribe la representación de texto de un valor de tipo Boolean en la secuencia de texto.</summary>
      <param name="value">Valor de tipo Boolean que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>Escribe un carácter en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>Escribe una matriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Índice de inicio del búfer.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Escribe la representación textual de un Double en la secuencia de texto.</summary>
      <param name="value">Double que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>Escribe la representación textual de un entero en la secuencia de texto.</summary>
      <param name="value">Entero que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>Escribe la representación textual de un entero de 8 bytes en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>Escribe la representación textual de un objeto en la secuencia de texto.</summary>
      <param name="value">Objeto que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Escribe la representación textual de un Single en la secuencia de texto.</summary>
      <param name="value">Single que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>Escribe la cadena especificada en la secuencia de texto.</summary>
      <param name="value">Cadena que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Escribe una cadena con formato usando la misma semántica especificada.</summary>
      <param name="format">Cadena de formato.</param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato usando la misma semántica especificada.</summary>
      <param name="format">Cadena con formato que se va a usar.</param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato.</param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Escribe una cadena con formato usando la misma semántica especificada.</summary>
      <param name="format">Cadena con formato que se va a usar.</param>
      <param name="arg">Matriz de argumentos que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>Escribe un terminador de línea.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Escribe la representación de texto de un Boolean seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Boolean que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Escribe un carácter seguido de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Carácter que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Escribe una matriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Escribe una submatriz de caracteres seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="buffer">Matriz de caracteres de la que se escriben los datos.</param>
      <param name="index">Índice de inicio del búfer.</param>
      <param name="count">Número de caracteres que se van a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Escribe la representación de texto de un Double seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Double que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Escribe la representación de texto de un entero seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Escribe la representación de texto de un entero de 8 bytes seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Entero de 8 bytes que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Escribe la representación de texto de un objeto seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Objeto que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Escribe la representación de texto de un Single seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Single que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>Escribe la cadena especificada seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">Cadena que se va a escribir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó.</summary>
      <param name="format">Cadena de formato.</param>
      <param name="arg0">Objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó.</summary>
      <param name="format">Cadena con formato que se va a usar.</param>
      <param name="arg0">Primer objeto que se va a escribir en la cadena con formato.</param>
      <param name="arg1">Segundo objeto que se va a escribir en la cadena con formato.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Escribe una cadena con formato seguida de un terminador de línea, usando la misma semántica que se especificó.</summary>
      <param name="format">Cadena con formato que se va a usar.</param>
      <param name="arg">Matriz de argumentos que se va a devolver.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Escribe la representación de texto de un UInt32 seguida de un terminador de línea en la secuencia de texto.</summary>
      <param name="value">UInt32 que se va a obtener como resultado.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Escribe la cadena especificada en una línea sin tabulaciones.</summary>
      <param name="value">Cadena que se va a escribir.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo complejo en un modelo.Se puede obtener una ComplexTypeConfiguration mediante el método ComplexType de <see cref="T:System.Data.Entity.DbModelBuilder" /> o se puede registrar un tipo personalizado derivado de ComplexTypeConfiguration mediante la propiedad Configurations de <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TComplexType">Tipo complejo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de ComplexTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">El objeto que se va a comparar con el objeto especificado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Una función hash para un tipo concreto.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Excluye una propiedad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>Misma instancia de ComplexTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Tipo propietario de la propiedad que se va a omitir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo de entidad en un modelo.Se puede obtener una EntityTypeConfiguration mediante el método Entity de <see cref="T:System.Data.Entity.DbModelBuilder" /> o se puede registrar un tipo personalizado derivado de EntityTypeConfiguration mediante la propiedad Configurations de <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Tipo de entidad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de EntityTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Devuelve si el modelo de configuración especificado es igual al modelo de configuración actual.</summary>
      <returns>Es true si el modelo de configuración especificado es igual al modelo de configuración actual; de lo contrario, es false.</returns>
      <param name="obj">El modelo que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Devuelve la función hash del modelo de configuración especificado.</summary>
      <returns>La función hash para el generador de modelos especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Obtiene el tipo de configuración del modelo actual.</summary>
      <returns>El tipo de configuración del modelo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Configura el nombre del conjunto de entidades que se va a utilizar para este tipo de entidad.El nombre del conjunto de entidades solo se puede configurar para el tipo base en cada conjunto.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura las propiedades de clave principal para este tipo de entidad.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyExpression">Expresión lambda que representa la propiedad que se va a utilizar como clave principal.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clave principal se compone de varias propiedades, se debe especificar un tipo anónimo que incluya las propiedades.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Configura una relación a varios de este tipo de entidad.</summary>
      <returns>Objeto de configuración que se puede usar para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura una relación opcional de este tipo de entidad.Las instancias del tipo de entidad se podrán guardar en la base de datos sin que se especifique esta relación.La clave externa de la base de datos admitirá valores NULL.</summary>
      <returns>Objeto de configuración que se puede usar para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura una relación requerida de este tipo de entidad.Las instancias del tipo de entidad no se podrán guardar en la base de datos a menos que se especifique esta relación.La clave externa de la base de datos no admitirá valores NULL.</summary>
      <returns>Objeto de configuración que se puede usar para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Tipo de la entidad en el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la tabla a la que está asignada esta entidad.El valor de la anotación se puede usar posteriormente al procesar la tabla, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Excluye una propiedad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Tipo propietario de la propiedad que se va a omitir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>Permite una configuración avanzada relacionada con la forma en que un tipo de entidad derivado se asigna al esquema de base de datos.Las llamadas a Map son aditivas y las llamadas subsiguientes no invalidarán la configuración ya realizada mediante Map.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="derivedTypeMapConfigurationAction">Acción que realiza la configuración frente a un elemento <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">El tipo de entidad derivada que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>Permite una configuración avanzada relacionada con la forma en que este tipo de entidad se asigna al esquema de base de datos.De forma predeterminada, cualquier configuración también se aplicará a cualquier tipo derivado de este tipo de entidad.Los tipos derivados se pueden configurar mediante la sobrecarga de Map que configura un tipo derivado o mediante una EntityTypeConfiguration para el tipo derivado.Las propiedades de una entidad se pueden dividir entre varias tablas usando varias llamadas a Map.Las llamadas a Map son aditivas y las llamadas subsiguientes no invalidarán la configuración ya realizada mediante Map.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entityMappingConfigurationAction">Acción que realiza la configuración frente a un elemento <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.Se utilizarán las convenciones predeterminadas para nombres de procedimientos y parámetros.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Configuración para reemplazar a las convenciones predeterminadas para nombres de procedimientos y parámetros.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Devuelve una representación de cadena de la configuración del modelo.</summary>
      <returns>Una representación de cadena del generador de modelos.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>Misma instancia de EntityTypeConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de base de datos de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>Excepción producida por <see cref="T:System.Data.Entity.DbModelBuilder" /> durante la creación de modelos cuando se genera un modelo no válido.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>Inicializa una nueva instancia de ModelValidationException</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la información de serialización y el contexto de transmisión por secuencias de la clase <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">La información de serialización.</param>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de ModelValidationException</summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de ModelValidationException</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>Clase base para realizar la configuración de una relación.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para modificar una relación.</summary>
      <typeparam name="TEntityType">El tipo de entidad a partir del cual se va a configurar la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad.</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad <see cref="T:System.byte[]" /> de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Patrón usado para generar valores para la propiedad en la base de datos.Establecer 'null' hará que se use la opción predeterminada, que puede ser 'None', 'Identity' o 'Computed' según el tipo de la propiedad, su semántica en el modelo (por ejemplo,las claves principales se tratan de forma diferente) y el conjunto de convenciones que se emplee.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad.Si se establece en "null", se quitará cualquier restricción de longitud máxima de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>Configura la propiedad para tener una longitud fija.Use HasMaxLength para establecer la longitud en que se fija la propiedad.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.Las propiedades de <see cref="T:System.byte[]" /> son opcionales de manera predeterminada.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos utilizada para almacenar esta propiedad que no aceptará valores NULL.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>Configura la propiedad para que sea una versión de fila en la base de datos.El tipo de datos real variará en función del proveedor de base de datos que se esté utilizando.Si se establece la propiedad para que sea una versión de fila, se configurará automáticamente para que sea un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>Configura la propiedad para tener una longitud variable.Las propiedades de <see cref="T:System.byte[]" /> tienen una longitud variable de manera predeterminada.</summary>
      <returns>Misma instancia de BinaryPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>Configura una relación que puede admitir funcionalidad de eliminación en cascada.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>Configura la eliminación en cascada para que se active para la relación.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>Configura si se activa o no la eliminación en cascada para la relación.</summary>
      <param name="value">Valor que indica si la eliminación en cascada está activada o no.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>Permite que clases de configuración derivadas para entidades y tipos complejos se registren con un objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>Agrega un objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> al objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.Solo se puede agregar un objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> para cada tipo en un modelo.</summary>
      <returns>Misma instancia de ConfigurationRegistrar, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="complexTypeConfiguration">Configuración de tipo complejo que se va a agregar.</param>
      <typeparam name="TComplexType">Tipo complejo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>Agrega un objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> al objeto <see cref="T:System.Data.Entity.DbModelBuilder" />.Solo se puede agregar un objeto <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> para cada tipo en un modelo.</summary>
      <returns>Misma instancia de ConfigurationRegistrar, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entityTypeConfiguration">Configuración de tipo de entidad que se va a agregar.</param>
      <typeparam name="TEntityType">Tipo de entidad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Detecta todos los tipos que heredan de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> o de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> en el ensamblado especificado y agrega una instancia de cada tipo detectado a este registro.</summary>
      <returns>Misma instancia de ConfigurationRegistrar, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="assembly">Ensamblado que contiene las configuraciones de modelo que se van a agregar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>Crea una convención que configura los procedimientos almacenados con el objeto de utilizarlos para eliminar entidades de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Configura el parámetro de salida que devuelve las filas afectadas por este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>Crea una convención que configura los procedimientos almacenados con el objeto de utilizarlos para insertar entidades en la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el resultado.</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el resultado.</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>Crea una convención que configura los procedimientos almacenados con el objeto de utilizarlos para modificar entidades de la base de datos.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>Crea una convención que configura los procedimientos almacenados con el objeto de utilizarlos para modificar entidades de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>Configura el procedimiento almacenado para eliminar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>Configura el procedimiento almacenado para insertar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>Configura el procedimiento almacenado para actualizar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad primitiva de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante convenciones ligeras.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>Obtiene la <see cref="T:System.Reflection.PropertyInfo" /> para esta propiedad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Modelo utilizado para generar valores para la propiedad en la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="maxLength">Longitud máxima de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Configura el nombre del parámetro utilizado en los procedimientos almacenados de esta propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Configura la precisión de la propiedad <see cref="T:System.DateTime" />.Si el proveedor de la base de datos no admite precisión para el tipo de datos de la columna, se omite el valor.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Precisión de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Configura la precisión y la escala de la propiedad <see cref="T:System.Decimal" />.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="precision">Precisión de la propiedad.</param>
      <param name="scale">Escala de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>Configura la propiedad para tener una longitud fija.Use HasMaxLength para establecer la longitud en que se fija la propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>Configura esta propiedad para que forme parte de la clave principal del tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos usada para almacenar esta propiedad no aceptará valores NULL.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>Configura la propiedad para que sea una versión de fila en la base de datos.El tipo de datos real variará en función del proveedor de base de datos que se esté utilizando.Si se establece la propiedad para que sea una versión de fila, se configurará automáticamente para que sea un token de simultaneidad optimista.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>Configura la propiedad para admitir contenido de cadena Unicode.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>Configura si la propiedad admite o no contenido de cadena Unicode.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="unicode">Valor que indica si la propiedad admite o no contenido de cadena Unicode.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>Configura la propiedad para tener una longitud variable.Las propiedades tienen una longitud variable de forma predeterminada.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>Permite la personalización de las convenciones usadas por una instancia de <see cref="T:System.Data.Entity.DbModelBuilder" />.Las convenciones predeterminadas se pueden encontrar en el espacio de nombres System.Data.Entity.ModelConfiguration.Conventions.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>Habilita una convención para <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TConvention">Tipo de la convención que se va a habilitar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Habilita una o varias convenciones para <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Convenciones que se van a habilitar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Habilita una convención para <see cref="T:System.Data.Entity.DbModelBuilder" />.Esta convención se ejecutará después de la especificada.</summary>
      <param name="newConvention">Convención que se va a habilitar.</param>
      <typeparam name="TExistingConvention">Tipo de la convención tras la cual se ejecutará la habilitada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Habilita una convención de configuración para <see cref="T:System.Data.Entity.DbModelBuilder" />.Esta convención se ejecutará antes que la especificada.</summary>
      <param name="newConvention">Convención que se va a habilitar.</param>
      <typeparam name="TExistingConvention">Tipo de la convención antes de la cual se ejecutará la habilitada.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Deshabilita una convención para <see cref="T:System.Data.Entity.DbModelBuilder" />.Las convenciones predeterminadas que se pueden quitar se pueden encontrar en el espacio de nombres System.Data.Entity.ModelConfiguration.Conventions.</summary>
      <typeparam name="TConvention">El tipo de la convención que se va a deshabilitar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Deshabilita una o varias convenciones para <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Convenciones que se van a deshabilitar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>Permite que se realice la configuración para un tipo de entidad en un modelo.Esta funcionalidad de configuración está disponible mediante convenciones ligeras.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>Obtiene el <see cref="T:System.Type" /> de este tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>Configura el nombre del conjunto de entidades que se va a utilizar para este tipo de entidad.El nombre del conjunto de entidades solo se puede configurar para el tipo base en cada conjunto.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>Configura las propiedades de clave principal para este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyProperties">Propiedades que se van a usar como clave principal.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Configura las propiedades de clave principal para este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyNames">Nombres de las propiedades que se van a usar como clave principal.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>Configura la propiedad de clave principal para este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyInfo">Propiedad que se va a usar como clave principal.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>Configura la propiedad de clave principal para este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyName">Nombre de la propiedad que se va a usar como clave principal.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la tabla a la que está asignada esta entidad.El valor de la anotación se puede usar posteriormente al procesar la tabla, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>Excluye este tipo de entidad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>Excluye una propiedad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyInfo">Propiedad que se va a configurar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>Excluye una propiedad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyName">Nombre de la propiedad que se va a configurar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>Cambia este tipo de entidad a un tipo complejo.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.Se utilizarán las convenciones predeterminadas para nombres de procedimientos y parámetros.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Configuración para reemplazar a las convenciones predeterminadas para nombres de procedimientos y parámetros.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>Configura una propiedad que está definida en este tipo.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyInfo">Propiedad que se va a configurar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>Configura una propiedad que está definida en este tipo.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyName">Nombre de la propiedad que se va a configurar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de base de datos de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo de entidad en un modelo.Esta funcionalidad de configuración está disponible mediante convenciones ligeras.</summary>
      <typeparam name="T">Tipo heredado por el tipo de entidad.</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>Obtiene el <see cref="T:System.Type" /> de este tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Configura el nombre del conjunto de entidades que se va a utilizar para este tipo de entidad.El nombre del conjunto de entidades solo se puede configurar para el tipo base en cada conjunto.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="entitySetName">Nombre del conjunto de entidades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura las propiedades de clave principal para este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyExpression">Expresión lambda que representa la propiedad que se va a usar como clave principal.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Si la clave principal se compone de varias propiedades, se debe especificar un tipo anónimo que incluya las propiedades.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">Tipo de la clave.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la tabla a la que está asignada esta entidad.El valor de la anotación se puede usar posteriormente al procesar la tabla, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>Excluye este tipo de entidad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Excluye una propiedad del modelo de modo que no se asignará a la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Tipo propietario de la propiedad que se va a omitir.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>Cambia este tipo de entidad a un tipo complejo.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.Se utilizarán las convenciones predeterminadas para nombres de procedimientos y parámetros.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Configura este tipo con el objeto de emplear los procedimientos almacenados para insertar, actualizar y eliminar.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Configuración para reemplazar a las convenciones predeterminadas para nombres de procedimientos y parámetros.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura una propiedad que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">El tipo de propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configura el nombre de tabla al que se asigna este tipo de entidad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de base de datos de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>Crea una convención que configura los procedimientos almacenados con el objeto de utilizarlos para actualizar entidades de la base de datos.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el parámetro.</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el parámetro.</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el parámetro.</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyInfo">La propiedad para la cual se va a configurar el resultado.</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyName">El nombre de la propiedad para la cual se va a configurar el resultado.</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Configura el parámetro de salida que devuelve las filas afectadas por este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad <see cref="T:System.DateTime" /> de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Patrón usado para generar valores para la propiedad en la base de datos.Establecer 'null' hará que se use la opción predeterminada, que puede ser 'None', 'Identity' o 'Computed' según el tipo de la propiedad, su semántica en el modelo (por ejemplo,las claves principales se tratan de forma diferente) y el conjunto de convenciones que se emplee.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Configura la precisión de la propiedad.Si el proveedor de la base de datos no admite precisión para el tipo de datos de la columna, se omite el valor.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Precisión de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos utilizada para almacenar esta propiedad que no aceptará valores NULL.Las propiedades de <see cref="T:System.DateTime" /> son obligatorias de manera predeterminada.</summary>
      <returns>Misma instancia de DateTimePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad <see cref="T:System.decimal" /> de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Patrón usado para generar valores para la propiedad en la base de datos.Establecer 'null' hará que se use la opción predeterminada, que puede ser 'None', 'Identity' o 'Computed' según el tipo de la propiedad, su semántica en el modelo (por ejemplo,las claves principales se tratan de forma diferente) y el conjunto de convenciones que se emplee.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Configura la precisión y la escala de la propiedad.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="precision">Precisión de la propiedad.</param>
      <param name="scale">Escala de la propiedad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos utilizada para almacenar esta propiedad que no aceptará valores NULL.Las propiedades de <see cref="T:System.decimal" /> son obligatorias de manera predeterminada.</summary>
      <returns>Misma instancia de DecimalPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para eliminar entidades.</summary>
      <typeparam name="TEntityType">El tipo de entidad para la cual el procedimiento almacenado se utilizará para eliminar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Configura el parámetro de salida que devuelve las filas afectadas por este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>Configura una relación que puede admitir propiedades de clave externa que se exponen en el modelo de objetos.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TDependentEntityType">Tipo de entidad dependiente.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura la relación para que se utilicen propiedades de clave externa que se exponen en el modelo de objetos.Si las propiedades de clave externa no se exponen en el modelo de objetos, se ha de utilizar el método Map.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
      <param name="foreignKeyExpression">Expresión lambda que representa la propiedad que se va a utilizar como clave externa.Si la clave externa se compone de varias propiedades, se ha de especificar un tipo anónimo que incluya las propiedades.Cuando se usan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que se configuraron las propiedades de clave principal para el tipo de entidad de seguridad.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>Configura la asignación de tabla y de columna para un tipo de entidad o un subconjunto de propiedades de un tipo de entidad.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Tipo de entidad que se va a asignar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la tabla a la que está asignada esta entidad.El valor de la anotación se puede usar posteriormente al procesar la tabla, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>Reasigna todas las propiedades heredadas de tipos base.Cuando se configura un tipo derivado para que se asigne a una tabla diferente, todas las propiedades se incluirán en la tabla en lugar de que solo se incluyan las propiedades no heredadas.Esto se conoce como asignación TPC (Tabla por tipo concreto).</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura las propiedades que se incluirán en este fragmento de asignación.Si no se llama a este método, se configurarán todas las propiedades que no se hayan incluido todavía en un fragmento de asignación.</summary>
      <param name="propertiesExpression">Expresión lambda para un tipo anónimo que contiene las propiedades que se van a asignar.C#: t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">Un tipo anónimo que incluye las propiedades que se van a asignar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Configura una propiedad <see cref="T:System.byte[]" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Configura una propiedad <see cref="T:DbGeography" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Configura una propiedad <see cref="T:DbGeometry" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Configura una propiedad <see cref="T:System.DateTime" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Configura una propiedad <see cref="T:System.DateTimeOffset" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Configura una propiedad <see cref="T:System.decimal" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Configura una propiedad <see cref="T:System.DateTime?" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Configura una propiedad <see cref="T:System.DateTimeOffset?" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Configura una propiedad <see cref="T:System.decimal?" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Configura una propiedad <see cref="T:System.TimeSpan?" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Configura una propiedad <see cref="T:System.struct?" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">El tipo de propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Configura una propiedad <see cref="T:System.string" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Configura una propiedad <see cref="T:System.TimeSpan" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura una propiedad <see cref="T:System.struct" /> que está incluida en este fragmento de asignación.</summary>
      <returns>Objeto de configuración que se puede usar para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">El tipo de propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura la condición de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia.</summary>
      <returns>Un objeto de configuración para la configuración posterior de la condición de discriminador.</returns>
      <param name="property">Expresión lambda que representa la propiedad que se va a utilizar para discriminar entre tipos.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">El tipo de la propiedad que se va a utilizar para discriminar entre tipos.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>Configura la columna de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia.</summary>
      <returns>Un objeto de configuración para la configuración posterior de los valores y la columna de discriminador.</returns>
      <param name="discriminator">El nombre de la columna de discriminador.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>Configura el nombre de tabla al que se va a realizar la asignación.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>Configura el nombre y el esquema de tabla a los que se va a realizar la asignación.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Configura la asignación de tabla y de columna de una relación que no expone propiedades de clave externa en el modelo de objetos.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="other">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>Establece una anotación en el modelo para una columna de base de datos que se ha configurado con <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" />.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de ForeignKeyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnName">Nombre de la columna que se configuró con el método HasKey.</param>
      <param name="annotationName">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>Configura el nombre de las columnas para la clave externa.</summary>
      <returns>Misma instancia de ForeignKeyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames">Nombres de columna de clave externa.Cuando se usan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que se configuraron las propiedades de clave principal para el tipo de entidad de destino.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configura el nombre de tabla en que residen las columnas de clave externa.La tabla que se especifica ya debe estar asignada para el tipo de entidad.Si desea que las claves externas residan en su propia tabla, use el método Map en <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> para realizar la división de la entidad con el fin de crear la tabla solo con la propiedad de clave principal.Después pueden agregarse las claves externas a la tabla mediante este método.</summary>
      <returns>Misma instancia de ForeignKeyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configura el nombre y el esquema de tabla en que residen las columnas de clave externa.La tabla que se especifica ya debe estar asignada para el tipo de entidad.Si desea que las claves externas residan en su propia tabla, use el método Map en <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> para realizar la división de la entidad con el fin de crear la tabla solo con la propiedad de clave principal.Después pueden agregarse las claves externas a la tabla mediante este método.</summary>
      <returns>Misma instancia de ForeignKeyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Configura una relación que solo puede admitir propiedades de clave externa que no se exponen en el modelo de objetos.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">El objeto que se va a comparar con el objeto actual. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Configura la relación para que se utilicen propiedades de clave externa que no se exponen en el modelo de objetos.Las columnas y la tabla se pueden personalizar especificando una acción de configuración.Si se especifica una acción de configuración vacía, la convención generará los nombres de columna.Si se exponen propiedades de clave externa en el modelo de objetos, se ha de utilizar el método HasForeignKey.No todas las relaciones admiten la exposición de propiedades de clave externa en el modelo de objetos.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
      <param name="configurationAction">Acción que configura la tabla y las columnas de clave externa.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para insertar entidades.</summary>
      <typeparam name="TEntityType">El tipo de entidad para la cual el procedimiento almacenado se utilizará para insertar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>Se utiliza para configurar una columna con facetas de longitud para un tipo de entidad o un tipo complejo.Esta funcionalidad de configuración se expone mediante la API fluida de Code First; consulte <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la columna para tener la longitud máxima especificada.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la columna.Si el valor se configura como NULL, se eliminará cualquier restricción de longitud máxima de la columna, y en la columna de base de datos se utilizará una longitud predeterminada.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Configura la columna para tener una longitud fija.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>Configura la columna para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>Configura la columna para tener una longitud variable.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad con facetas de longitud para un tipo de entidad o un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>Misma instancia de LengthPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad.Si se establece 'null', se quitará cualquier restricción de longitud máxima de la propiedad y se usará una longitud predeterminada para la columna de base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>Configura la propiedad para tener una longitud fija.Use HasMaxLength para establecer la longitud en que se fija la propiedad.</summary>
      <returns>Misma instancia de LengthPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>Misma instancia de LengthPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>Configura la propiedad para tener una longitud variable.Las propiedades tienen una longitud variable de forma predeterminada.</summary>
      <returns>Misma instancia de LengthPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>Configura una relación a varios de un tipo de entidad.</summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>Configura la relación para que sea de varios a varios sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configura la relación para que sea de varios a varios con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>Configura la relación para que sea de varios a opcional sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de varios a opcional con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configura la relación para que sea de varios a requerido sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de varios a requerido con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>Configura la asignación de tabla y de columna de una relación de varios a varios.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="other">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la tabla de combinación.El valor de la anotación se puede usar posteriormente al procesar la tabla, por ejemplo al crear migraciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>Configura el nombre de las columnas para la clave externa izquierda.La clave externa izquierda apunta a la entidad primaria de la propiedad de navegación especificada en la llamada a HasMany.</summary>
      <returns>Misma instancia de ManyToManyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames">Nombres de columna de clave externa.Cuando se usan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que se configuraron las propiedades de clave principal para el tipo de entidad de destino.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>Configura el nombre de las columnas para la clave externa derecha.La clave externa derecha apunta a la entidad primaria de la propiedad de navegación especificada en la llamada a WithMany.</summary>
      <returns>Misma instancia de ManyToManyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="keyColumnNames">Nombres de columna de clave externa.Cuando se usan varias propiedades de clave externa, las propiedades deben especificarse en el mismo orden en que se configuraron las propiedades de clave principal para el tipo de entidad de destino.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configura el nombre de tabla combinada para la relación.</summary>
      <returns>Misma instancia de ManyToManyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configura el nombre y el esquema de tabla combinada para la relación.</summary>
      <returns>Misma instancia de ManyToManyAssociationMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="tableName">Nombre de la tabla.</param>
      <param name="schemaName">Esquema de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para modificar una relación de varios a varios.</summary>
      <typeparam name="TEntityType">El tipo de entidad a partir del cual se va a configurar la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad al que va dirigido el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>Define el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>Define el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla izquierda.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla izquierda.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla izquierda.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla izquierda.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla derecha.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla derecha.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla derecha.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>Configura el parámetro para el/los valor(es) de la tecla derecha.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para modificar una relación de varios a varios.</summary>
      <typeparam name="TEntityType">El tipo de entidad a partir del cual se va a configurar la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad al que va dirigido el otro extremo de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Configura el procedimiento almacenado para eliminar relaciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Configura el procedimiento almacenado para insertar relaciones.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>Configura una relación de varios a varios.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Tipo de la entidad primaria de la propiedad de navegación especificada en la llamada HasMany.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de la entidad primaria de la propiedad de navegación especificada en la llamada WithMany.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>Configura la tabla y las columnas de clave externa utilizadas para almacenar la relación.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="configurationAction">Acción que configura la tabla y las columnas de clave externa.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>Configura los procedimientos almacenados con el objeto de emplearlos para modificar esta relación.Se utilizarán las convenciones predeterminadas para nombres de procedimientos y parámetros.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>Configura los procedimientos almacenados con el objeto de emplearlos para modificar esta relación.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Configuración para reemplazar a las convenciones predeterminadas para nombres de procedimientos y parámetros.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>Realiza la configuración de un procedimiento almacenado que se utiliza para modificar una entidad en la base de datos.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para modificar entidades.</summary>
      <typeparam name="TEntityType">El tipo de entidad para la cual el procedimiento almacenado se utilizará para modificar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>Configura el procedimiento almacenado para eliminar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>Configura el procedimiento almacenado para insertar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>Configura el procedimiento almacenado para actualizar entidades.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración del procedimiento almacenado.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>Configura una condición utilizada para discriminar entre tipos en una herencia de jerarquía sobre la base de los valores asignados a una propiedad.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>Configura la condición para que se requiera un valor en la propiedad.Se supone que las filas que no tienen un valor asignado a la columna en la que se almacena esta propiedad son del tipo base de este tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Configura una relación opcional de un tipo de entidad.</summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>Configura la relación para que sea de opcional a varios sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configura la relación para que sea de opcional a varios con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>Configura la relación para que sea de opcional a opcional sin una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.El tipo de entidad que es el destino de la relación será el principal de la relación.</summary>
      <returns>Un objeto de configuración que puede utilizarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de opcional a opcional con una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.El tipo de entidad que es el destino de la relación será el principal de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>Configura la relación para que sea de opcional a opcional sin una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el principal de la relación.El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de opcional a opcional con una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el principal de la relación.El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configura la relación para que sea de opcional a requerido sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Un objeto de configuración que puede usarse para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de opcional a requerido con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Configura una columna primitiva de un tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna primitiva utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna primitiva utilizada para almacenar la propiedad.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Configura la columna primitiva para que sea opcional.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Configura la columna primitiva para que sea necesaria.</summary>
      <returns>La misma instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad primitiva de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Patrón usado para generar valores para la propiedad en la base de datos.Establecer 'null' hará que se use la opción predeterminada, que puede ser 'None', 'Identity' o 'Computed' según el tipo de la propiedad, su semántica en el modelo (por ejemplo,las claves principales se tratan de forma diferente) y el conjunto de convenciones que se emplee.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Configura el nombre del parámetro utilizado en los procedimientos almacenados de esta propiedad.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos usada para almacenar esta propiedad no aceptará valores NULL.</summary>
      <returns>Misma instancia de PrimitivePropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>Permite realizar la configuración para una convención ligera en función de las propiedades de un modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>Permite la configuración de las propiedades a las que se aplica esta convención.</summary>
      <param name="propertyConfigurationAction">Acción que realiza la configuración con un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para esta instancia.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>Filtra las propiedades a las que se aplica esta convención según un predicado mientras se captura un valor para usarlo posteriormente durante la configuración.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="capturingPredicate">Función para capturar un valor para cada propiedad.Si el valor es NULL, se filtrará la propiedad.</param>
      <typeparam name="T">Tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>El objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>Filtra las propiedades a las que se aplica esta convención en función de un predicado.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="predicate">Función para probar una condición en todas las propiedades.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>Permite realizar la configuración para una convención ligera en función de las propiedades de los tipos de entidad de un modelo y un valor capturado.</summary>
      <typeparam name="T">El tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>Permite la configuración de las propiedades a las que se aplica esta convención.</summary>
      <param name="propertyConfigurationAction">Acción que realiza la configuración en <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> mediante un valor capturado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>Se usa para configurar una propiedad en un fragmento de asignación.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de PropertyMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos usada para almacenar la propiedad, en un fragmento de asignación.</summary>
      <returns>Misma instancia de PropertyMappingConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>Configura una relación necesaria de un tipo de entidad.</summary>
      <typeparam name="TEntityType">Tipo de entidad del que se origina la relación.</typeparam>
      <typeparam name="TTargetEntityType">Tipo de entidad que es el destino de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Especifica si el objeto especificado es o no el mismo que el objeto actual.</summary>
      <returns>Es true si el objeto especificado es el mismo que el objeto actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que se va a comparar.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Obtiene el código hash asociado al objeto actual.</summary>
      <returns>El código hash asociado al objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Devuelve una representación en forma de cadena del objeto actual.</summary>
      <returns>Representación en forma de cadena del objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>Configura la relación para que sea de requerido a varios sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que puede utilizarse para seguir configurando la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Configura la relación para que sea de requerido a varios con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>Configura la relación para que sea de requerido a opcional sin una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de requerido a opcional con una propiedad de navegación en el otro lado de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>Configura la relación para que sea de requerido a requerido sin una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.El tipo de entidad que es el destino de la relación será el principal de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de requerido a requerido con una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el dependiente y contendrá una clave externa al principal.El tipo de entidad que es el destino de la relación será el principal de la relación.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>Configura la relación para que sea de requerido a requerido sin una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el principal de la relación.El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configura la relación para que sea de requerido a requerido con una propiedad de navegación en el otro lado de la relación.El tipo de entidad que se va a configurar será el principal de la relación.El tipo de entidad que es el destino de la relación será el dependiente y contendrá una clave externa al principal.</summary>
      <returns>Objeto de configuración que se puede usar para la configuración posterior de la relación.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación en el otro extremo de la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>Configura una columna de base de datos usada para almacenar valores de cadena.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Obtiene el tipo de la instancia actual.</summary>
      <returns>El tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad.Si se define NULL, se utilizará una longitud predeterminada para la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>Configura la columna para tener una longitud fija.Use HasMaxLength para establecer la longitud en que se fija la propiedad.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>Configura la columna para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>Configura la columna para que sea opcional.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>Configura la columna para que sea necesaria.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Configura la columna para admitir contenidos de cadenas Unicode.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Configura si la columna admite o no contenido de cadena Unicode.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="unicode">Valor que indica si la columna admite o no contenido de cadena Unicode.Si se especifica 'null', se quitará la faceta Unicode de la columna.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>Configura la columna para tener una longitud variable.Las columnas tienen una longitud variable de forma predeterminada.</summary>
      <returns>Misma instancia de StringColumnConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Se utiliza para configurar una propiedad <see cref="T:System.string" /> de un tipo de entidad o de un tipo complejo.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Establece una anotación en el modelo para la columna de base de datos usada para almacenar la propiedad.El valor de la anotación se puede usar posteriormente al procesar la columna, por ejemplo al crear migraciones.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="name">Nombre de la anotación, que debe ser un identificador válido de C#/EDM.</param>
      <param name="value">Valor de la anotación, que puede ser una cadena o algún otro tipo que se puede serializar con un <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configura el nombre de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnName">Nombre de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Configura el orden de la columna de base de datos utilizada para almacenar la propiedad.Este método también se utiliza para especificar la ordenación de claves cuando un tipo de entidad tiene una clave compuesta.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnOrder">El orden en que esta columna debe aparecer en la tabla de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>Configura el tipo de datos de la columna de base de datos utilizada para almacenar la propiedad.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="columnType">Nombre del tipo de datos específico del proveedor de la base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Configura cómo la base de datos genera valores para la propiedad.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="databaseGeneratedOption">Patrón usado para generar valores para la propiedad en la base de datos.Establecer 'null' hará que se use la opción predeterminada, que puede ser 'None', 'Identity' o 'Computed' según el tipo de la propiedad, su semántica en el modelo (por ejemplo,las claves principales se tratan de forma diferente) y el conjunto de convenciones que se emplee.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configura la propiedad para tener la longitud máxima especificada.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="value">Longitud máxima de la propiedad.Si se establece 'null', se quitará cualquier restricción de longitud máxima de la propiedad y se usará una longitud predeterminada para la columna de base de datos.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>Configura la propiedad para que sea utilizada como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad se va a utilizar o no como un token de simultaneidad optimista.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="concurrencyToken">Valor que indica si la propiedad es un token de simultaneidad o no.Si se especifica "null", se quitará de la propiedad la faceta de token de simultaneidad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Configura la propiedad para tener una longitud fija.Use HasMaxLength para establecer la longitud en que se fija la propiedad.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Configura la propiedad para permitir la longitud máxima admitida por el proveedor de la base de datos.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Configura la propiedad para que sea opcional.La columna de base de datos usada para almacenar esta propiedad aceptará valores NULL.Las propiedades de <see cref="T:System.string" /> son opcionales de manera predeterminada.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>Configura la propiedad para que sea necesaria.La columna de base de datos utilizada para almacenar esta propiedad que no aceptará valores NULL.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Configura la propiedad para admitir contenido de cadena Unicode.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Configura si la propiedad admite o no contenido de cadena Unicode.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
      <param name="unicode">Valor que indica si la propiedad admite o no contenido de cadena Unicode.Si se especifica 'null', se quitará la faceta Unicode de la propiedad.La especificación de "null" producirá el mismo comportamiento en tiempo de ejecución que si se especifica "false".</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Configura la propiedad para tener una longitud variable.Las propiedades de <see cref="T:System.string" /> tienen una longitud variable de manera predeterminada.</summary>
      <returns>Misma instancia de StringPropertyConfiguration, de modo que se puedan encadenar varias llamadas.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Permite que se realice la configuración para un tipo en un modelo.</summary>
      <typeparam name="TStructuralType">El tipo que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si el objeto especificado es igual que el objeto actual; de lo contrario es false.</returns>
      <param name="obj">Objeto que se va a comparar con el objeto actual.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Código hash para el objeto actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Configura una propiedad <see cref="T:System.byte[]" /> que está definida en este tipo.</summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Configura una propiedad <see cref="T:DbGeography" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Configura una propiedad <see cref="T:DbGeometry" /> que está definida en este tipo.</summary>
      <returns>Un objeto de configuración que puede utilizarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Configura una propiedad <see cref="T:System.DateTime" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Configura una propiedad <see cref="T:System.DateTimeOffset" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Configura una propiedad <see cref="T:System.decimal" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Configura una propiedad <see cref="T:System.DateTime?" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Configura una propiedad <see cref="T:System.DateTimeOffset?" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Configura una propiedad <see cref="T:System.decimal?" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Configura una propiedad <see cref="T:System.TimeSpan?" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Configura una propiedad <see cref="T:System.struct?" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">El tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Configura una propiedad <see cref="T:System.string" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Configura una propiedad <see cref="T:System.TimeSpan" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Configura una propiedad <see cref="T:System.struct" /> que está definida en este tipo.</summary>
      <returns>Objeto de configuración que puede usarse para configurar la propiedad.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad que se va a configurar.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">El tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>Permite realizar la configuración para una convención ligera en función de los tipos de entidad de un modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>Permite la configuración de los tipos de entidad a los que se aplica esta convención.</summary>
      <param name="entityConfigurationAction">Acción que realiza la configuración con un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>Filtra los tipos de entidad a los que se aplica esta convención según un predicado mientras se captura un valor para usarlo posteriormente durante la configuración.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="capturingPredicate">Función para capturar un valor para cada tipo de entidad.Si el valor es NULL, se filtrará el tipo de entidad.</param>
      <typeparam name="T">Tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtra los tipos de entidad a los que se aplica esta convención en función de un predicado.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="predicate">Función para probar una condición en todos los tipos de entidad.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>Permite realizar la configuración para una convención ligera en función de los tipos de entidad de un modelo que heredan de un tipo común especificado.</summary>
      <typeparam name="T">Tipo común de los tipos de entidad a los que se aplica esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>Permite la configuración de los tipos de entidad a los que se aplica esta convención.</summary>
      <param name="entityConfigurationAction">Acción que realiza la configuración con un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>Filtra los tipos de entidad a los que se aplica esta convención según un predicado mientras se captura un valor para usarlo posteriormente durante la configuración.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="capturingPredicate">Función para capturar un valor para cada tipo de entidad.Si el valor es NULL, se filtrará el tipo de entidad.</param>
      <typeparam name="TValue">Tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>Filtra los tipos de entidad a los que se aplica esta convención en función de un predicado.</summary>
      <returns>Instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> de modo que se puedan encadenar varias llamadas.</returns>
      <param name="predicate">Función para probar una condición en todos los tipos de entidad.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>Permite realizar la configuración para una convención ligera en función de los tipos de entidad de un modelo y un valor capturado.</summary>
      <typeparam name="T">Tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>Permite la configuración de los tipos de entidad a los que se aplica esta convención.</summary>
      <param name="entityConfigurationAction">Acción que realiza la configuración en <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> mediante un valor capturado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>Permite realizar la configuración para una convención ligera en función de los tipos de entidad de un modelo que heredan de un tipo común especificado y un valor capturado.</summary>
      <typeparam name="T">Tipo común de los tipos de entidad a los que se aplica esta convención.</typeparam>
      <typeparam name="TValue">Tipo del valor capturado.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>Permite la configuración de los tipos de entidad a los que se aplica esta convención.</summary>
      <param name="entityConfigurationAction">Acción que realiza la configuración en <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> mediante un valor capturado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo en tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>Permite realizar la configuración de un procedimiento almacenado que se utiliza para actualizar entidades.</summary>
      <typeparam name="TEntityType">El tipo de entidad para la cual el procedimiento almacenado se utilizará para actualizar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Configura el nombre del procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="procedureName">Nombre del procedimiento almacenado.</param>
      <param name="schemaName">Nombre del esquema.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Configura parámetros de una relación en la que la propiedad de clave externa no está incluida en la clase.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="navigationPropertyExpression">Expresión lambda que representa la propiedad de navegación para la relación.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Una expresión lambda que ejecuta la configuración.</param>
      <typeparam name="TPrincipalEntityType">El tipo de entidad principal de la relación.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Nombre del parámetro.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>Configura un parámetro de este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el parámetro.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">El nombre de parámetro del valor actual.</param>
      <param name="originalValueParameterName">El nombre de parámetro del valor original.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Configura una columna del resultado de este procedimiento almacenado para asignar a una propiedad.Se utiliza para columnas generadas por la base de datos.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="propertyExpression">Expresión lambda que representa la propiedad para la cual se configurará el resultado.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Nombre de la columna de resultado.</param>
      <typeparam name="TProperty">Tipo de la propiedad que se va a configurar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Configura el parámetro de salida que devuelve las filas afectadas por este procedimiento almacenado.</summary>
      <returns>La misma instancia de configuración para que puedan encadenarse varias llamadas.</returns>
      <param name="parameterName">Nombre del parámetro.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>Configura una columna de discriminador utilizada para diferenciar entre tipos en una jerarquía de herencia.Esta funcionalidad de configuración está disponible mediante la API fluida de Code First; vea <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Determina si el objeto especificado es igual al objeto actual.</summary>
      <returns>Es true si los objetos son iguales; en caso contrario, false.</returns>
      <param name="obj">Objeto.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Actúa como función hash para un tipo concreto.</summary>
      <returns>Un código hash para el tipo actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Obtiene el <see cref="T:System.Type" /> de la instancia actual.</summary>
      <returns>Tipo de tiempo de ejecución exacto de la instancia actual.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia.</summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
      <typeparam name="T">Tipo del valor de discriminador.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia.</summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>Configura el valor de discriminador utilizado para identificar el tipo de entidad que se configura de otros tipos en la jerarquía de herencia.</summary>
      <returns>Un objeto de configuración para la configuración de la columna utilizada para almacenar valores de discriminador.</returns>
      <param name="value">Valor que se va a utilizar para identificar el tipo de entidad.</param>
      <typeparam name="T">Tipo del valor de discriminador.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Devuelve una cadena que representa el objeto actual.</summary>
      <returns>Cadena que representa el objeto actual.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Convención para detectar propiedades de navegación inversas entre sí cuando solo existe un par de propiedades de navegación entre los tipos relacionados.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>Clase de uso general para las convenciones de Code First que leen atributos de propiedades .NET y generan anotaciones de columna según esos atributos.</summary>
      <typeparam name="TAttribute">Tipo de atributo que se va a detectar.</typeparam>
      <typeparam name="TAnnotation">Tipo de anotación que se creará.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>Crea una convención que creará anotaciones de columna con el nombre especificado y usando el delegado de generador indicado.</summary>
      <param name="annotationName">Nombre de las anotaciones que se van a crear.</param>
      <param name="annotationFactory">Generador para crear la anotación en cada columna.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>Clase de uso general para las convenciones de Code First que leen atributos de tipos .NET y generan anotaciones de tabla según esos atributos.</summary>
      <typeparam name="TAttribute">Tipo de atributo que se va a detectar.</typeparam>
      <typeparam name="TAnnotation">Tipo de anotación que se creará.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>Crea una convención que creará anotaciones de tabla con el nombre especificado y usando el delegado de generador indicado.</summary>
      <param name="annotationName">Nombre de las anotaciones que se van a crear.</param>
      <param name="annotationFactory">Generador para crear la anotación en cada tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> encontradas en propiedades del modelo</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>Convención para aplicar el orden de columnas especificado mediante la API de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> o <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Valida la configuración de ordenación proporcionada para las columnas.Esta implementación base es una operación sin efecto.</summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="tableName">La definición de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>Convención para aplicar el orden de columnas especificado mediante la API de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> o <see cref="T:System.Data.Entity.DbModelBuilder" />.Se inicia esta convención si se detecta una ordenación de columna configurada duplicada.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Valida la configuración de ordenación proporcionada para las columnas para asegurar de no proporcionar el mismo ordinal a dos columnas.</summary>
      <param name="table">Nombre de la tabla a la que pertenece la columna.</param>
      <param name="tableName">La definición de la tabla.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> encontradas en tipos del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Convención para configurar un tipo como tipo complejo si no tiene ninguna clave principal, ningún tipo base asignado y ninguna propiedad de navegación.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>Convención que no invalida la configuración.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>La clase derivada puede usar el constructor predeterminado para aplicar una regla establecida para cambiar la configuración del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>Inicia la configuración de una convención ligera que se aplica a todas las propiedades del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>Inicia la configuración de una convención ligera que se aplica a todas las propiedades primitivas del tipo especificado del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
      <typeparam name="T">Tipo de las propiedades a las que se aplicará esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>Inicia la configuración de una convención ligera que se aplica a todos los tipos asignados del modelo que derivan del tipo especificado o lo implementan.</summary>
      <returns>Objeto de configuración para la convención.</returns>
      <typeparam name="T">Tipo de las entidades a las que se aplicará esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>Inicia la configuración de una convención ligera que se aplica a todos los tipos asignados del modelo.</summary>
      <returns>Objeto de configuración para la convención.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Convención para establecer la precisión en 18 y la escala en 2 para propiedades de tipo decimal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> con la precisión y escala predeterminadas.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> con la precisión y escala especificadas.</summary>
      <param name="precision">Precisión</param>
      <param name="scale">Escala</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Convención para mover las propiedades de clave principal de modo que aparezcan en primer lugar.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Convención para distinguir entre relaciones opcionales y requeridas basándose en la admisión de valores NULL en CLR de la propiedad de clave externa.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>Clase base para convenciones que descubren propiedades de clave externa.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Cuando se reemplaza, devuelve true si <paramref name="dependentProperty" /> debe ser parte de la clave externa.</summary>
      <returns>True si dependentProperty deberían ser parte de una clave externa; de lo contrario, false.</returns>
      <param name="associationType">El tipo de asociación que se está configurando.</param>
      <param name="dependentAssociationEnd">El extremo dependiente.</param>
      <param name="dependentProperty">La propiedad candidata del extremo dependiente.</param>
      <param name="principalEntityType">Tipo de entidad de extremo principal.</param>
      <param name="principalKeyProperty">Una propiedad clave del extremo principal que es candidata a clave externa.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Devuelve true si la convención admite pares de tipos de entidades que tengan definidas entre sí múltiples asociaciones.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>Convención para introducir índices para claves externas.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> encontradas en propiedades de navegación del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> encontradas en propiedades de clave externa del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>Convención que actúa sobre la sección conceptual del modelo después de crear el modelo.</summary>
      <typeparam name="T">Tipo de elemento de metadatos sobre el que actúa esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Aplica esta convención a un elemento del modelo.</summary>
      <param name="item">Elemento al que se va a aplicar la convención.</param>
      <param name="model">Modelo.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifica las convenciones que se pueden agregar a una instancia de <see cref="T:System.Data.Entity.DbModelBuilder" /> o quitar de ella.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Convención para detectar propiedades de clave principal.Los modelos de nombres reconocidos son, en orden de prioridad: 1. 'Id' 2.[nombre de tipo]Id La detección de claves principales no distingue mayúsculas de minúsculas.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Convención de coincidencia con la clase de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> .</summary>
      <returns>La clase de <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> a coincidir.</returns>
      <param name="entityType">Tipo de entidad.</param>
      <param name="primitiveProperties">Colección de propiedades primitivas.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>Convención para detectar atributos <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> en propiedades y generar anotaciones de columna <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> en el modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>Crea una nueva instancia de la convención.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>Convención que actúa sobre la sección de base de datos del modelo después de crear el modelo.</summary>
      <typeparam name="T">Tipo de elemento de metadatos sobre el que actúa esta convención.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Aplica esta convención a un elemento del modelo.</summary>
      <param name="item">Elemento al que se va a aplicar la convención.</param>
      <param name="model">Modelo.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>Clase base para convenciones que descubren propiedades de clave principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Cuando se reemplaza, devuelve el subconjunto de propiedades que serán parte de la clave principal.</summary>
      <returns>Las propiedades que deberían ser parte de la clave principal.</returns>
      <param name="entityType">Tipo de entidad.</param>
      <param name="primitiveProperties">Los tipos primitivos de las entidades</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Convención para agregar una eliminación en cascada a la tabla combinada de las tablas implicadas en una relación de varios a varios.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Convención para asegurarse de que no se crean asignaciones no válidas o no admitidas al asignar propiedades heredadas</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres son una combinación del nombre de propiedad de navegación dependiente y los nombres de propiedad de clave principal de tipo principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Coincide con la clave del modelo de entidad dependiente.</summary>
      <returns>Devuelve <see cref="T:System.Boolean" />.</returns>
      <param name="associationType">Objeto de metadatos del tipo de asociación.</param>
      <param name="dependentAssociationEnd">Fin de la asociación dependiente.</param>
      <param name="dependentProperty">La propiedad dependiente..</param>
      <param name="principalEntityType">Tipo de entidad principal</param>
      <param name="principalKeyProperty">La propiedad de clave principal.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Obtiene o define un valor que indica si la convención permite asociaciones múltiples.</summary>
      <returns>Es true si la convención admite diversas asociaciones; de lo contrario, false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> encontradas en tipos del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Convención para habilitar la eliminación en cascada en las relaciones requeridas.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Convención para configurar las claves principales del tipo de entidad dependiente como claves externas en una relación de uno a uno.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Convención para establecer el nombre de conjunto de entidades de modo que sea una versión pluralizada del nombre de tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Convención para establecer el nombre de tabla de modo que sea una versión pluralizada del nombre de tipo de entidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres coinciden con los nombres de propiedad de clave principal de tipo principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Coincide con la propiedad de clave dependiente asociada a la convención.</summary>
      <returns>La propiedad de clave dependiente coincidente.</returns>
      <param name="associationType">El tipo de asociación.</param>
      <param name="dependentAssociationEnd">El extremo de la asociación dependiente.</param>
      <param name="dependentProperty">La propiedad dependiente..</param>
      <param name="principalEntityType">El tipo de entidad principal.</param>
      <param name="principalKeyProperty">La propiedad de clave principal.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>Clase base de las convenciones que procesan atributos CLR encontrados en propiedades primitivas del modelo.</summary>
      <typeparam name="TAttribute">Tipo del atributo que se va a buscar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>Aplica esta convención a una propiedad a la que se ha aplicado un atributo de tipo TAttribute.</summary>
      <param name="configuration">Configuración para la propiedad que tiene el atributo.</param>
      <param name="attribute">Atributo.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>Clase base de las convenciones que procesan atributos CLR encontrados en propiedades de tipos del modelo.</summary>
      <typeparam name="TAttribute">Tipo del atributo que se va a buscar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Aplica esta convención a una propiedad a la que se ha aplicado un atributo de tipo TAttribute.</summary>
      <param name="memberInfo">Información de miembro para la propiedad que tiene el atributo.</param>
      <param name="configuration">Configuración de la clase que contiene la propiedad.</param>
      <param name="attribute">Atributo.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Convención para definir una longitud máxima para las propiedades cuyos tipos admiten facetas de longitud.El valor predeterminado es 128.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> con la longitud predeterminada.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> con la longitud especificada.</summary>
      <param name="length">Longitud máxima de las propiedades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> encontradas en propiedades de navegación del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> encontradas en propiedades primitivas del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Convención para establecer una longitud máxima predeterminada de 4000 para las propiedades cuyo tipo admita facetas de longitud cuando SqlCe sea el proveedor.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> con la longitud predeterminada.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> con la longitud especificada.</summary>
      <param name="length">Longitud máxima predeterminada de las propiedades.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Convención para configurar claves principales de tipo entero de modo que sean de identidad.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> encontradas en tipos del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Convención para procesar instancias de <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> encontradas en propiedades del modelo.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)"></member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>Clase base para las convenciones que procesan atributos CLR encontrados en el modelo.</summary>
      <typeparam name="TAttribute">Tipo del atributo que se va a buscar.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Aplica esta convención a una clase a la que se ha aplicado un atributo de tipo TAttribute.</summary>
      <param name="configuration">Configuración de la clase que contiene la propiedad.</param>
      <param name="attribute">Atributo.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Convención para detectar las propiedades de clave externa cuyos nombres son una combinación del nombre de tipo principal y los nombres de propiedad de clave principal de tipo principal.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Determina si la propiedad de la clave dependiente coincide con la clave actual.</summary>
      <returns>Es true si la propiedad de la clave dependiente coincide con la clave actual; de lo contrario, false.</returns>
      <param name="associationType">El tipo de asociación.</param>
      <param name="dependentAssociationEnd">La asociación dependiente del extremo.</param>
      <param name="dependentProperty">La propiedad dependiente..</param>
      <param name="principalEntityType">El tipo de entidad principal.</param>
      <param name="principalKeyProperty">La propiedad de clave principal.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>Representa datos en un sistema de coordenadas geodésicas.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>Obtiene un valor double que acepta valores NULL que indica el área de este valor DbGeography, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Un valor NULL doble que indica la superficie de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>Genera la representación binaria conocida de este valor DbGeography.</summary>
      <returns>La bien conocida representación binaria de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>Genera la representación del lenguaje de marcado de geografía (GML) de este valor DbGeography.</summary>
      <returns>Cadena que contiene la representación GML de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>Genera la representación de texto conocida de este valor DbGeography.Incluye solo la longitud y la latitud de los puntos.</summary>
      <returns>Cadena que contiene la representación de texto conocida de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>Devuelve un objeto geográfico que representa la unión de todos los puntos cuya distancia respecto a una instancia geográfica es menor o igual a un valor especificado.</summary>
      <returns>Objeto geográfico que representa la unión de todos los puntos.</returns>
      <param name="distance">Distancia.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>Obtiene el identificador asociado al sistema de coordenadas.</summary>
      <returns>El identificador asociado al sistema de coordenadas.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>Obtiene el identificador del sistema de coordenadas (SRID) predeterminado para los valores de geografía (WGS 84).</summary>
      <returns>El identificador del sistema de coordenadas (SRID) predeterminado de los valores geográficos (WGS 84)</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la diferencia entre este valor DbGeography y otro valor DbGeography.</summary>
      <returns>Nuevo valor DbGeography que representa la diferencia entre este valor de geografía y otro.</returns>
      <param name="other">Valor de geografía para el que se debe calcular la diferencia con este valor.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>Obtiene la dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado o bien, si el valor es una colección, la dimensión del elemento más grande.</summary>
      <returns>La dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si este valor DbGeography es disjunto espacialmente del argumento DbGeography especificado.</summary>
      <returns>Es true si otro es disjunto de este valor geográfico; de lo contrario, false.</returns>
      <param name="other">Valor de geografía cuya disyunción con este valor de geografía se debe comparar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la distancia entre los puntos más cercanos de este valor DbGeography y otro valor DbGeography.</summary>
      <returns>Valor doble que especifica la distancia entre los dos puntos más cercanos de este valor de geografía y otro.</returns>
      <param name="other">Valor de geografía para el que se debe calcular la distancia desde este valor.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>Devuelve un elemento de este valor DbGeography desde una posición específica, si representa una colección geográfica.&amp;amp;lt;param name="index"&amp;amp;gt;La posición dentro de este valor geográfico desde el cual debe tomarse el elemento.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;El elemento en este valor geográfico en la posición especificada, si representa una colección de otros valores geográficos; de lo contrario, NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Un elemento de este valor DbGeography desde una posición específica</returns>
      <param name="index">El índice.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>Obtiene el número de elementos de este valor DbGeography si representa una colección geográfica.&amp;amp;lt;returns&amp;amp;gt;El número de elementos de este valor geográfico, si representa una colección de otros valores geográficos; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Número de elementos de este valor DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>Obtiene la elevación (coordenada Z) de este valor DbGeography si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de elevación (coordenada Z) de este valor geográfico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La elevación (coordenada Z) este valor DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>Obtiene un valor DbGeography que representa el punto inicial de este valor, que puede ser NULL si este valor DbGeography no representa una curva.</summary>
      <returns>Valor DbGeography que representa el punto inicial este valor.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido especificado.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas (SRID) predeterminado de geografía (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor del lenguaje de marcado de geografía (GML) especificado.</summary>
      <returns>Nuevo valor DbGeography definido por el valor GML con el identificador del sistema de coordenadas (SRID) predeterminado de geografía (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor del lenguaje de marcado de geografía (GML) y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor GML con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geographyMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido especificado.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas (SRID) predeterminado de geografía (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geographyCollectionWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geographyCollectionWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la intersección de este valor DbGeography y otro valor DbGeography.</summary>
      <returns>Nuevo valor DbGeography que representa la intersección entre este valor de geografía y otro.</returns>
      <param name="other">Valor de geografía para el que se debe calcular la intersección con este valor.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si este valor DbGeography forma una intersección espacialmente con el argumento DbGeography especificado.</summary>
      <returns>Es true si otro intersecta con este valor geográfico; de lo contrario, false.</returns>
      <param name="other">Valor de geografía cuya intersección con este valor de geografía se debe comparar.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>Obtiene un valor booleano que acepta valores NULL que indica si este valor DbGeography está cerrado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si este valor DbGeography está cerrado; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>Obtiene un valor booleano que admite valores NULL, que indica si este valor DbGeography está o no vacío.</summary>
      <returns>Es true si este valor DbGeography está vacío; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>Obtiene la coordenada de latitud de este valor DbGeography si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de la coordenada de Latitud de este valor geográfico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La coordenada de Latitud de este valor DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>Obtiene un valor double que acepta valores NULL que indica la longitud de este valor DbGeography, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Un valor NULL doble que indica la longitud de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="lineWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="lineWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>Obtiene la coordenada de longitud de este valor DbGeography si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de la coordenada de Longitud de este valor geográfico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La coordenada de Longitud de este valor DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>Obtiene la coordenada M (medida) de este valor DbGeography si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de la coordenada M (Medida) de este valor geográfico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La coordenada M (Medida) de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multilínea de un valor binario.</summary>
      <returns>El valor multilínea de un valor binario.</returns>
      <param name="multiLineWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multilínea de un valor textual conocido.</summary>
      <returns>El valor multilínea de un valor textual conocido.</returns>
      <param name="multiLineWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multipunto de un valor binario conocido.</summary>
      <returns>El valor multipunto de un valor binario conocido.</returns>
      <param name="multiPointWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multipunto de un valor textual conocido.</summary>
      <returns>El valor multipunto de un valor textual conocido.</returns>
      <param name="multiPointWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multipoligonal de un valor binario conocido.</summary>
      <returns>El valor multipoligonal de un valor binario conocido.</returns>
      <param name="multiPolygonWellKnownBinary">El valor multipoligonal de un valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multipoligonal de un valor textual conocido.</summary>
      <returns>El valor multipoligonal de un valor textual conocido.</returns>
      <param name="multiPolygonWellKnownText">El valor multipoligonal de un valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>Devuelve un elemento de este valor DbGeography desde una posición específica, si representa un anillo linestring o lineal.&amp;amp;lt;param name="index"&amp;amp;gt;La posición dentro de este valor geográfico desde el cual debe tomarse el elemento.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;El elemento en este valor geográfico en la posición especificada, si representa un anillo linestring o lineal; de lo contrario, NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Un elemento de este valor DbGeography desde una posición específica</returns>
      <param name="index">El índice.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>Obtiene el número de puntos de este valor DbGeography si representa un anillo linestring o lineal.&amp;amp;lt;returns&amp;amp;gt;El número de elementos de este valor geográfico, si representa un anillo linestring o lineal; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Número de puntos de este valor DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="pointWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="pointWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="polygonWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeography definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="polygonWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeography debe usar.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>Obtiene el proveedor espacial que se usará para las operaciones de este tipo espacial.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>Obtiene una representación de este valor DbGeography que es específica del proveedor subyacente que lo construyó.</summary>
      <returns>Una representación de este valor DbGeography .</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si este valor DbGeography es igual espacialmente que el argumento DbGeography especificado.</summary>
      <returns>Es true si otro es espacialmente igual a este valor geográfico; de lo contrario, false.</returns>
      <param name="other">Valor de geografía cuya igualdad con este valor de geografía se debe comparar.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>Obtiene el nombre del tipo espacial de DBGeography.</summary>
      <returns>El nombre del tipo espacial de DBGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>Obtiene un valor DbGeography que representa el punto inicial de este valor, que puede ser NULL si este valor DbGeography no representa una curva.</summary>
      <returns>Valor DbGeography que representa el punto inicial este valor.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la diferencia simétrica entre este valor DbGeography y otro valor DbGeography.</summary>
      <returns>Nuevo valor DbGeography que representa la diferencia simétrica entre este valor de geografía y otro.</returns>
      <param name="other">Valor de geografía para el que se debe calcular la diferencia simétrica con este valor.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>Devuelve una representación en forma de cadena del valor de geografía.</summary>
      <returns>Una representación en forma de cadena del valor geográfico.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la unión entre este valor DbGeography y otro valor DbGeography.</summary>
      <returns>Nuevo valor DbGeography que representa la unión entre este valor de geografía y otro.</returns>
      <param name="other">Valor de geografía para el que se debe calcular la unión con este valor.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>Obtiene o establece una representación conocida serializable de contrato de datos de este valor DbGeography.</summary>
      <returns>Una representación serializable conocida de contrato de datos de este valor DbGeography.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>Representación serializable de contrato de datos de un valor <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>Obtiene o establece el identificador del sistema de coordenadas (SRID) de este valor.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>Obtiene o establece la representación binaria conocida de este valor.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>Obtiene o establece la representación de texto conocida de este valor.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>Representa formas geométricas.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>Obtiene un valor double que acepta valores NULL que indica el área de este valor DbGeometry, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Un valor doble que acepta valores NULL que indica la superficie de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>Genera la representación binaria conocida de este valor DbGeometry.</summary>
      <returns>La representación binaria conocida de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>Genera la representación del lenguaje de marcado de geografía (GML) de este valor DbGeometry.</summary>
      <returns>Cadena que contiene la representación GML de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>Genera la representación de texto conocida de este valor DbGeometry.Incluye solo las coordenadas X e Y de los puntos.</summary>
      <returns>Cadena que contiene la representación de texto conocida de este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>Obtiene el límite de los objetos DbGeometry.</summary>
      <returns>El límite de los objetos DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>Devuelve un objeto geométrico que representa la unión de todos los puntos cuya distancia respecto a una instancia geométrica es menor o igual a un valor especificado.</summary>
      <returns>Objeto geométrico que representa la unión de todos los puntos.</returns>
      <param name="distance">Distancia.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>Obtiene el valor DbGeometry que representa el centroide de este valor DbGeometry, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Valor DbGeometry que representa el centroide de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry contiene espacialmente el argumento DbGeometry especificado.</summary>
      <returns>Es true si este valor geométrico contiene otros; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya contención con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>Obtiene la forma convexa de este valor DbGeometry como otro valor DbGeometry.</summary>
      <returns>La forma convexa de este valor DbGeometry como otro valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>Obtiene el identificador del sistema de coordenadas del objeto DbGeometry.</summary>
      <returns>El identificador del sistema de coordenadas del objeto DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry se cruza espacialmente con el argumento DbGeometry especificado.</summary>
      <returns>Es true si otro cruza este valor geométrico; de lo contrario, false.</returns>
      <param name="other">Valor de geometría que se debe comparar con este valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>Obtiene el identificador del sistema de coordenadas (SRID) predeterminado para los valores de geometría.</summary>
      <returns>El identificador del sistema de coordenadas (SRID) predeterminado para los valores de geometría.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la diferencia entre este valor DbGeometry y otro valor DbGeometry.</summary>
      <returns>Nuevo valor DbGeometry que representa la diferencia entre este valor geométrico y otro.</returns>
      <param name="other">Valor de geometría para el que se debe calcular la diferencia con este valor.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>Obtiene la dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado o bien, si el valor es una colección, la dimensión de su elemento más grande.</summary>
      <returns>La dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry es disjunto espacialmente del argumento DbGeometry especificado.</summary>
      <returns>Es true si otro es disjunto de este valor geométrico; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya disyunción con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la distancia entre los puntos más cercanos de este valor DbGeometry y otro valor DbGeometry.</summary>
      <returns>Valor doble que especifica la distancia entre los dos puntos más cercanos de este valor geométrico y otro.</returns>
      <param name="other">Valor de geometría para el que se debe calcular la distancia desde este valor.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>Devuelve un elemento de este valor DbGeometry desde una posición específica, si representa una colección de geometría.&amp;amp;lt;param name="index"&amp;amp;gt;La posición dentro de este valor geométrico desde el cual debe tomarse el elemento.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;El elemento en este valor geométrico en la posición especificada, si representa una colección de otros valores geométricos; de lo contrario, NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Un elemento de este valor DbGeometry desde una posición específica.</returns>
      <param name="index">El índice.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>Obtiene el número de elementos de este valor DbGeometry si representa una colección de geometría.&amp;amp;lt;returns&amp;amp;gt;El número de elementos de este valor geométrico, si representa una colección de otros valores geométricos; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Número de elementos de este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>Obtiene la elevación (coordenada Z) de este valor DbGeometry si representa un punto.&amp;amp;lt;returns&amp;amp;gt;La elevación (coordenada Z) este valor geométrico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La elevación (coordenada Z) este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>Obtiene un valor DbGeometry que representa el punto inicial de este valor, que puede ser NULL si este valor DbGeometry no representa una curva.</summary>
      <returns>Valor DbGeometry que representa el punto inicial este valor.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>Obtiene la envolvente (cuadro de límite mínimo) de este valor DbGeometry, como un valor de geometría.</summary>
      <returns>La envolvente (cuadro de límite mínimo) de este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>Obtiene el valor DbGeometry que representa el anillo exterior de este valor DbGeometry, que puede ser NULL si este valor no representa un polígono.</summary>
      <returns>Valor DbGeometry que representa el anillo exterior de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido especificado.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas predeterminado de geometría (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor del lenguaje de marcado de geografía (GML) especificado.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor GML con el identificador del sistema de coordenadas (SRID) predeterminado de geometría (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor del lenguaje de marcado de geografía (GML) y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor GML con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geometryMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">geometryMarkup</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido especificado.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas (SRID) predeterminado de geometría (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">wellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geometryCollectionWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="geometryCollectionWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">geometryCollectionWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>Devuelve un anillo interior de este valor DbGeometry en una posición específica, si representa un polígono.&amp;amp;lt;param name="index"&amp;amp;gt;La posición dentro de este valor geométrico desde el cual debe tomarse el anillo interior.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;El anillo interior en este valor geométrico en la posición especificada, si representa un polígono; de lo contrario, NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Un anillo interior desde este valor DbGeometry en una posición específica.</returns>
      <param name="index">El índice.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>Obtiene el número de anillos interiores de este valor DbGeometry si representa un polígono.&amp;amp;lt;returns&amp;amp;gt;El número de elementos de este valor geométrico, si representa un polígono; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Número de anillos interiores de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la intersección de este valor DbGeometry y otro valor DbGeometry.</summary>
      <returns>Nuevo valor DbGeometry que representa la intersección entre este valor de geometría y otro.</returns>
      <param name="other">Valor de geometría para el que se debe calcular la intersección con este valor.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry forma una intersección espacialmente con el argumento DbGeometry especificado.</summary>
      <returns>Es true si otro intersecta con este valor geométrico; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya intersección con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>Obtiene un valor booleano que acepta valores NULL que indica si este valor DbGeometry está cerrado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si este valor DbGeometry está cerrado; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>Obtiene un valor booleano que acepta valores NULL que indica si este valor DbGeometry está vacío, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si este valor DbGeometry está vacío; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>Obtiene un valor booleano que acepta valores NULL que indica si este valor DbGeometry es un anillo, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si este valor DbGeometry es un anillo; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>Obtiene un valor booleano que admite valores NULL, que indica si este valor DbGeometry es o no simple.</summary>
      <returns>Es true si este valor DbGeometry es simple; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>Obtiene un valor booleano que admite valores NULL, que indica si este valor DbGeometry es o no válido.</summary>
      <returns>Es true si este valor DbGeometry es válido; de lo contrario, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>Obtiene un valor double que acepta valores NULL que indica la longitud de este valor DbGeometry, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>La longitud de un este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="lineWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">lineWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="lineWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">lineWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>Obtiene la Medida (coordenada M) de este valor DbGeometry si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de Medida (coordenada M) de este valor geométrico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La Medida (coordenada M) de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multilínea de un valor binario.</summary>
      <returns>El valor multilínea de un valor binario.</returns>
      <param name="multiLineWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multilínea de un valor textual conocido.</summary>
      <returns>El valor multilínea de un valor textual conocido.</returns>
      <param name="multiLineWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multipunto de un valor binario conocido.</summary>
      <returns>El valor multipunto de un valor binario conocido.</returns>
      <param name="multiPointWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multipunto de un valor textual conocido.</summary>
      <returns>El valor multipunto de un valor textual conocido.</returns>
      <param name="multiPointWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Devuelve el valor multipoligonal de un valor binario conocido.</summary>
      <returns>El valor multipunto de un valor textual conocido.</returns>
      <param name="multiPolygonWellKnownBinary">El valor multipoligonal de un valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Devuelve el valor multipoligonal de un valor binario conocido.</summary>
      <returns>El valor multipoligonal de un valor binario conocido.</returns>
      <param name="multiPolygonWellKnownText">El valor multipoligonal de un valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry se superpone espacialmente al argumento DbGeometry especificado.</summary>
      <returns>Es true si este valor geométrico se superpone a otro; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya superposición con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>Devuelve un elemento de este valor DbGeometry desde una posición específica, si representa un anillo linestring o lineal.&amp;amp;lt;param name="index"&amp;amp;gt;La posición dentro de este valor geométrico desde el cual debe tomarse el elemento.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;El elemento en este valor geométrico en la posición especificada, si representa un anillo linestring o lineal; de lo contrario, NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Un elemento de este valor DbGeometry desde una posición específica.</returns>
      <param name="index">El índice.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>Obtiene el número de puntos de este valor DbGeometry si representa un anillo linestring o lineal.&amp;amp;lt;returns&amp;amp;gt;El número de elementos de este valor geométrico, si representa un anillo linestring o lineal; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Número de puntos de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="pointWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">pointWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="pointWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">pointWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>Obtiene un punto de la superficie de este valor DbGeometry, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Un punto sobre la superficie de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor binario conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="polygonWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">polygonWellKnownBinary</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor DbGeometry definido por el valor de texto conocido con el identificador del sistema de coordenadas especificado.</returns>
      <param name="polygonWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor DbGeometry debe usar.</param>
      <exception cref="T:System.ArgumentNullException">polygonWellKnownText</exception>
      <exception cref="T:System.ArgumentException">coordinateSystemId</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>Obtiene el proveedor espacial que se usará para las operaciones de este tipo espacial.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>Obtiene una representación de este valor DbGeometry que es específica del proveedor subyacente que lo construyó.</summary>
      <returns>Una representación de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Determina si este valor DbGeometry está relacionado espacialmente con el argumento DbGeometry especificado según el modelo de intersección Dimensionally Extended Nine-Intersection Model (DE-9IM) indicado.</summary>
      <returns>Es true si este valor geométrico está relacionado con otro, según la matriz del modelo de intersección especificado; de lo contrario, es false.</returns>
      <param name="other">Valor de geometría cuya relación con este valor de geometría se debe comparar.</param>
      <param name="matrix">Cadena que contiene la representación de texto del modelo de intersección DE-9IM que define la relación.</param>
      <exception cref="T:System.ArgumentNullException">othermatrix</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry es igual espacialmente que el argumento DbGeometry especificado.</summary>
      <returns>Es true si otro es espacialmente igual a este valor geométrico; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya igualdad con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>Obtiene la representación de nombre tipo espacial de este valor DbGeometry.</summary>
      <returns>Una representación de nombre tipo espacial de este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>Obtiene un valor DbGeometry que representa el punto inicial de este valor, que puede ser NULL si este valor DbGeometry no representa una curva.</summary>
      <returns>Valor DbGeometry que representa el punto inicial este valor.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la diferencia simétrica entre este valor DbGeometry y otro valor DbGeometry.</summary>
      <returns>Nuevo valor DbGeometry que representa la diferencia simétrica entre este valor de geometría y otro.</returns>
      <param name="other">Valor de geometría para el que se debe calcular la diferencia simétrica con este valor.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>Devuelve una representación en forma de cadena del valor de geometría.</summary>
      <returns>Una representación en forma de cadena del valor geométrico.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry toca espacialmente el argumento DbGeometry especificado.</summary>
      <returns>Es true si otro toca este valor geométrico; de lo contrario, false.</returns>
      <param name="other">Valor de geometría que se debe comparar con este valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la unión de este valor DbGeometry y otro valor DbGeometry.</summary>
      <returns>Nuevo valor DbGeometry que representa la unión entre este valor geométrico y otro.</returns>
      <param name="other">Valor de geometría para el que se debe calcular la unión con este valor.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>Obtiene o establece una representación conocida serializable de contrato de datos de este valor DbGeometry.</summary>
      <returns>Una bien conocida representación serializable de contrato de datos de este valor DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si este valor DbGeometry está espacialmente dentro del argumento DbGeometry especificado.</summary>
      <returns>Es true si este valor geométrico está dentro de otro; de lo contrario, false.</returns>
      <param name="other">Valor de geometría cuya contención con este valor de geometría se debe comparar.</param>
      <exception cref="T:System.ArgumentNullException">otro</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>Obtiene la coordenada X de este valor DbGeometry si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de la coordenada X de este valor geométrico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La coordenada X de este valor DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>Obtiene la coordenada Y de este valor DbGeometry si representa un punto.&amp;amp;lt;returns&amp;amp;gt;El valor de la coordenada Y de este valor geométrico, si representa un punto; de lo contrario, es NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>La coordenada Y de este valor DbGeometry.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>Representación serializable de contrato de datos de un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>Obtiene o establece el identificador del sistema de coordenadas (SRID) de este valor.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>Obtiene o establece la representación binaria conocida de este valor.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>Obtiene o establece la representación de texto conocida de este valor.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>API de servicio independiente del proveedor para compatibilidad con tipos geoespaciales (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>Cuando se implementa en tipos derivados, lee una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> de la columna situada en el índice de columna especificado.</summary>
      <returns>Instancia de DbGeography situada en el valor de columna especificado</returns>
      <param name="ordinal">Índice de la columna que contiene el valor geográfico</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> de la columna situada en el índice de columna especificado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la instancia de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> situada en el valor de columna especificado.</returns>
      <param name="ordinal">Índice de la columna que contiene el valor de geografía.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>Cuando se implementa en tipos derivados, lee una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> de la columna situada en el índice de columna especificado.</summary>
      <returns>Instancia de DbGeometry situada en el valor de columna especificado</returns>
      <param name="ordinal">Índice de la columna de registro de datos que contiene los datos geométricos específicos del proveedor</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Lee de forma asincrónica una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> de la columna situada en el índice de columna especificado.</summary>
      <returns>Tarea que representa la operación asincrónica.El resultado de la tarea contiene la instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> situada en el valor de columna especificado.</returns>
      <param name="ordinal">Índice de la columna de registro de datos que contiene los datos de geometría específicos del proveedor.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar mientras se espera que se complete la tarea.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>Devuelve si la columna situada en el índice de columna especificado es de tipo geography</summary>
      <returns>Es true si la columna situada en el índice de columna especificado es de tipo geography; de lo contrario, es false.</returns>
      <param name="ordinal">El ordinal de la columna.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>Devuelve si la columna situada en el índice de columna especificado es de tipo geometry</summary>
      <returns>Es true si la columna situada en el índice de columna especificado es de tipo geometry; de lo contrario, es false.</returns>
      <param name="ordinal">El ordinal de la columna.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>API de servicio independiente del proveedor para compatibilidad con tipos geoespaciales (Geometry/Geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtiene la representación binaria conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>La representación binaria conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía para el cual debe generarse la representación binaria conocida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtiene la representación binaria conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</summary>
      <returns>La representación binaria conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría para el que se debe generar la representación binaria conocida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>Genera la representación del lenguaje de marcado de geografía (GML) de este valor <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Cadena que contiene la representación GML de este valor DbGeography.</returns>
      <param name="geographyValue">Valor de geografía para el que se debe generar la representación GML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Genera la representación del lenguaje de marcado de geografía (GML) de este valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Cadena que contiene la representación GML de este valor DbGeometry.</returns>
      <param name="geometryValue">Valor de geometría para el que se debe generar la representación GML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtiene la representación de texto conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.Este valor solo debe incluir la longitud y la latitud de los puntos.</summary>
      <returns>Cadena que contiene la bien conocida representación de texto de geographyValue.</returns>
      <param name="geographyValue">Valor de geografía para el cual debe generarse la representación de texto conocida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtiene la representación de texto conocida del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, incluyendo únicamente las coordenadas X e Y de los puntos.</summary>
      <returns>Cadena que contiene la bien conocida representación de texto de geometryValue.</returns>
      <param name="geometryValue">Valor de geometría para el cual debe generarse la representación de texto conocida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve una representación textual de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> con elevación y medidas.</summary>
      <returns>Representación textual de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve una representación textual de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> con elevación y medidas.</summary>
      <returns>Una representación textual de <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> con elevación y medidas.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>Crea un valor de geometría que representa todos los puntos que se encuentran a una distancia igual o menor que el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>Nuevo valor DbGeography que representa todos los puntos que se encuentran a una distancia igual o menor desde geographyValue.</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <param name="distance">Valor doble que especifica a qué distancia desde geographyValue hay que almacenar en búfer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>Crea un valor de geometría que representa todos los puntos que se encuentran a una distancia igual o menor que el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</summary>
      <returns>Nuevo valor DbGeometry que representa todos los puntos que se encuentran a una distancia igual o menor desde geometryValue.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <param name="distance">Valor doble que especifica a qué distancia desde geographyValue hay que almacenar en búfer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> contiene espacialmente al otro.</summary>
      <returns>Es true si geometryValue contiene otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Este método está pensado para que lo usen las implementaciones derivadas de <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> después de validar el valor de proveedor especificado para asegurarse de que se puede usar con la implementación derivada.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que contiene el providerValue especificado y utiliza el valor spatialServices especificado como su implementación espacial.</returns>
      <param name="spatialServices">Instancia de servicios espaciales de la que dependerá el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> devuelto para su implementación de funcionalidad espacial.</param>
      <param name="providerValue">El valor del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Este método está pensado para que lo usen las implementaciones derivadas de <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> después de validar el valor de proveedor especificado para asegurarse de que se puede usar con la implementación derivada.</summary>
      <returns>Nueva instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que contiene el providerValue especificado y utiliza el valor spatialServices especificado como su implementación espacial.</returns>
      <param name="spatialServices">Instancia de servicios espaciales de la que dependerá el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> devuelto para su implementación de funcionalidad espacial.</param>
      <param name="providerValue">Un valor del proveedor.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>Crea un valor específico del proveedor compatible con esta implementación de servicios espaciales según la representación <see cref="T:System.Data.Entity.Spatial.DbGeography" /> conocida especificada.</summary>
      <returns>Valor específico del proveedor que codifica la información contenida en wellKnownValue de manera compatible con esta implementación de servicios espaciales.</returns>
      <param name="wellKnownValue">Instancia de <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> que contiene la representación conocida de un valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>Crea un valor específico del proveedor compatible con esta implementación de servicios espaciales según la representación <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> conocida especificada.</summary>
      <returns>Valor específico del proveedor que codifica la información contenida en wellKnownValue de manera compatible con esta implementación de servicios espaciales.</returns>
      <param name="wellKnownValue">Instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> que contiene la representación conocida de un valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> que representa el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado usando uno de los formatos espaciales conocidos estándar o ambos.</summary>
      <returns>Representación conocida de geographyValue, en tanto que nuevo <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> .</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> que representa el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado usando uno de los formatos espaciales conocidos estándar o ambos.</summary>
      <returns>Representación conocida de geometryValue, en tanto que nuevo <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> .</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados se cruzan espacialmente.</summary>
      <returns>Es true si geometryValue cruza otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>Obtiene los servicios predeterminados para <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
      <returns>Servicios predeterminados.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la diferencia de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nuevo valor DbGeography que representa la diferencia de geographyValue y otherGeography.</returns>
      <param name="geographyValue">Primer valor de geografía.</param>
      <param name="otherGeography">Segundo valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la diferencia entre dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nuevo valor DbGeometry que representa la diferencia entre geometryValue y otherGeometry.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificados son disjuntos espacialmente.</summary>
      <returns>Es true si geographyValue es disjunto de otherGeography; de lo contrario, false.</returns>
      <param name="geographyValue">Primer valor de geografía cuya disyunción se va a comparar.</param>
      <param name="otherGeography">Segundo valor de geografía cuya disyunción se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados son disjuntos espacialmente.</summary>
      <returns>Es true si geometryValue es disjunto de otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría cuya disyunción se va a comparar.</param>
      <param name="otherGeometry">Segundo valor de geometría cuya disyunción se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la distancia entre los puntos más cercanos de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Valor doble que especifica la distancia entre los dos puntos más cercanos de geographyValue y otherGeography.</returns>
      <param name="geographyValue">Primer valor de geografía.</param>
      <param name="otherGeography">Segundo valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la distancia entre los puntos más cercanos de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Valor doble que especifica la distancia entre los dos puntos más cercanos de geometryValue y otherGeometry.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Devuelve un elemento del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa una colección geográfica.</summary>
      <returns>Elemento de geographyValue en la posición index, si representa una colección de otros valores geográficos; de lo contrario, null.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una colección de geografía.</param>
      <param name="index">Posición dentro del valor de geografía del que se debe tomar el elemento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Devuelve un elemento del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa una colección geométrica.</summary>
      <returns>Elemento de geometryValue en la posición index, si representa una colección de otros valores geométricos; de lo contrario, null.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una colección de geometría.</param>
      <param name="index">Posición dentro del valor de geometría del que se debe tomar el elemento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geographyCollectionWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geographyCollectionWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor del lenguaje de marcado de geografía (GML) especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor GML con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geographyMarkup">Cadena que contiene la representación del lenguaje de marcado de geometría (GML) del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor del lenguaje de marcado de geografía (GML) y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor GML con el identificador del sistema de coordenadas (SRID) especificado.</returns>
      <param name="geographyMarkup">Cadena que contiene la representación del lenguaje de marcado de geometría (GML) del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función de un valor específico del proveedor que es compatible con esta implementación de servicios espaciales.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> respaldado por esta implementación de servicios espaciales y el valor de proveedor especificado.</returns>
      <param name="providerValue">Valor específico del proveedor que esta implementación de servicios espaciales puede interpretar como un valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor del texto especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor textual conocido con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="lineWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor de texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="lineWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiLineWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiLineWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPointWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor de texto conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPointWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPolygonWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del valor textual conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPolygonKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="pointWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="pointWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="polygonWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeography" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="polygonWellKnownText">Cadena que contiene una representación de texto conocida del valor de geografía.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geometryCollectionWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de colección <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geometryCollectionWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor del lenguaje de marcado de geografía (GML) especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor GML con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geometryMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor del lenguaje de marcado de geografía (GML) y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor GML con el identificador del sistema de coordenadas (SRID) especificado.</returns>
      <param name="geometryMarkup">Cadena que contiene la representación del lenguaje de marcado de geografía (GML) del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función de un valor específico del proveedor que es compatible con esta implementación de servicios espaciales.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> respaldado por esta implementación de servicios espaciales y el valor de proveedor especificado.</returns>
      <param name="providerValue">Valor específico del proveedor que esta implementación de servicios espaciales puede interpretar como un valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor del texto especificado.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor textual conocido con el identificador del sistema de coordenadas (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> predeterminado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="lineWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de línea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor de texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="lineWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiLineWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multilínea <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiLineWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPointWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor de texto conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipunto <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPointWellKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor binario conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPolygonWellKnownBinary">El valor binario conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del valor textual conocido y el identificador del sistema de coordenadas especificados.</summary>
      <returns>Un nuevo valor multipoligonal <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPolygonKnownText">El valor textual conocido.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="pointWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de punto <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="pointWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor binario y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor binario conocido con el identificador del sistema de coordenadas (SRID) especificado ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="polygonWellKnownBinary">Matriz de bytes que contiene una representación binaria conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>Crea un nuevo valor de polígono <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> en función del bien conocido valor del texto y el identificador del sistema de coordenadas (SRID) especificados.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> tal y como lo define el valor de texto conocido con el identificador del sistema de coordenadas (SRID) especificado( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="polygonWellKnownText">Cadena que contiene una representación de texto conocida del valor de geometría.</param>
      <param name="coordinateSystemId">Identificador del sistema de coordenadas que el nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> debe usar.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica la superficie del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Un valor doble que acepta valores NULL doble que indica la superficie del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una superficie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica la superficie del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, que puede ser NULL si este valor no representa una superficie.</summary>
      <returns>Un valor doble que acepta valores NULL doble que indica la superficie del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una superficie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica el límite del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>El límite del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa el centroide del valor DbGeometry especificado, que puede ser NULL si el valor no representa una superficie.</summary>
      <returns>Centroide de geometryValue, si representa una superficie; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una superficie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica la forma convexa del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>La forma convexa del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve el identificador del sistema de coordenadas del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>El identificador del sistema de coordenadas del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve el identificador del sistema de coordenadas del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</summary>
      <returns>El identificador del sistema de coordenadas del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>Obtiene la dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado o bien, si el valor es una colección, la dimensión del elemento más grande.</summary>
      <returns>Dimensión de geographyValue, o bien o dimensión del elemento más grande si <see cref="T:System.Data.Entity.Spatial.DbGeography" /> es una colección.</returns>
      <param name="geographyValue">Valor de geografía para el que se debe recuperar el valor de dimensión.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtiene la dimensión del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado o bien, si el valor es una colección, la dimensión del elemento más grande.</summary>
      <returns>Dimensión de geometryValue, o bien dimensión del elemento más grande si <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> es una colección.</returns>
      <param name="geometryValue">Valor de geometría para el que se debe recuperar el valor de dimensión.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve el número de elementos del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa una colección geográfica.</summary>
      <returns>Número de elementos de geographyValue si representa una colección de otros valores de geografía; de lo contrario, NULL.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una colección de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve el número de elementos del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa una colección geométrica.</summary>
      <returns>Número de elementos de geometryValue si representa una colección de otros valores de geometría; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una colección de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve la elevación (coordenada Z) del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa un punto.</summary>
      <returns>Elevación (coordenada Z) de geographyValue si representa un punto; de lo contrario, NULL.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve la elevación (coordenada Z) del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un punto.</summary>
      <returns>Elevación (Z) de geometryValue si representa un punto; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que representa el extremo del valor DbGeography especificado, que puede ser NULL si el valor no representa una curva.</summary>
      <returns>Punto final de geographyValue si representa una curva; de lo contrario, NULL.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa el extremo del valor DbGeometry especificado, que puede ser NULL si el valor no representa una curva.</summary>
      <returns>Punto final de geometryValue si representa una curva; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Obtiene la envolvente (cuadro de límite mínimo) del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, como un valor de geometría.</summary>
      <returns>Envolvente de geometryValue, en tanto que valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Valor de geometría para el que se debe recuperar el valor de envolvente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa el anillo exterior del valor DbGeometry especificado, que puede ser NULL si el valor no representa un polígono.</summary>
      <returns>Valor DbGeometry que representa el anillo exterior de geometryValue si representa un polígono; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un polígono.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve el número de anillos interiores del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un polígono.</summary>
      <returns>Número de elementos de geometryValue si representa un polígono; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un polígono.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor booleano que acepta valores NULL que indica si el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> está o no cerrado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> está cerrado; de lo contrario, false.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor booleano que acepta valores NULL que indica si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> está o no cerrado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> está cerrado; de lo contrario, false.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor booleano que acepta valores NULL si el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado está o no vacío.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado está vacío; de lo contrario, es false.</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor booleano que acepta valores NULL si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado está o no vacío.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado está vacío; de lo contrario, es false.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor booleano que acepta valores NULL que indica si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> es o no un anillo, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>Es true si el valor especificado <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> es un anillo; de lo contrario, es false.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor booleano que acepta valores NULL si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado es o no simple.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado es simple; de lo contrario, es false.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor booleano que acepta valores NULL si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado es válido.</summary>
      <returns>Es true si el valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado es válido; de lo contrario, es false.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve la coordenada de latitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa un punto.</summary>
      <returns>La coordenada de latitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica la longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>La longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor doble que acepta valores NULL que indica la longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, que puede ser NULL si este valor no representa una curva.</summary>
      <returns>La longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve la coordenada de longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa un punto.</summary>
      <returns>La coordenada de longitud del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve la coordenada M (Medida) del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado si representa un punto.</summary>
      <returns>La coordenada M (Medida) del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve la coordenada M (Medida) del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un punto.</summary>
      <returns>La coordenada M (Medida) del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve el número de puntos del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado, si representa una cadena lineal o un anillo lineal.</summary>
      <returns>El número de puntos del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un anillo linestring o lineal.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve el número de puntos del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, si representa una cadena lineal o un anillo lineal.</summary>
      <returns>El número de puntos del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un anillo linestring o lineal.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa un punto sobre la superficie del valor DbGeometry especificado, que puede ser NULL si el valor no representa una superficie.</summary>
      <returns>Un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa un punto sobre la superficie del valor DbGeometry especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una superficie.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor que indica el nombre del tipo espacial del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</summary>
      <returns>El nombre del tipo espacial del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor que indica el nombre del tipo espacial del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</summary>
      <returns>El nombre del tipo espacial del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que representa el punto de inicio del valor DbGeometry especificado, que puede ser NULL si el valor no representa una curva.</summary>
      <returns>El punto de inicio del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, que representa el punto de inicio del valor DbGeometry especificado, que puede ser NULL si el valor no representa una curva.</summary>
      <returns>El punto de inicio del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar una curva.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve la coordenada X del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un punto.</summary>
      <returns>La coordenada X del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Devuelve la coordenada Y del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un punto.</summary>
      <returns>La coordenada Y del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un punto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Devuelve un anillo interior a partir del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado si representa un polígono.</summary>
      <returns>Anillo interior de geometryValue en la posición index, si representa un polígono; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un polígono.</param>
      <param name="index">Posición dentro del valor de geometría del que se debe tomar el elemento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la intersección de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que representa la intersección de geographyValue y otherGeography.</returns>
      <param name="geographyValue">Primer valor de geografía.</param>
      <param name="otherGeography">Segundo valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la intersección de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa la intersección de geometryValue y otherGeometry.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificados forman una intersección espacialmente.</summary>
      <returns>Es true si geographyValue intersecta con otherGeography; de lo contrario, false.</returns>
      <param name="geographyValue">Primer valor de geografía cuya intersección se va a comparar.</param>
      <param name="otherGeography">Segundo valor de geografía cuya intersección se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados forman una intersección espacialmente.</summary>
      <returns>Es true si geometryValue intersecta con otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría cuya intersección se va a comparar.</param>
      <param name="otherGeometry">Segundo valor de geometría cuya intersección se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>Invalide esta propiedad para permitir que el proveedor espacial falle rápidamente cuando los tipos nativos u otros recursos necesarios para que el proveedor espacial funcione correctamente no estén disponibles.El valor predeterminado es true, que significa que EF continuará dando por supuesto que el proveedor tiene los tipos y los recursos necesarios en lugar de producir un error con rapidez.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados se superponen espacialmente.</summary>
      <returns>Es true si geometryValue se superpone a otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Devuelve un elemento de punto del valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificado, si representa una cadena lineal o un anillo lineal.</summary>
      <returns>Punto de geographyValue en la posición index, si representa un anillo linestring o lineal; de lo contrario, NULL.</returns>
      <param name="geographyValue">Valor de geografía, que no necesita representar un anillo linestring o lineal.</param>
      <param name="index">Posición dentro del valor de geografía del que se debe tomar el elemento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Devuelve un elemento de punto del valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificado, si representa una cadena lineal o un anillo lineal.</summary>
      <returns>Punto de geometryValue en la posición index, si representa un anillo linestring o lineal; de lo contrario, NULL.</returns>
      <param name="geometryValue">Valor de geometría, que no necesita representar un anillo linestring o lineal.</param>
      <param name="index">Posición dentro del valor de geometría del que se debe tomar el elemento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados están relacionados espacialmente según el modelo de intersección Dimensionally Extended Nine-Intersection Model (DE-9IM) especificado.</summary>
      <returns>Es true si este valor geometryValue se relaciona con otherGeometry según la matriz del modelo de intersección especificado; de lo contrario, es false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Valor de geometría cuya relación con el primer valor de geometría se debe comparar.</param>
      <param name="matrix">Cadena que contiene la representación de texto del modelo de intersección DE-9IM que define la relación.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> , <paramref name="otherGeometry" /> o <paramref name="matrix" /> es NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" /> especificados son iguales espacialmente.</summary>
      <returns>Es true si geographyValue es espacialmente igual a otherGeography; de lo contrario, false.</returns>
      <param name="geographyValue">Primer valor de geografía cuya igualdad se va a comparar.</param>
      <param name="otherGeography">Segundo valor de geografía cuya igualdad se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados son iguales espacialmente.</summary>
      <returns>Es true si geometryValue es espacialmente igual a otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría cuya igualdad se va a comparar.</param>
      <param name="otherGeometry">Segundo valor de geometría cuya igualdad se va a comparar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la diferencia simétrica de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que representa la diferencia simétrica de geographyValue y otherGeography.</returns>
      <param name="geographyValue">Primer valor de geografía.</param>
      <param name="otherGeography">Segundo valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la diferencia simétrica entre dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa la diferencia simétrica entre geometryValue y otherGeometry.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si los dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> especificados se tocan espacialmente.</summary>
      <returns>Es true si geometryValue toca otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Calcula la unión de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Un nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeography" /> que representa la unión de geographyValue y otherGeography.</returns>
      <param name="geographyValue">Primer valor de geografía.</param>
      <param name="otherGeography">Segundo valor de geografía.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> o <paramref name="otherGeography" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Calcula la unión de dos valores <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Nuevo valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> que representa la unión de geometryValue y otherGeometry.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Determina si un valor <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> está espacialmente dentro del otro.</summary>
      <returns>Es true si geometryValue está dentro de otherGeometry; de lo contrario, false.</returns>
      <param name="geometryValue">Primer valor de geometría.</param>
      <param name="otherGeometry">Segundo valor de geometría.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> o <paramref name="otherGeometry" /> no es compatible con esta implementación de servicios espaciales.</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Excepción que se produce en <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> cuando tiene lugar un error en la validación de entidades.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Inicializa una nueva instancia de DbEntityValidationException.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de DbEntityValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Inicializa una nueva instancia de DbEntityValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="entityValidationResults">Resultados de la validación.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Inicializa una nueva instancia de DbEntityValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="entityValidationResults">Resultados de la validación.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de DbEntityValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Resultados de la validación.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Representa los resultados de la validación para una entidad única.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Crea una instancia de la clase <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />.</summary>
      <param name="entry">Entrada de entidad a la que se aplican los resultados.Nunca es NULL.</param>
      <param name="validationErrors">Lista de instancias de <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Nunca es NULL.Puede estar vacío, lo que significa que la entidad es válida.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Obtiene una instancia de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> a la que se aplican los resultados.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Obtiene un indicador si la entidad es válida.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Obtiene los errores de validación.Nunca es NULL.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Excepción que se produce en <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> al producirse una excepción en el código de validación.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Inicializa una nueva instancia de DbUnexpectedValidationException.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de DbUnexpectedValidationException con la información y el contexto de serialización especificados.</summary>
      <param name="info">La información de serialización.</param>
      <param name="context">Contexto de transmisión por secuencias.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de DbUnexpectedValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de DbUnexpectedValidationException.</summary>
      <param name="message">Mensaje de excepción.</param>
      <param name="innerException">Excepción interna.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Error de validación.Puede ser un error de validación en el nivel de entidad o en el nivel de propiedad.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Crea una instancia de <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Nombre de la propiedad no válida.Puede ser NULL.</param>
      <param name="errorMessage">Mensaje de error de validación.Puede ser NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Obtiene el mensaje de error de validación.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Obtiene el nombre de la propiedad no válida.</summary>
    </member>
  </members>
</doc>